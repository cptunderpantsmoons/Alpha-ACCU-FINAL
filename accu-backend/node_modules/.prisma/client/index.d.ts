
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model ACCU
 * 
 */
export type ACCU = $Result.DefaultSelection<Prisma.$ACCUPayload>
/**
 * Model Project
 * 
 */
export type Project = $Result.DefaultSelection<Prisma.$ProjectPayload>
/**
 * Model ValuationLog
 * 
 */
export type ValuationLog = $Result.DefaultSelection<Prisma.$ValuationLogPayload>
/**
 * Model AuditLogEntry
 * 
 */
export type AuditLogEntry = $Result.DefaultSelection<Prisma.$AuditLogEntryPayload>
/**
 * Model JournalEntry
 * 
 */
export type JournalEntry = $Result.DefaultSelection<Prisma.$JournalEntryPayload>
/**
 * Model JournalLine
 * 
 */
export type JournalLine = $Result.DefaultSelection<Prisma.$JournalLinePayload>
/**
 * Model XbrlTag
 * 
 */
export type XbrlTag = $Result.DefaultSelection<Prisma.$XbrlTagPayload>
/**
 * Model ReclassificationRequest
 * 
 */
export type ReclassificationRequest = $Result.DefaultSelection<Prisma.$ReclassificationRequestPayload>
/**
 * Model MarketPrice
 * 
 */
export type MarketPrice = $Result.DefaultSelection<Prisma.$MarketPricePayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model UserSetting
 * 
 */
export type UserSetting = $Result.DefaultSelection<Prisma.$UserSettingPayload>
/**
 * Model Entity
 * 
 */
export type Entity = $Result.DefaultSelection<Prisma.$EntityPayload>
/**
 * Model Loan
 * 
 */
export type Loan = $Result.DefaultSelection<Prisma.$LoanPayload>
/**
 * Model Creditor
 * 
 */
export type Creditor = $Result.DefaultSelection<Prisma.$CreditorPayload>
/**
 * Model ImportJob
 * 
 */
export type ImportJob = $Result.DefaultSelection<Prisma.$ImportJobPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Classification: {
  inventory: 'inventory',
  intangible: 'intangible',
  fvtpl: 'fvtpl'
};

export type Classification = (typeof Classification)[keyof typeof Classification]


export const LoanStatus: {
  active: 'active',
  completed: 'completed',
  expired: 'expired',
  default: 'default'
};

export type LoanStatus = (typeof LoanStatus)[keyof typeof LoanStatus]


export const ReclassificationStatus: {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected'
};

export type ReclassificationStatus = (typeof ReclassificationStatus)[keyof typeof ReclassificationStatus]

}

export type Classification = $Enums.Classification

export const Classification: typeof $Enums.Classification

export type LoanStatus = $Enums.LoanStatus

export const LoanStatus: typeof $Enums.LoanStatus

export type ReclassificationStatus = $Enums.ReclassificationStatus

export const ReclassificationStatus: typeof $Enums.ReclassificationStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more ACCUS
 * const aCCUS = await prisma.aCCU.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more ACCUS
   * const aCCUS = await prisma.aCCU.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.aCCU`: Exposes CRUD operations for the **ACCU** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ACCUS
    * const aCCUS = await prisma.aCCU.findMany()
    * ```
    */
  get aCCU(): Prisma.ACCUDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.project.findMany()
    * ```
    */
  get project(): Prisma.ProjectDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.valuationLog`: Exposes CRUD operations for the **ValuationLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ValuationLogs
    * const valuationLogs = await prisma.valuationLog.findMany()
    * ```
    */
  get valuationLog(): Prisma.ValuationLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.auditLogEntry`: Exposes CRUD operations for the **AuditLogEntry** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogEntries
    * const auditLogEntries = await prisma.auditLogEntry.findMany()
    * ```
    */
  get auditLogEntry(): Prisma.AuditLogEntryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.journalEntry`: Exposes CRUD operations for the **JournalEntry** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JournalEntries
    * const journalEntries = await prisma.journalEntry.findMany()
    * ```
    */
  get journalEntry(): Prisma.JournalEntryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.journalLine`: Exposes CRUD operations for the **JournalLine** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more JournalLines
    * const journalLines = await prisma.journalLine.findMany()
    * ```
    */
  get journalLine(): Prisma.JournalLineDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.xbrlTag`: Exposes CRUD operations for the **XbrlTag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more XbrlTags
    * const xbrlTags = await prisma.xbrlTag.findMany()
    * ```
    */
  get xbrlTag(): Prisma.XbrlTagDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.reclassificationRequest`: Exposes CRUD operations for the **ReclassificationRequest** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReclassificationRequests
    * const reclassificationRequests = await prisma.reclassificationRequest.findMany()
    * ```
    */
  get reclassificationRequest(): Prisma.ReclassificationRequestDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.marketPrice`: Exposes CRUD operations for the **MarketPrice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more MarketPrices
    * const marketPrices = await prisma.marketPrice.findMany()
    * ```
    */
  get marketPrice(): Prisma.MarketPriceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userSetting`: Exposes CRUD operations for the **UserSetting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserSettings
    * const userSettings = await prisma.userSetting.findMany()
    * ```
    */
  get userSetting(): Prisma.UserSettingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.entity`: Exposes CRUD operations for the **Entity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Entities
    * const entities = await prisma.entity.findMany()
    * ```
    */
  get entity(): Prisma.EntityDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.loan`: Exposes CRUD operations for the **Loan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Loans
    * const loans = await prisma.loan.findMany()
    * ```
    */
  get loan(): Prisma.LoanDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.creditor`: Exposes CRUD operations for the **Creditor** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Creditors
    * const creditors = await prisma.creditor.findMany()
    * ```
    */
  get creditor(): Prisma.CreditorDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.importJob`: Exposes CRUD operations for the **ImportJob** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ImportJobs
    * const importJobs = await prisma.importJob.findMany()
    * ```
    */
  get importJob(): Prisma.ImportJobDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.16.2
   * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    ACCU: 'ACCU',
    Project: 'Project',
    ValuationLog: 'ValuationLog',
    AuditLogEntry: 'AuditLogEntry',
    JournalEntry: 'JournalEntry',
    JournalLine: 'JournalLine',
    XbrlTag: 'XbrlTag',
    ReclassificationRequest: 'ReclassificationRequest',
    MarketPrice: 'MarketPrice',
    User: 'User',
    UserSetting: 'UserSetting',
    Entity: 'Entity',
    Loan: 'Loan',
    Creditor: 'Creditor',
    ImportJob: 'ImportJob'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "aCCU" | "project" | "valuationLog" | "auditLogEntry" | "journalEntry" | "journalLine" | "xbrlTag" | "reclassificationRequest" | "marketPrice" | "user" | "userSetting" | "entity" | "loan" | "creditor" | "importJob"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      ACCU: {
        payload: Prisma.$ACCUPayload<ExtArgs>
        fields: Prisma.ACCUFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ACCUFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ACCUPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ACCUFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ACCUPayload>
          }
          findFirst: {
            args: Prisma.ACCUFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ACCUPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ACCUFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ACCUPayload>
          }
          findMany: {
            args: Prisma.ACCUFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ACCUPayload>[]
          }
          create: {
            args: Prisma.ACCUCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ACCUPayload>
          }
          createMany: {
            args: Prisma.ACCUCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ACCUCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ACCUPayload>[]
          }
          delete: {
            args: Prisma.ACCUDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ACCUPayload>
          }
          update: {
            args: Prisma.ACCUUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ACCUPayload>
          }
          deleteMany: {
            args: Prisma.ACCUDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ACCUUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ACCUUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ACCUPayload>[]
          }
          upsert: {
            args: Prisma.ACCUUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ACCUPayload>
          }
          aggregate: {
            args: Prisma.ACCUAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateACCU>
          }
          groupBy: {
            args: Prisma.ACCUGroupByArgs<ExtArgs>
            result: $Utils.Optional<ACCUGroupByOutputType>[]
          }
          count: {
            args: Prisma.ACCUCountArgs<ExtArgs>
            result: $Utils.Optional<ACCUCountAggregateOutputType> | number
          }
        }
      }
      Project: {
        payload: Prisma.$ProjectPayload<ExtArgs>
        fields: Prisma.ProjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findFirst: {
            args: Prisma.ProjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findMany: {
            args: Prisma.ProjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          create: {
            args: Prisma.ProjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          createMany: {
            args: Prisma.ProjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProjectCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          delete: {
            args: Prisma.ProjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          update: {
            args: Prisma.ProjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          deleteMany: {
            args: Prisma.ProjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProjectUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          upsert: {
            args: Prisma.ProjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          aggregate: {
            args: Prisma.ProjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProject>
          }
          groupBy: {
            args: Prisma.ProjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectCountAggregateOutputType> | number
          }
        }
      }
      ValuationLog: {
        payload: Prisma.$ValuationLogPayload<ExtArgs>
        fields: Prisma.ValuationLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ValuationLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValuationLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ValuationLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValuationLogPayload>
          }
          findFirst: {
            args: Prisma.ValuationLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValuationLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ValuationLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValuationLogPayload>
          }
          findMany: {
            args: Prisma.ValuationLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValuationLogPayload>[]
          }
          create: {
            args: Prisma.ValuationLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValuationLogPayload>
          }
          createMany: {
            args: Prisma.ValuationLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ValuationLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValuationLogPayload>[]
          }
          delete: {
            args: Prisma.ValuationLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValuationLogPayload>
          }
          update: {
            args: Prisma.ValuationLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValuationLogPayload>
          }
          deleteMany: {
            args: Prisma.ValuationLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ValuationLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ValuationLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValuationLogPayload>[]
          }
          upsert: {
            args: Prisma.ValuationLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValuationLogPayload>
          }
          aggregate: {
            args: Prisma.ValuationLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateValuationLog>
          }
          groupBy: {
            args: Prisma.ValuationLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<ValuationLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.ValuationLogCountArgs<ExtArgs>
            result: $Utils.Optional<ValuationLogCountAggregateOutputType> | number
          }
        }
      }
      AuditLogEntry: {
        payload: Prisma.$AuditLogEntryPayload<ExtArgs>
        fields: Prisma.AuditLogEntryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogEntryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogEntryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogEntryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogEntryPayload>
          }
          findFirst: {
            args: Prisma.AuditLogEntryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogEntryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogEntryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogEntryPayload>
          }
          findMany: {
            args: Prisma.AuditLogEntryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogEntryPayload>[]
          }
          create: {
            args: Prisma.AuditLogEntryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogEntryPayload>
          }
          createMany: {
            args: Prisma.AuditLogEntryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditLogEntryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogEntryPayload>[]
          }
          delete: {
            args: Prisma.AuditLogEntryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogEntryPayload>
          }
          update: {
            args: Prisma.AuditLogEntryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogEntryPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogEntryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogEntryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.AuditLogEntryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogEntryPayload>[]
          }
          upsert: {
            args: Prisma.AuditLogEntryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogEntryPayload>
          }
          aggregate: {
            args: Prisma.AuditLogEntryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLogEntry>
          }
          groupBy: {
            args: Prisma.AuditLogEntryGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogEntryGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogEntryCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogEntryCountAggregateOutputType> | number
          }
        }
      }
      JournalEntry: {
        payload: Prisma.$JournalEntryPayload<ExtArgs>
        fields: Prisma.JournalEntryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JournalEntryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalEntryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JournalEntryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalEntryPayload>
          }
          findFirst: {
            args: Prisma.JournalEntryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalEntryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JournalEntryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalEntryPayload>
          }
          findMany: {
            args: Prisma.JournalEntryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalEntryPayload>[]
          }
          create: {
            args: Prisma.JournalEntryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalEntryPayload>
          }
          createMany: {
            args: Prisma.JournalEntryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JournalEntryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalEntryPayload>[]
          }
          delete: {
            args: Prisma.JournalEntryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalEntryPayload>
          }
          update: {
            args: Prisma.JournalEntryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalEntryPayload>
          }
          deleteMany: {
            args: Prisma.JournalEntryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JournalEntryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.JournalEntryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalEntryPayload>[]
          }
          upsert: {
            args: Prisma.JournalEntryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalEntryPayload>
          }
          aggregate: {
            args: Prisma.JournalEntryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJournalEntry>
          }
          groupBy: {
            args: Prisma.JournalEntryGroupByArgs<ExtArgs>
            result: $Utils.Optional<JournalEntryGroupByOutputType>[]
          }
          count: {
            args: Prisma.JournalEntryCountArgs<ExtArgs>
            result: $Utils.Optional<JournalEntryCountAggregateOutputType> | number
          }
        }
      }
      JournalLine: {
        payload: Prisma.$JournalLinePayload<ExtArgs>
        fields: Prisma.JournalLineFieldRefs
        operations: {
          findUnique: {
            args: Prisma.JournalLineFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalLinePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.JournalLineFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalLinePayload>
          }
          findFirst: {
            args: Prisma.JournalLineFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalLinePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.JournalLineFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalLinePayload>
          }
          findMany: {
            args: Prisma.JournalLineFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalLinePayload>[]
          }
          create: {
            args: Prisma.JournalLineCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalLinePayload>
          }
          createMany: {
            args: Prisma.JournalLineCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.JournalLineCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalLinePayload>[]
          }
          delete: {
            args: Prisma.JournalLineDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalLinePayload>
          }
          update: {
            args: Prisma.JournalLineUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalLinePayload>
          }
          deleteMany: {
            args: Prisma.JournalLineDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.JournalLineUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.JournalLineUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalLinePayload>[]
          }
          upsert: {
            args: Prisma.JournalLineUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$JournalLinePayload>
          }
          aggregate: {
            args: Prisma.JournalLineAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateJournalLine>
          }
          groupBy: {
            args: Prisma.JournalLineGroupByArgs<ExtArgs>
            result: $Utils.Optional<JournalLineGroupByOutputType>[]
          }
          count: {
            args: Prisma.JournalLineCountArgs<ExtArgs>
            result: $Utils.Optional<JournalLineCountAggregateOutputType> | number
          }
        }
      }
      XbrlTag: {
        payload: Prisma.$XbrlTagPayload<ExtArgs>
        fields: Prisma.XbrlTagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.XbrlTagFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$XbrlTagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.XbrlTagFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$XbrlTagPayload>
          }
          findFirst: {
            args: Prisma.XbrlTagFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$XbrlTagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.XbrlTagFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$XbrlTagPayload>
          }
          findMany: {
            args: Prisma.XbrlTagFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$XbrlTagPayload>[]
          }
          create: {
            args: Prisma.XbrlTagCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$XbrlTagPayload>
          }
          createMany: {
            args: Prisma.XbrlTagCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.XbrlTagCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$XbrlTagPayload>[]
          }
          delete: {
            args: Prisma.XbrlTagDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$XbrlTagPayload>
          }
          update: {
            args: Prisma.XbrlTagUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$XbrlTagPayload>
          }
          deleteMany: {
            args: Prisma.XbrlTagDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.XbrlTagUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.XbrlTagUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$XbrlTagPayload>[]
          }
          upsert: {
            args: Prisma.XbrlTagUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$XbrlTagPayload>
          }
          aggregate: {
            args: Prisma.XbrlTagAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateXbrlTag>
          }
          groupBy: {
            args: Prisma.XbrlTagGroupByArgs<ExtArgs>
            result: $Utils.Optional<XbrlTagGroupByOutputType>[]
          }
          count: {
            args: Prisma.XbrlTagCountArgs<ExtArgs>
            result: $Utils.Optional<XbrlTagCountAggregateOutputType> | number
          }
        }
      }
      ReclassificationRequest: {
        payload: Prisma.$ReclassificationRequestPayload<ExtArgs>
        fields: Prisma.ReclassificationRequestFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReclassificationRequestFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReclassificationRequestPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReclassificationRequestFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReclassificationRequestPayload>
          }
          findFirst: {
            args: Prisma.ReclassificationRequestFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReclassificationRequestPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReclassificationRequestFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReclassificationRequestPayload>
          }
          findMany: {
            args: Prisma.ReclassificationRequestFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReclassificationRequestPayload>[]
          }
          create: {
            args: Prisma.ReclassificationRequestCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReclassificationRequestPayload>
          }
          createMany: {
            args: Prisma.ReclassificationRequestCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReclassificationRequestCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReclassificationRequestPayload>[]
          }
          delete: {
            args: Prisma.ReclassificationRequestDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReclassificationRequestPayload>
          }
          update: {
            args: Prisma.ReclassificationRequestUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReclassificationRequestPayload>
          }
          deleteMany: {
            args: Prisma.ReclassificationRequestDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReclassificationRequestUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReclassificationRequestUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReclassificationRequestPayload>[]
          }
          upsert: {
            args: Prisma.ReclassificationRequestUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReclassificationRequestPayload>
          }
          aggregate: {
            args: Prisma.ReclassificationRequestAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReclassificationRequest>
          }
          groupBy: {
            args: Prisma.ReclassificationRequestGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReclassificationRequestGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReclassificationRequestCountArgs<ExtArgs>
            result: $Utils.Optional<ReclassificationRequestCountAggregateOutputType> | number
          }
        }
      }
      MarketPrice: {
        payload: Prisma.$MarketPricePayload<ExtArgs>
        fields: Prisma.MarketPriceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MarketPriceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketPricePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MarketPriceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketPricePayload>
          }
          findFirst: {
            args: Prisma.MarketPriceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketPricePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MarketPriceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketPricePayload>
          }
          findMany: {
            args: Prisma.MarketPriceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketPricePayload>[]
          }
          create: {
            args: Prisma.MarketPriceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketPricePayload>
          }
          createMany: {
            args: Prisma.MarketPriceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MarketPriceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketPricePayload>[]
          }
          delete: {
            args: Prisma.MarketPriceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketPricePayload>
          }
          update: {
            args: Prisma.MarketPriceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketPricePayload>
          }
          deleteMany: {
            args: Prisma.MarketPriceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MarketPriceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MarketPriceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketPricePayload>[]
          }
          upsert: {
            args: Prisma.MarketPriceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MarketPricePayload>
          }
          aggregate: {
            args: Prisma.MarketPriceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMarketPrice>
          }
          groupBy: {
            args: Prisma.MarketPriceGroupByArgs<ExtArgs>
            result: $Utils.Optional<MarketPriceGroupByOutputType>[]
          }
          count: {
            args: Prisma.MarketPriceCountArgs<ExtArgs>
            result: $Utils.Optional<MarketPriceCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      UserSetting: {
        payload: Prisma.$UserSettingPayload<ExtArgs>
        fields: Prisma.UserSettingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserSettingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserSettingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingPayload>
          }
          findFirst: {
            args: Prisma.UserSettingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserSettingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingPayload>
          }
          findMany: {
            args: Prisma.UserSettingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingPayload>[]
          }
          create: {
            args: Prisma.UserSettingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingPayload>
          }
          createMany: {
            args: Prisma.UserSettingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserSettingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingPayload>[]
          }
          delete: {
            args: Prisma.UserSettingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingPayload>
          }
          update: {
            args: Prisma.UserSettingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingPayload>
          }
          deleteMany: {
            args: Prisma.UserSettingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserSettingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserSettingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingPayload>[]
          }
          upsert: {
            args: Prisma.UserSettingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserSettingPayload>
          }
          aggregate: {
            args: Prisma.UserSettingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserSetting>
          }
          groupBy: {
            args: Prisma.UserSettingGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserSettingGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserSettingCountArgs<ExtArgs>
            result: $Utils.Optional<UserSettingCountAggregateOutputType> | number
          }
        }
      }
      Entity: {
        payload: Prisma.$EntityPayload<ExtArgs>
        fields: Prisma.EntityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EntityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EntityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntityPayload>
          }
          findFirst: {
            args: Prisma.EntityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EntityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntityPayload>
          }
          findMany: {
            args: Prisma.EntityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntityPayload>[]
          }
          create: {
            args: Prisma.EntityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntityPayload>
          }
          createMany: {
            args: Prisma.EntityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.EntityCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntityPayload>[]
          }
          delete: {
            args: Prisma.EntityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntityPayload>
          }
          update: {
            args: Prisma.EntityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntityPayload>
          }
          deleteMany: {
            args: Prisma.EntityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.EntityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.EntityUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntityPayload>[]
          }
          upsert: {
            args: Prisma.EntityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$EntityPayload>
          }
          aggregate: {
            args: Prisma.EntityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateEntity>
          }
          groupBy: {
            args: Prisma.EntityGroupByArgs<ExtArgs>
            result: $Utils.Optional<EntityGroupByOutputType>[]
          }
          count: {
            args: Prisma.EntityCountArgs<ExtArgs>
            result: $Utils.Optional<EntityCountAggregateOutputType> | number
          }
        }
      }
      Loan: {
        payload: Prisma.$LoanPayload<ExtArgs>
        fields: Prisma.LoanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LoanFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LoanFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanPayload>
          }
          findFirst: {
            args: Prisma.LoanFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LoanFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanPayload>
          }
          findMany: {
            args: Prisma.LoanFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanPayload>[]
          }
          create: {
            args: Prisma.LoanCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanPayload>
          }
          createMany: {
            args: Prisma.LoanCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LoanCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanPayload>[]
          }
          delete: {
            args: Prisma.LoanDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanPayload>
          }
          update: {
            args: Prisma.LoanUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanPayload>
          }
          deleteMany: {
            args: Prisma.LoanDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LoanUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LoanUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanPayload>[]
          }
          upsert: {
            args: Prisma.LoanUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LoanPayload>
          }
          aggregate: {
            args: Prisma.LoanAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLoan>
          }
          groupBy: {
            args: Prisma.LoanGroupByArgs<ExtArgs>
            result: $Utils.Optional<LoanGroupByOutputType>[]
          }
          count: {
            args: Prisma.LoanCountArgs<ExtArgs>
            result: $Utils.Optional<LoanCountAggregateOutputType> | number
          }
        }
      }
      Creditor: {
        payload: Prisma.$CreditorPayload<ExtArgs>
        fields: Prisma.CreditorFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CreditorFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditorPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CreditorFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditorPayload>
          }
          findFirst: {
            args: Prisma.CreditorFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditorPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CreditorFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditorPayload>
          }
          findMany: {
            args: Prisma.CreditorFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditorPayload>[]
          }
          create: {
            args: Prisma.CreditorCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditorPayload>
          }
          createMany: {
            args: Prisma.CreditorCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CreditorCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditorPayload>[]
          }
          delete: {
            args: Prisma.CreditorDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditorPayload>
          }
          update: {
            args: Prisma.CreditorUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditorPayload>
          }
          deleteMany: {
            args: Prisma.CreditorDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CreditorUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CreditorUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditorPayload>[]
          }
          upsert: {
            args: Prisma.CreditorUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CreditorPayload>
          }
          aggregate: {
            args: Prisma.CreditorAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCreditor>
          }
          groupBy: {
            args: Prisma.CreditorGroupByArgs<ExtArgs>
            result: $Utils.Optional<CreditorGroupByOutputType>[]
          }
          count: {
            args: Prisma.CreditorCountArgs<ExtArgs>
            result: $Utils.Optional<CreditorCountAggregateOutputType> | number
          }
        }
      }
      ImportJob: {
        payload: Prisma.$ImportJobPayload<ExtArgs>
        fields: Prisma.ImportJobFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ImportJobFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImportJobPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ImportJobFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImportJobPayload>
          }
          findFirst: {
            args: Prisma.ImportJobFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImportJobPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ImportJobFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImportJobPayload>
          }
          findMany: {
            args: Prisma.ImportJobFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImportJobPayload>[]
          }
          create: {
            args: Prisma.ImportJobCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImportJobPayload>
          }
          createMany: {
            args: Prisma.ImportJobCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ImportJobCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImportJobPayload>[]
          }
          delete: {
            args: Prisma.ImportJobDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImportJobPayload>
          }
          update: {
            args: Prisma.ImportJobUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImportJobPayload>
          }
          deleteMany: {
            args: Prisma.ImportJobDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ImportJobUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ImportJobUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImportJobPayload>[]
          }
          upsert: {
            args: Prisma.ImportJobUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImportJobPayload>
          }
          aggregate: {
            args: Prisma.ImportJobAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateImportJob>
          }
          groupBy: {
            args: Prisma.ImportJobGroupByArgs<ExtArgs>
            result: $Utils.Optional<ImportJobGroupByOutputType>[]
          }
          count: {
            args: Prisma.ImportJobCountArgs<ExtArgs>
            result: $Utils.Optional<ImportJobCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    aCCU?: ACCUOmit
    project?: ProjectOmit
    valuationLog?: ValuationLogOmit
    auditLogEntry?: AuditLogEntryOmit
    journalEntry?: JournalEntryOmit
    journalLine?: JournalLineOmit
    xbrlTag?: XbrlTagOmit
    reclassificationRequest?: ReclassificationRequestOmit
    marketPrice?: MarketPriceOmit
    user?: UserOmit
    userSetting?: UserSettingOmit
    entity?: EntityOmit
    loan?: LoanOmit
    creditor?: CreditorOmit
    importJob?: ImportJobOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ACCUCountOutputType
   */

  export type ACCUCountOutputType = {
    valuationLogs: number
    reclassificationRequests: number
    loans: number
    auditLogEntries: number
  }

  export type ACCUCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    valuationLogs?: boolean | ACCUCountOutputTypeCountValuationLogsArgs
    reclassificationRequests?: boolean | ACCUCountOutputTypeCountReclassificationRequestsArgs
    loans?: boolean | ACCUCountOutputTypeCountLoansArgs
    auditLogEntries?: boolean | ACCUCountOutputTypeCountAuditLogEntriesArgs
  }

  // Custom InputTypes
  /**
   * ACCUCountOutputType without action
   */
  export type ACCUCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ACCUCountOutputType
     */
    select?: ACCUCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ACCUCountOutputType without action
   */
  export type ACCUCountOutputTypeCountValuationLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ValuationLogWhereInput
  }

  /**
   * ACCUCountOutputType without action
   */
  export type ACCUCountOutputTypeCountReclassificationRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReclassificationRequestWhereInput
  }

  /**
   * ACCUCountOutputType without action
   */
  export type ACCUCountOutputTypeCountLoansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoanWhereInput
  }

  /**
   * ACCUCountOutputType without action
   */
  export type ACCUCountOutputTypeCountAuditLogEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogEntryWhereInput
  }


  /**
   * Count Type ProjectCountOutputType
   */

  export type ProjectCountOutputType = {
    accus: number
  }

  export type ProjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accus?: boolean | ProjectCountOutputTypeCountAccusArgs
  }

  // Custom InputTypes
  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectCountOutputType
     */
    select?: ProjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountAccusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ACCUWhereInput
  }


  /**
   * Count Type JournalEntryCountOutputType
   */

  export type JournalEntryCountOutputType = {
    lines: number
  }

  export type JournalEntryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lines?: boolean | JournalEntryCountOutputTypeCountLinesArgs
  }

  // Custom InputTypes
  /**
   * JournalEntryCountOutputType without action
   */
  export type JournalEntryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalEntryCountOutputType
     */
    select?: JournalEntryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * JournalEntryCountOutputType without action
   */
  export type JournalEntryCountOutputTypeCountLinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JournalLineWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    batches: number
    valuationLogs: number
    auditLogs: number
    journalEntries: number
    reclassRequests: number
    settings: number
    xbrlTags: number
    importJobs: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    batches?: boolean | UserCountOutputTypeCountBatchesArgs
    valuationLogs?: boolean | UserCountOutputTypeCountValuationLogsArgs
    auditLogs?: boolean | UserCountOutputTypeCountAuditLogsArgs
    journalEntries?: boolean | UserCountOutputTypeCountJournalEntriesArgs
    reclassRequests?: boolean | UserCountOutputTypeCountReclassRequestsArgs
    settings?: boolean | UserCountOutputTypeCountSettingsArgs
    xbrlTags?: boolean | UserCountOutputTypeCountXbrlTagsArgs
    importJobs?: boolean | UserCountOutputTypeCountImportJobsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ACCUWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountValuationLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ValuationLogWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogEntryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountJournalEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JournalEntryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReclassRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReclassificationRequestWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSettingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSettingWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountXbrlTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: XbrlTagWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountImportJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImportJobWhereInput
  }


  /**
   * Count Type EntityCountOutputType
   */

  export type EntityCountOutputType = {
    batches: number
    users: number
    loans: number
  }

  export type EntityCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    batches?: boolean | EntityCountOutputTypeCountBatchesArgs
    users?: boolean | EntityCountOutputTypeCountUsersArgs
    loans?: boolean | EntityCountOutputTypeCountLoansArgs
  }

  // Custom InputTypes
  /**
   * EntityCountOutputType without action
   */
  export type EntityCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the EntityCountOutputType
     */
    select?: EntityCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * EntityCountOutputType without action
   */
  export type EntityCountOutputTypeCountBatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ACCUWhereInput
  }

  /**
   * EntityCountOutputType without action
   */
  export type EntityCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * EntityCountOutputType without action
   */
  export type EntityCountOutputTypeCountLoansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoanWhereInput
  }


  /**
   * Count Type CreditorCountOutputType
   */

  export type CreditorCountOutputType = {
    loans: number
  }

  export type CreditorCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    loans?: boolean | CreditorCountOutputTypeCountLoansArgs
  }

  // Custom InputTypes
  /**
   * CreditorCountOutputType without action
   */
  export type CreditorCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CreditorCountOutputType
     */
    select?: CreditorCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CreditorCountOutputType without action
   */
  export type CreditorCountOutputTypeCountLoansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoanWhereInput
  }


  /**
   * Models
   */

  /**
   * Model ACCU
   */

  export type AggregateACCU = {
    _count: ACCUCountAggregateOutputType | null
    _avg: ACCUAvgAggregateOutputType | null
    _sum: ACCUSumAggregateOutputType | null
    _min: ACCUMinAggregateOutputType | null
    _max: ACCUMaxAggregateOutputType | null
  }

  export type ACCUAvgAggregateOutputType = {
    vintage: number | null
    quantity: number | null
    acquisitionCost: number | null
  }

  export type ACCUSumAggregateOutputType = {
    vintage: number | null
    quantity: number | null
    acquisitionCost: number | null
  }

  export type ACCUMinAggregateOutputType = {
    id: string | null
    projectId: string | null
    vintage: number | null
    location: string | null
    issuanceDate: Date | null
    serialRangeStart: string | null
    serialRangeEnd: string | null
    category: string | null
    quantity: number | null
    acquisitionCost: number | null
    classification: $Enums.Classification | null
    acquisitionDate: Date | null
    entityId: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    status: string | null
    loanStatus: boolean | null
  }

  export type ACCUMaxAggregateOutputType = {
    id: string | null
    projectId: string | null
    vintage: number | null
    location: string | null
    issuanceDate: Date | null
    serialRangeStart: string | null
    serialRangeEnd: string | null
    category: string | null
    quantity: number | null
    acquisitionCost: number | null
    classification: $Enums.Classification | null
    acquisitionDate: Date | null
    entityId: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    status: string | null
    loanStatus: boolean | null
  }

  export type ACCUCountAggregateOutputType = {
    id: number
    projectId: number
    vintage: number
    location: number
    issuanceDate: number
    serialRangeStart: number
    serialRangeEnd: number
    category: number
    quantity: number
    acquisitionCost: number
    classification: number
    acquisitionDate: number
    entityId: number
    userId: number
    createdAt: number
    updatedAt: number
    status: number
    loanStatus: number
    loanDetails: number
    _all: number
  }


  export type ACCUAvgAggregateInputType = {
    vintage?: true
    quantity?: true
    acquisitionCost?: true
  }

  export type ACCUSumAggregateInputType = {
    vintage?: true
    quantity?: true
    acquisitionCost?: true
  }

  export type ACCUMinAggregateInputType = {
    id?: true
    projectId?: true
    vintage?: true
    location?: true
    issuanceDate?: true
    serialRangeStart?: true
    serialRangeEnd?: true
    category?: true
    quantity?: true
    acquisitionCost?: true
    classification?: true
    acquisitionDate?: true
    entityId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    status?: true
    loanStatus?: true
  }

  export type ACCUMaxAggregateInputType = {
    id?: true
    projectId?: true
    vintage?: true
    location?: true
    issuanceDate?: true
    serialRangeStart?: true
    serialRangeEnd?: true
    category?: true
    quantity?: true
    acquisitionCost?: true
    classification?: true
    acquisitionDate?: true
    entityId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    status?: true
    loanStatus?: true
  }

  export type ACCUCountAggregateInputType = {
    id?: true
    projectId?: true
    vintage?: true
    location?: true
    issuanceDate?: true
    serialRangeStart?: true
    serialRangeEnd?: true
    category?: true
    quantity?: true
    acquisitionCost?: true
    classification?: true
    acquisitionDate?: true
    entityId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    status?: true
    loanStatus?: true
    loanDetails?: true
    _all?: true
  }

  export type ACCUAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ACCU to aggregate.
     */
    where?: ACCUWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ACCUS to fetch.
     */
    orderBy?: ACCUOrderByWithRelationInput | ACCUOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ACCUWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ACCUS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ACCUS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ACCUS
    **/
    _count?: true | ACCUCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ACCUAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ACCUSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ACCUMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ACCUMaxAggregateInputType
  }

  export type GetACCUAggregateType<T extends ACCUAggregateArgs> = {
        [P in keyof T & keyof AggregateACCU]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateACCU[P]>
      : GetScalarType<T[P], AggregateACCU[P]>
  }




  export type ACCUGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ACCUWhereInput
    orderBy?: ACCUOrderByWithAggregationInput | ACCUOrderByWithAggregationInput[]
    by: ACCUScalarFieldEnum[] | ACCUScalarFieldEnum
    having?: ACCUScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ACCUCountAggregateInputType | true
    _avg?: ACCUAvgAggregateInputType
    _sum?: ACCUSumAggregateInputType
    _min?: ACCUMinAggregateInputType
    _max?: ACCUMaxAggregateInputType
  }

  export type ACCUGroupByOutputType = {
    id: string
    projectId: string
    vintage: number
    location: string
    issuanceDate: Date
    serialRangeStart: string
    serialRangeEnd: string
    category: string
    quantity: number
    acquisitionCost: number
    classification: $Enums.Classification
    acquisitionDate: Date
    entityId: string
    userId: string
    createdAt: Date
    updatedAt: Date
    status: string
    loanStatus: boolean
    loanDetails: JsonValue | null
    _count: ACCUCountAggregateOutputType | null
    _avg: ACCUAvgAggregateOutputType | null
    _sum: ACCUSumAggregateOutputType | null
    _min: ACCUMinAggregateOutputType | null
    _max: ACCUMaxAggregateOutputType | null
  }

  type GetACCUGroupByPayload<T extends ACCUGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ACCUGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ACCUGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ACCUGroupByOutputType[P]>
            : GetScalarType<T[P], ACCUGroupByOutputType[P]>
        }
      >
    >


  export type ACCUSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectId?: boolean
    vintage?: boolean
    location?: boolean
    issuanceDate?: boolean
    serialRangeStart?: boolean
    serialRangeEnd?: boolean
    category?: boolean
    quantity?: boolean
    acquisitionCost?: boolean
    classification?: boolean
    acquisitionDate?: boolean
    entityId?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    status?: boolean
    loanStatus?: boolean
    loanDetails?: boolean
    valuationLogs?: boolean | ACCU$valuationLogsArgs<ExtArgs>
    reclassificationRequests?: boolean | ACCU$reclassificationRequestsArgs<ExtArgs>
    loans?: boolean | ACCU$loansArgs<ExtArgs>
    auditLogEntries?: boolean | ACCU$auditLogEntriesArgs<ExtArgs>
    createdBy?: boolean | ACCU$createdByArgs<ExtArgs>
    entity?: boolean | EntityDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    _count?: boolean | ACCUCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aCCU"]>

  export type ACCUSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectId?: boolean
    vintage?: boolean
    location?: boolean
    issuanceDate?: boolean
    serialRangeStart?: boolean
    serialRangeEnd?: boolean
    category?: boolean
    quantity?: boolean
    acquisitionCost?: boolean
    classification?: boolean
    acquisitionDate?: boolean
    entityId?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    status?: boolean
    loanStatus?: boolean
    loanDetails?: boolean
    createdBy?: boolean | ACCU$createdByArgs<ExtArgs>
    entity?: boolean | EntityDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aCCU"]>

  export type ACCUSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectId?: boolean
    vintage?: boolean
    location?: boolean
    issuanceDate?: boolean
    serialRangeStart?: boolean
    serialRangeEnd?: boolean
    category?: boolean
    quantity?: boolean
    acquisitionCost?: boolean
    classification?: boolean
    acquisitionDate?: boolean
    entityId?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    status?: boolean
    loanStatus?: boolean
    loanDetails?: boolean
    createdBy?: boolean | ACCU$createdByArgs<ExtArgs>
    entity?: boolean | EntityDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aCCU"]>

  export type ACCUSelectScalar = {
    id?: boolean
    projectId?: boolean
    vintage?: boolean
    location?: boolean
    issuanceDate?: boolean
    serialRangeStart?: boolean
    serialRangeEnd?: boolean
    category?: boolean
    quantity?: boolean
    acquisitionCost?: boolean
    classification?: boolean
    acquisitionDate?: boolean
    entityId?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    status?: boolean
    loanStatus?: boolean
    loanDetails?: boolean
  }

  export type ACCUOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "projectId" | "vintage" | "location" | "issuanceDate" | "serialRangeStart" | "serialRangeEnd" | "category" | "quantity" | "acquisitionCost" | "classification" | "acquisitionDate" | "entityId" | "userId" | "createdAt" | "updatedAt" | "status" | "loanStatus" | "loanDetails", ExtArgs["result"]["aCCU"]>
  export type ACCUInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    valuationLogs?: boolean | ACCU$valuationLogsArgs<ExtArgs>
    reclassificationRequests?: boolean | ACCU$reclassificationRequestsArgs<ExtArgs>
    loans?: boolean | ACCU$loansArgs<ExtArgs>
    auditLogEntries?: boolean | ACCU$auditLogEntriesArgs<ExtArgs>
    createdBy?: boolean | ACCU$createdByArgs<ExtArgs>
    entity?: boolean | EntityDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    _count?: boolean | ACCUCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ACCUIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | ACCU$createdByArgs<ExtArgs>
    entity?: boolean | EntityDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }
  export type ACCUIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | ACCU$createdByArgs<ExtArgs>
    entity?: boolean | EntityDefaultArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }

  export type $ACCUPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ACCU"
    objects: {
      valuationLogs: Prisma.$ValuationLogPayload<ExtArgs>[]
      reclassificationRequests: Prisma.$ReclassificationRequestPayload<ExtArgs>[]
      loans: Prisma.$LoanPayload<ExtArgs>[]
      auditLogEntries: Prisma.$AuditLogEntryPayload<ExtArgs>[]
      createdBy: Prisma.$UserPayload<ExtArgs> | null
      entity: Prisma.$EntityPayload<ExtArgs>
      project: Prisma.$ProjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      projectId: string
      vintage: number
      location: string
      issuanceDate: Date
      serialRangeStart: string
      serialRangeEnd: string
      category: string
      quantity: number
      acquisitionCost: number
      classification: $Enums.Classification
      acquisitionDate: Date
      entityId: string
      userId: string
      createdAt: Date
      updatedAt: Date
      status: string
      loanStatus: boolean
      loanDetails: Prisma.JsonValue | null
    }, ExtArgs["result"]["aCCU"]>
    composites: {}
  }

  type ACCUGetPayload<S extends boolean | null | undefined | ACCUDefaultArgs> = $Result.GetResult<Prisma.$ACCUPayload, S>

  type ACCUCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ACCUFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ACCUCountAggregateInputType | true
    }

  export interface ACCUDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ACCU'], meta: { name: 'ACCU' } }
    /**
     * Find zero or one ACCU that matches the filter.
     * @param {ACCUFindUniqueArgs} args - Arguments to find a ACCU
     * @example
     * // Get one ACCU
     * const aCCU = await prisma.aCCU.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ACCUFindUniqueArgs>(args: SelectSubset<T, ACCUFindUniqueArgs<ExtArgs>>): Prisma__ACCUClient<$Result.GetResult<Prisma.$ACCUPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ACCU that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ACCUFindUniqueOrThrowArgs} args - Arguments to find a ACCU
     * @example
     * // Get one ACCU
     * const aCCU = await prisma.aCCU.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ACCUFindUniqueOrThrowArgs>(args: SelectSubset<T, ACCUFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ACCUClient<$Result.GetResult<Prisma.$ACCUPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ACCU that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ACCUFindFirstArgs} args - Arguments to find a ACCU
     * @example
     * // Get one ACCU
     * const aCCU = await prisma.aCCU.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ACCUFindFirstArgs>(args?: SelectSubset<T, ACCUFindFirstArgs<ExtArgs>>): Prisma__ACCUClient<$Result.GetResult<Prisma.$ACCUPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ACCU that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ACCUFindFirstOrThrowArgs} args - Arguments to find a ACCU
     * @example
     * // Get one ACCU
     * const aCCU = await prisma.aCCU.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ACCUFindFirstOrThrowArgs>(args?: SelectSubset<T, ACCUFindFirstOrThrowArgs<ExtArgs>>): Prisma__ACCUClient<$Result.GetResult<Prisma.$ACCUPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ACCUS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ACCUFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ACCUS
     * const aCCUS = await prisma.aCCU.findMany()
     * 
     * // Get first 10 ACCUS
     * const aCCUS = await prisma.aCCU.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const aCCUWithIdOnly = await prisma.aCCU.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ACCUFindManyArgs>(args?: SelectSubset<T, ACCUFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ACCUPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ACCU.
     * @param {ACCUCreateArgs} args - Arguments to create a ACCU.
     * @example
     * // Create one ACCU
     * const ACCU = await prisma.aCCU.create({
     *   data: {
     *     // ... data to create a ACCU
     *   }
     * })
     * 
     */
    create<T extends ACCUCreateArgs>(args: SelectSubset<T, ACCUCreateArgs<ExtArgs>>): Prisma__ACCUClient<$Result.GetResult<Prisma.$ACCUPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ACCUS.
     * @param {ACCUCreateManyArgs} args - Arguments to create many ACCUS.
     * @example
     * // Create many ACCUS
     * const aCCU = await prisma.aCCU.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ACCUCreateManyArgs>(args?: SelectSubset<T, ACCUCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ACCUS and returns the data saved in the database.
     * @param {ACCUCreateManyAndReturnArgs} args - Arguments to create many ACCUS.
     * @example
     * // Create many ACCUS
     * const aCCU = await prisma.aCCU.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ACCUS and only return the `id`
     * const aCCUWithIdOnly = await prisma.aCCU.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ACCUCreateManyAndReturnArgs>(args?: SelectSubset<T, ACCUCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ACCUPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ACCU.
     * @param {ACCUDeleteArgs} args - Arguments to delete one ACCU.
     * @example
     * // Delete one ACCU
     * const ACCU = await prisma.aCCU.delete({
     *   where: {
     *     // ... filter to delete one ACCU
     *   }
     * })
     * 
     */
    delete<T extends ACCUDeleteArgs>(args: SelectSubset<T, ACCUDeleteArgs<ExtArgs>>): Prisma__ACCUClient<$Result.GetResult<Prisma.$ACCUPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ACCU.
     * @param {ACCUUpdateArgs} args - Arguments to update one ACCU.
     * @example
     * // Update one ACCU
     * const aCCU = await prisma.aCCU.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ACCUUpdateArgs>(args: SelectSubset<T, ACCUUpdateArgs<ExtArgs>>): Prisma__ACCUClient<$Result.GetResult<Prisma.$ACCUPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ACCUS.
     * @param {ACCUDeleteManyArgs} args - Arguments to filter ACCUS to delete.
     * @example
     * // Delete a few ACCUS
     * const { count } = await prisma.aCCU.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ACCUDeleteManyArgs>(args?: SelectSubset<T, ACCUDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ACCUS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ACCUUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ACCUS
     * const aCCU = await prisma.aCCU.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ACCUUpdateManyArgs>(args: SelectSubset<T, ACCUUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ACCUS and returns the data updated in the database.
     * @param {ACCUUpdateManyAndReturnArgs} args - Arguments to update many ACCUS.
     * @example
     * // Update many ACCUS
     * const aCCU = await prisma.aCCU.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ACCUS and only return the `id`
     * const aCCUWithIdOnly = await prisma.aCCU.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ACCUUpdateManyAndReturnArgs>(args: SelectSubset<T, ACCUUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ACCUPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ACCU.
     * @param {ACCUUpsertArgs} args - Arguments to update or create a ACCU.
     * @example
     * // Update or create a ACCU
     * const aCCU = await prisma.aCCU.upsert({
     *   create: {
     *     // ... data to create a ACCU
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ACCU we want to update
     *   }
     * })
     */
    upsert<T extends ACCUUpsertArgs>(args: SelectSubset<T, ACCUUpsertArgs<ExtArgs>>): Prisma__ACCUClient<$Result.GetResult<Prisma.$ACCUPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ACCUS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ACCUCountArgs} args - Arguments to filter ACCUS to count.
     * @example
     * // Count the number of ACCUS
     * const count = await prisma.aCCU.count({
     *   where: {
     *     // ... the filter for the ACCUS we want to count
     *   }
     * })
    **/
    count<T extends ACCUCountArgs>(
      args?: Subset<T, ACCUCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ACCUCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ACCU.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ACCUAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ACCUAggregateArgs>(args: Subset<T, ACCUAggregateArgs>): Prisma.PrismaPromise<GetACCUAggregateType<T>>

    /**
     * Group by ACCU.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ACCUGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ACCUGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ACCUGroupByArgs['orderBy'] }
        : { orderBy?: ACCUGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ACCUGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetACCUGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ACCU model
   */
  readonly fields: ACCUFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ACCU.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ACCUClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    valuationLogs<T extends ACCU$valuationLogsArgs<ExtArgs> = {}>(args?: Subset<T, ACCU$valuationLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ValuationLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reclassificationRequests<T extends ACCU$reclassificationRequestsArgs<ExtArgs> = {}>(args?: Subset<T, ACCU$reclassificationRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReclassificationRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    loans<T extends ACCU$loansArgs<ExtArgs> = {}>(args?: Subset<T, ACCU$loansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    auditLogEntries<T extends ACCU$auditLogEntriesArgs<ExtArgs> = {}>(args?: Subset<T, ACCU$auditLogEntriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogEntryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdBy<T extends ACCU$createdByArgs<ExtArgs> = {}>(args?: Subset<T, ACCU$createdByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    entity<T extends EntityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EntityDefaultArgs<ExtArgs>>): Prisma__EntityClient<$Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ACCU model
   */
  interface ACCUFieldRefs {
    readonly id: FieldRef<"ACCU", 'String'>
    readonly projectId: FieldRef<"ACCU", 'String'>
    readonly vintage: FieldRef<"ACCU", 'Int'>
    readonly location: FieldRef<"ACCU", 'String'>
    readonly issuanceDate: FieldRef<"ACCU", 'DateTime'>
    readonly serialRangeStart: FieldRef<"ACCU", 'String'>
    readonly serialRangeEnd: FieldRef<"ACCU", 'String'>
    readonly category: FieldRef<"ACCU", 'String'>
    readonly quantity: FieldRef<"ACCU", 'Int'>
    readonly acquisitionCost: FieldRef<"ACCU", 'Float'>
    readonly classification: FieldRef<"ACCU", 'Classification'>
    readonly acquisitionDate: FieldRef<"ACCU", 'DateTime'>
    readonly entityId: FieldRef<"ACCU", 'String'>
    readonly userId: FieldRef<"ACCU", 'String'>
    readonly createdAt: FieldRef<"ACCU", 'DateTime'>
    readonly updatedAt: FieldRef<"ACCU", 'DateTime'>
    readonly status: FieldRef<"ACCU", 'String'>
    readonly loanStatus: FieldRef<"ACCU", 'Boolean'>
    readonly loanDetails: FieldRef<"ACCU", 'Json'>
  }
    

  // Custom InputTypes
  /**
   * ACCU findUnique
   */
  export type ACCUFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ACCU
     */
    select?: ACCUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ACCU
     */
    omit?: ACCUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ACCUInclude<ExtArgs> | null
    /**
     * Filter, which ACCU to fetch.
     */
    where: ACCUWhereUniqueInput
  }

  /**
   * ACCU findUniqueOrThrow
   */
  export type ACCUFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ACCU
     */
    select?: ACCUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ACCU
     */
    omit?: ACCUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ACCUInclude<ExtArgs> | null
    /**
     * Filter, which ACCU to fetch.
     */
    where: ACCUWhereUniqueInput
  }

  /**
   * ACCU findFirst
   */
  export type ACCUFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ACCU
     */
    select?: ACCUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ACCU
     */
    omit?: ACCUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ACCUInclude<ExtArgs> | null
    /**
     * Filter, which ACCU to fetch.
     */
    where?: ACCUWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ACCUS to fetch.
     */
    orderBy?: ACCUOrderByWithRelationInput | ACCUOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ACCUS.
     */
    cursor?: ACCUWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ACCUS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ACCUS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ACCUS.
     */
    distinct?: ACCUScalarFieldEnum | ACCUScalarFieldEnum[]
  }

  /**
   * ACCU findFirstOrThrow
   */
  export type ACCUFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ACCU
     */
    select?: ACCUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ACCU
     */
    omit?: ACCUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ACCUInclude<ExtArgs> | null
    /**
     * Filter, which ACCU to fetch.
     */
    where?: ACCUWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ACCUS to fetch.
     */
    orderBy?: ACCUOrderByWithRelationInput | ACCUOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ACCUS.
     */
    cursor?: ACCUWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ACCUS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ACCUS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ACCUS.
     */
    distinct?: ACCUScalarFieldEnum | ACCUScalarFieldEnum[]
  }

  /**
   * ACCU findMany
   */
  export type ACCUFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ACCU
     */
    select?: ACCUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ACCU
     */
    omit?: ACCUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ACCUInclude<ExtArgs> | null
    /**
     * Filter, which ACCUS to fetch.
     */
    where?: ACCUWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ACCUS to fetch.
     */
    orderBy?: ACCUOrderByWithRelationInput | ACCUOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ACCUS.
     */
    cursor?: ACCUWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ACCUS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ACCUS.
     */
    skip?: number
    distinct?: ACCUScalarFieldEnum | ACCUScalarFieldEnum[]
  }

  /**
   * ACCU create
   */
  export type ACCUCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ACCU
     */
    select?: ACCUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ACCU
     */
    omit?: ACCUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ACCUInclude<ExtArgs> | null
    /**
     * The data needed to create a ACCU.
     */
    data: XOR<ACCUCreateInput, ACCUUncheckedCreateInput>
  }

  /**
   * ACCU createMany
   */
  export type ACCUCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ACCUS.
     */
    data: ACCUCreateManyInput | ACCUCreateManyInput[]
  }

  /**
   * ACCU createManyAndReturn
   */
  export type ACCUCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ACCU
     */
    select?: ACCUSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ACCU
     */
    omit?: ACCUOmit<ExtArgs> | null
    /**
     * The data used to create many ACCUS.
     */
    data: ACCUCreateManyInput | ACCUCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ACCUIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ACCU update
   */
  export type ACCUUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ACCU
     */
    select?: ACCUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ACCU
     */
    omit?: ACCUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ACCUInclude<ExtArgs> | null
    /**
     * The data needed to update a ACCU.
     */
    data: XOR<ACCUUpdateInput, ACCUUncheckedUpdateInput>
    /**
     * Choose, which ACCU to update.
     */
    where: ACCUWhereUniqueInput
  }

  /**
   * ACCU updateMany
   */
  export type ACCUUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ACCUS.
     */
    data: XOR<ACCUUpdateManyMutationInput, ACCUUncheckedUpdateManyInput>
    /**
     * Filter which ACCUS to update
     */
    where?: ACCUWhereInput
    /**
     * Limit how many ACCUS to update.
     */
    limit?: number
  }

  /**
   * ACCU updateManyAndReturn
   */
  export type ACCUUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ACCU
     */
    select?: ACCUSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ACCU
     */
    omit?: ACCUOmit<ExtArgs> | null
    /**
     * The data used to update ACCUS.
     */
    data: XOR<ACCUUpdateManyMutationInput, ACCUUncheckedUpdateManyInput>
    /**
     * Filter which ACCUS to update
     */
    where?: ACCUWhereInput
    /**
     * Limit how many ACCUS to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ACCUIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ACCU upsert
   */
  export type ACCUUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ACCU
     */
    select?: ACCUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ACCU
     */
    omit?: ACCUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ACCUInclude<ExtArgs> | null
    /**
     * The filter to search for the ACCU to update in case it exists.
     */
    where: ACCUWhereUniqueInput
    /**
     * In case the ACCU found by the `where` argument doesn't exist, create a new ACCU with this data.
     */
    create: XOR<ACCUCreateInput, ACCUUncheckedCreateInput>
    /**
     * In case the ACCU was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ACCUUpdateInput, ACCUUncheckedUpdateInput>
  }

  /**
   * ACCU delete
   */
  export type ACCUDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ACCU
     */
    select?: ACCUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ACCU
     */
    omit?: ACCUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ACCUInclude<ExtArgs> | null
    /**
     * Filter which ACCU to delete.
     */
    where: ACCUWhereUniqueInput
  }

  /**
   * ACCU deleteMany
   */
  export type ACCUDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ACCUS to delete
     */
    where?: ACCUWhereInput
    /**
     * Limit how many ACCUS to delete.
     */
    limit?: number
  }

  /**
   * ACCU.valuationLogs
   */
  export type ACCU$valuationLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValuationLog
     */
    select?: ValuationLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ValuationLog
     */
    omit?: ValuationLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValuationLogInclude<ExtArgs> | null
    where?: ValuationLogWhereInput
    orderBy?: ValuationLogOrderByWithRelationInput | ValuationLogOrderByWithRelationInput[]
    cursor?: ValuationLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ValuationLogScalarFieldEnum | ValuationLogScalarFieldEnum[]
  }

  /**
   * ACCU.reclassificationRequests
   */
  export type ACCU$reclassificationRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReclassificationRequest
     */
    select?: ReclassificationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReclassificationRequest
     */
    omit?: ReclassificationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReclassificationRequestInclude<ExtArgs> | null
    where?: ReclassificationRequestWhereInput
    orderBy?: ReclassificationRequestOrderByWithRelationInput | ReclassificationRequestOrderByWithRelationInput[]
    cursor?: ReclassificationRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReclassificationRequestScalarFieldEnum | ReclassificationRequestScalarFieldEnum[]
  }

  /**
   * ACCU.loans
   */
  export type ACCU$loansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Loan
     */
    omit?: LoanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanInclude<ExtArgs> | null
    where?: LoanWhereInput
    orderBy?: LoanOrderByWithRelationInput | LoanOrderByWithRelationInput[]
    cursor?: LoanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LoanScalarFieldEnum | LoanScalarFieldEnum[]
  }

  /**
   * ACCU.auditLogEntries
   */
  export type ACCU$auditLogEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLogEntry
     */
    select?: AuditLogEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLogEntry
     */
    omit?: AuditLogEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogEntryInclude<ExtArgs> | null
    where?: AuditLogEntryWhereInput
    orderBy?: AuditLogEntryOrderByWithRelationInput | AuditLogEntryOrderByWithRelationInput[]
    cursor?: AuditLogEntryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogEntryScalarFieldEnum | AuditLogEntryScalarFieldEnum[]
  }

  /**
   * ACCU.createdBy
   */
  export type ACCU$createdByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * ACCU without action
   */
  export type ACCUDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ACCU
     */
    select?: ACCUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ACCU
     */
    omit?: ACCUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ACCUInclude<ExtArgs> | null
  }


  /**
   * Model Project
   */

  export type AggregateProject = {
    _count: ProjectCountAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  export type ProjectMinAggregateOutputType = {
    id: string | null
    name: string | null
    methodType: string | null
    method: string | null
  }

  export type ProjectMaxAggregateOutputType = {
    id: string | null
    name: string | null
    methodType: string | null
    method: string | null
  }

  export type ProjectCountAggregateOutputType = {
    id: number
    name: number
    methodType: number
    method: number
    _all: number
  }


  export type ProjectMinAggregateInputType = {
    id?: true
    name?: true
    methodType?: true
    method?: true
  }

  export type ProjectMaxAggregateInputType = {
    id?: true
    name?: true
    methodType?: true
    method?: true
  }

  export type ProjectCountAggregateInputType = {
    id?: true
    name?: true
    methodType?: true
    method?: true
    _all?: true
  }

  export type ProjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Project to aggregate.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projects
    **/
    _count?: true | ProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectMaxAggregateInputType
  }

  export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProject[P]>
      : GetScalarType<T[P], AggregateProject[P]>
  }




  export type ProjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithAggregationInput | ProjectOrderByWithAggregationInput[]
    by: ProjectScalarFieldEnum[] | ProjectScalarFieldEnum
    having?: ProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectCountAggregateInputType | true
    _min?: ProjectMinAggregateInputType
    _max?: ProjectMaxAggregateInputType
  }

  export type ProjectGroupByOutputType = {
    id: string
    name: string
    methodType: string
    method: string
    _count: ProjectCountAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  type GetProjectGroupByPayload<T extends ProjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectGroupByOutputType[P]>
        }
      >
    >


  export type ProjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    methodType?: boolean
    method?: boolean
    accus?: boolean | Project$accusArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    methodType?: boolean
    method?: boolean
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    methodType?: boolean
    method?: boolean
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectScalar = {
    id?: boolean
    name?: boolean
    methodType?: boolean
    method?: boolean
  }

  export type ProjectOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "methodType" | "method", ExtArgs["result"]["project"]>
  export type ProjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accus?: boolean | Project$accusArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProjectIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ProjectIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ProjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Project"
    objects: {
      accus: Prisma.$ACCUPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      methodType: string
      method: string
    }, ExtArgs["result"]["project"]>
    composites: {}
  }

  type ProjectGetPayload<S extends boolean | null | undefined | ProjectDefaultArgs> = $Result.GetResult<Prisma.$ProjectPayload, S>

  type ProjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProjectFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProjectCountAggregateInputType | true
    }

  export interface ProjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Project'], meta: { name: 'Project' } }
    /**
     * Find zero or one Project that matches the filter.
     * @param {ProjectFindUniqueArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectFindUniqueArgs>(args: SelectSubset<T, ProjectFindUniqueArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Project that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProjectFindUniqueOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Project that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectFindFirstArgs>(args?: SelectSubset<T, ProjectFindFirstArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Project that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.project.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.project.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectWithIdOnly = await prisma.project.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProjectFindManyArgs>(args?: SelectSubset<T, ProjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Project.
     * @param {ProjectCreateArgs} args - Arguments to create a Project.
     * @example
     * // Create one Project
     * const Project = await prisma.project.create({
     *   data: {
     *     // ... data to create a Project
     *   }
     * })
     * 
     */
    create<T extends ProjectCreateArgs>(args: SelectSubset<T, ProjectCreateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Projects.
     * @param {ProjectCreateManyArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectCreateManyArgs>(args?: SelectSubset<T, ProjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Projects and returns the data saved in the database.
     * @param {ProjectCreateManyAndReturnArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Projects and only return the `id`
     * const projectWithIdOnly = await prisma.project.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProjectCreateManyAndReturnArgs>(args?: SelectSubset<T, ProjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Project.
     * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
     * @example
     * // Delete one Project
     * const Project = await prisma.project.delete({
     *   where: {
     *     // ... filter to delete one Project
     *   }
     * })
     * 
     */
    delete<T extends ProjectDeleteArgs>(args: SelectSubset<T, ProjectDeleteArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Project.
     * @param {ProjectUpdateArgs} args - Arguments to update one Project.
     * @example
     * // Update one Project
     * const project = await prisma.project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectUpdateArgs>(args: SelectSubset<T, ProjectUpdateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Projects.
     * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectDeleteManyArgs>(args?: SelectSubset<T, ProjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectUpdateManyArgs>(args: SelectSubset<T, ProjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects and returns the data updated in the database.
     * @param {ProjectUpdateManyAndReturnArgs} args - Arguments to update many Projects.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Projects and only return the `id`
     * const projectWithIdOnly = await prisma.project.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProjectUpdateManyAndReturnArgs>(args: SelectSubset<T, ProjectUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Project.
     * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
     * @example
     * // Update or create a Project
     * const project = await prisma.project.upsert({
     *   create: {
     *     // ... data to create a Project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project we want to update
     *   }
     * })
     */
    upsert<T extends ProjectUpsertArgs>(args: SelectSubset<T, ProjectUpsertArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.project.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends ProjectCountArgs>(
      args?: Subset<T, ProjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectAggregateArgs>(args: Subset<T, ProjectAggregateArgs>): Prisma.PrismaPromise<GetProjectAggregateType<T>>

    /**
     * Group by Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectGroupByArgs['orderBy'] }
        : { orderBy?: ProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Project model
   */
  readonly fields: ProjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    accus<T extends Project$accusArgs<ExtArgs> = {}>(args?: Subset<T, Project$accusArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ACCUPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Project model
   */
  interface ProjectFieldRefs {
    readonly id: FieldRef<"Project", 'String'>
    readonly name: FieldRef<"Project", 'String'>
    readonly methodType: FieldRef<"Project", 'String'>
    readonly method: FieldRef<"Project", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Project findUnique
   */
  export type ProjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findUniqueOrThrow
   */
  export type ProjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findFirst
   */
  export type ProjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findFirstOrThrow
   */
  export type ProjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findMany
   */
  export type ProjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project create
   */
  export type ProjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Project.
     */
    data: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
  }

  /**
   * Project createMany
   */
  export type ProjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
  }

  /**
   * Project createManyAndReturn
   */
  export type ProjectCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
  }

  /**
   * Project update
   */
  export type ProjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Project.
     */
    data: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
    /**
     * Choose, which Project to update.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project updateMany
   */
  export type ProjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput
    /**
     * Limit how many Projects to update.
     */
    limit?: number
  }

  /**
   * Project updateManyAndReturn
   */
  export type ProjectUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput
    /**
     * Limit how many Projects to update.
     */
    limit?: number
  }

  /**
   * Project upsert
   */
  export type ProjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Project to update in case it exists.
     */
    where: ProjectWhereUniqueInput
    /**
     * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
     */
    create: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
    /**
     * In case the Project was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
  }

  /**
   * Project delete
   */
  export type ProjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter which Project to delete.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project deleteMany
   */
  export type ProjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Projects to delete
     */
    where?: ProjectWhereInput
    /**
     * Limit how many Projects to delete.
     */
    limit?: number
  }

  /**
   * Project.accus
   */
  export type Project$accusArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ACCU
     */
    select?: ACCUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ACCU
     */
    omit?: ACCUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ACCUInclude<ExtArgs> | null
    where?: ACCUWhereInput
    orderBy?: ACCUOrderByWithRelationInput | ACCUOrderByWithRelationInput[]
    cursor?: ACCUWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ACCUScalarFieldEnum | ACCUScalarFieldEnum[]
  }

  /**
   * Project without action
   */
  export type ProjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Project
     */
    omit?: ProjectOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
  }


  /**
   * Model ValuationLog
   */

  export type AggregateValuationLog = {
    _count: ValuationLogCountAggregateOutputType | null
    _avg: ValuationLogAvgAggregateOutputType | null
    _sum: ValuationLogSumAggregateOutputType | null
    _min: ValuationLogMinAggregateOutputType | null
    _max: ValuationLogMaxAggregateOutputType | null
  }

  export type ValuationLogAvgAggregateOutputType = {
    marketPrice: number | null
    nrv: number | null
    impairment: number | null
  }

  export type ValuationLogSumAggregateOutputType = {
    marketPrice: number | null
    nrv: number | null
    impairment: number | null
  }

  export type ValuationLogMinAggregateOutputType = {
    id: string | null
    batchId: string | null
    date: Date | null
    marketPrice: number | null
    nrv: number | null
    impairment: number | null
    userId: string | null
    createdAt: Date | null
    entityId: string | null
  }

  export type ValuationLogMaxAggregateOutputType = {
    id: string | null
    batchId: string | null
    date: Date | null
    marketPrice: number | null
    nrv: number | null
    impairment: number | null
    userId: string | null
    createdAt: Date | null
    entityId: string | null
  }

  export type ValuationLogCountAggregateOutputType = {
    id: number
    batchId: number
    date: number
    marketPrice: number
    nrv: number
    impairment: number
    userId: number
    createdAt: number
    entityId: number
    _all: number
  }


  export type ValuationLogAvgAggregateInputType = {
    marketPrice?: true
    nrv?: true
    impairment?: true
  }

  export type ValuationLogSumAggregateInputType = {
    marketPrice?: true
    nrv?: true
    impairment?: true
  }

  export type ValuationLogMinAggregateInputType = {
    id?: true
    batchId?: true
    date?: true
    marketPrice?: true
    nrv?: true
    impairment?: true
    userId?: true
    createdAt?: true
    entityId?: true
  }

  export type ValuationLogMaxAggregateInputType = {
    id?: true
    batchId?: true
    date?: true
    marketPrice?: true
    nrv?: true
    impairment?: true
    userId?: true
    createdAt?: true
    entityId?: true
  }

  export type ValuationLogCountAggregateInputType = {
    id?: true
    batchId?: true
    date?: true
    marketPrice?: true
    nrv?: true
    impairment?: true
    userId?: true
    createdAt?: true
    entityId?: true
    _all?: true
  }

  export type ValuationLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ValuationLog to aggregate.
     */
    where?: ValuationLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ValuationLogs to fetch.
     */
    orderBy?: ValuationLogOrderByWithRelationInput | ValuationLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ValuationLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ValuationLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ValuationLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ValuationLogs
    **/
    _count?: true | ValuationLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ValuationLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ValuationLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ValuationLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ValuationLogMaxAggregateInputType
  }

  export type GetValuationLogAggregateType<T extends ValuationLogAggregateArgs> = {
        [P in keyof T & keyof AggregateValuationLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateValuationLog[P]>
      : GetScalarType<T[P], AggregateValuationLog[P]>
  }




  export type ValuationLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ValuationLogWhereInput
    orderBy?: ValuationLogOrderByWithAggregationInput | ValuationLogOrderByWithAggregationInput[]
    by: ValuationLogScalarFieldEnum[] | ValuationLogScalarFieldEnum
    having?: ValuationLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ValuationLogCountAggregateInputType | true
    _avg?: ValuationLogAvgAggregateInputType
    _sum?: ValuationLogSumAggregateInputType
    _min?: ValuationLogMinAggregateInputType
    _max?: ValuationLogMaxAggregateInputType
  }

  export type ValuationLogGroupByOutputType = {
    id: string
    batchId: string
    date: Date
    marketPrice: number
    nrv: number
    impairment: number | null
    userId: string
    createdAt: Date
    entityId: string
    _count: ValuationLogCountAggregateOutputType | null
    _avg: ValuationLogAvgAggregateOutputType | null
    _sum: ValuationLogSumAggregateOutputType | null
    _min: ValuationLogMinAggregateOutputType | null
    _max: ValuationLogMaxAggregateOutputType | null
  }

  type GetValuationLogGroupByPayload<T extends ValuationLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ValuationLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ValuationLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ValuationLogGroupByOutputType[P]>
            : GetScalarType<T[P], ValuationLogGroupByOutputType[P]>
        }
      >
    >


  export type ValuationLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    batchId?: boolean
    date?: boolean
    marketPrice?: boolean
    nrv?: boolean
    impairment?: boolean
    userId?: boolean
    createdAt?: boolean
    entityId?: boolean
    batch?: boolean | ACCUDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["valuationLog"]>

  export type ValuationLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    batchId?: boolean
    date?: boolean
    marketPrice?: boolean
    nrv?: boolean
    impairment?: boolean
    userId?: boolean
    createdAt?: boolean
    entityId?: boolean
    batch?: boolean | ACCUDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["valuationLog"]>

  export type ValuationLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    batchId?: boolean
    date?: boolean
    marketPrice?: boolean
    nrv?: boolean
    impairment?: boolean
    userId?: boolean
    createdAt?: boolean
    entityId?: boolean
    batch?: boolean | ACCUDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["valuationLog"]>

  export type ValuationLogSelectScalar = {
    id?: boolean
    batchId?: boolean
    date?: boolean
    marketPrice?: boolean
    nrv?: boolean
    impairment?: boolean
    userId?: boolean
    createdAt?: boolean
    entityId?: boolean
  }

  export type ValuationLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "batchId" | "date" | "marketPrice" | "nrv" | "impairment" | "userId" | "createdAt" | "entityId", ExtArgs["result"]["valuationLog"]>
  export type ValuationLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    batch?: boolean | ACCUDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ValuationLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    batch?: boolean | ACCUDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ValuationLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    batch?: boolean | ACCUDefaultArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ValuationLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ValuationLog"
    objects: {
      batch: Prisma.$ACCUPayload<ExtArgs>
      createdBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      batchId: string
      date: Date
      marketPrice: number
      nrv: number
      impairment: number | null
      userId: string
      createdAt: Date
      entityId: string
    }, ExtArgs["result"]["valuationLog"]>
    composites: {}
  }

  type ValuationLogGetPayload<S extends boolean | null | undefined | ValuationLogDefaultArgs> = $Result.GetResult<Prisma.$ValuationLogPayload, S>

  type ValuationLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ValuationLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ValuationLogCountAggregateInputType | true
    }

  export interface ValuationLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ValuationLog'], meta: { name: 'ValuationLog' } }
    /**
     * Find zero or one ValuationLog that matches the filter.
     * @param {ValuationLogFindUniqueArgs} args - Arguments to find a ValuationLog
     * @example
     * // Get one ValuationLog
     * const valuationLog = await prisma.valuationLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ValuationLogFindUniqueArgs>(args: SelectSubset<T, ValuationLogFindUniqueArgs<ExtArgs>>): Prisma__ValuationLogClient<$Result.GetResult<Prisma.$ValuationLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ValuationLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ValuationLogFindUniqueOrThrowArgs} args - Arguments to find a ValuationLog
     * @example
     * // Get one ValuationLog
     * const valuationLog = await prisma.valuationLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ValuationLogFindUniqueOrThrowArgs>(args: SelectSubset<T, ValuationLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ValuationLogClient<$Result.GetResult<Prisma.$ValuationLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ValuationLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValuationLogFindFirstArgs} args - Arguments to find a ValuationLog
     * @example
     * // Get one ValuationLog
     * const valuationLog = await prisma.valuationLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ValuationLogFindFirstArgs>(args?: SelectSubset<T, ValuationLogFindFirstArgs<ExtArgs>>): Prisma__ValuationLogClient<$Result.GetResult<Prisma.$ValuationLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ValuationLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValuationLogFindFirstOrThrowArgs} args - Arguments to find a ValuationLog
     * @example
     * // Get one ValuationLog
     * const valuationLog = await prisma.valuationLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ValuationLogFindFirstOrThrowArgs>(args?: SelectSubset<T, ValuationLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__ValuationLogClient<$Result.GetResult<Prisma.$ValuationLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ValuationLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValuationLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ValuationLogs
     * const valuationLogs = await prisma.valuationLog.findMany()
     * 
     * // Get first 10 ValuationLogs
     * const valuationLogs = await prisma.valuationLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const valuationLogWithIdOnly = await prisma.valuationLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ValuationLogFindManyArgs>(args?: SelectSubset<T, ValuationLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ValuationLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ValuationLog.
     * @param {ValuationLogCreateArgs} args - Arguments to create a ValuationLog.
     * @example
     * // Create one ValuationLog
     * const ValuationLog = await prisma.valuationLog.create({
     *   data: {
     *     // ... data to create a ValuationLog
     *   }
     * })
     * 
     */
    create<T extends ValuationLogCreateArgs>(args: SelectSubset<T, ValuationLogCreateArgs<ExtArgs>>): Prisma__ValuationLogClient<$Result.GetResult<Prisma.$ValuationLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ValuationLogs.
     * @param {ValuationLogCreateManyArgs} args - Arguments to create many ValuationLogs.
     * @example
     * // Create many ValuationLogs
     * const valuationLog = await prisma.valuationLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ValuationLogCreateManyArgs>(args?: SelectSubset<T, ValuationLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ValuationLogs and returns the data saved in the database.
     * @param {ValuationLogCreateManyAndReturnArgs} args - Arguments to create many ValuationLogs.
     * @example
     * // Create many ValuationLogs
     * const valuationLog = await prisma.valuationLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ValuationLogs and only return the `id`
     * const valuationLogWithIdOnly = await prisma.valuationLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ValuationLogCreateManyAndReturnArgs>(args?: SelectSubset<T, ValuationLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ValuationLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ValuationLog.
     * @param {ValuationLogDeleteArgs} args - Arguments to delete one ValuationLog.
     * @example
     * // Delete one ValuationLog
     * const ValuationLog = await prisma.valuationLog.delete({
     *   where: {
     *     // ... filter to delete one ValuationLog
     *   }
     * })
     * 
     */
    delete<T extends ValuationLogDeleteArgs>(args: SelectSubset<T, ValuationLogDeleteArgs<ExtArgs>>): Prisma__ValuationLogClient<$Result.GetResult<Prisma.$ValuationLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ValuationLog.
     * @param {ValuationLogUpdateArgs} args - Arguments to update one ValuationLog.
     * @example
     * // Update one ValuationLog
     * const valuationLog = await prisma.valuationLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ValuationLogUpdateArgs>(args: SelectSubset<T, ValuationLogUpdateArgs<ExtArgs>>): Prisma__ValuationLogClient<$Result.GetResult<Prisma.$ValuationLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ValuationLogs.
     * @param {ValuationLogDeleteManyArgs} args - Arguments to filter ValuationLogs to delete.
     * @example
     * // Delete a few ValuationLogs
     * const { count } = await prisma.valuationLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ValuationLogDeleteManyArgs>(args?: SelectSubset<T, ValuationLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ValuationLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValuationLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ValuationLogs
     * const valuationLog = await prisma.valuationLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ValuationLogUpdateManyArgs>(args: SelectSubset<T, ValuationLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ValuationLogs and returns the data updated in the database.
     * @param {ValuationLogUpdateManyAndReturnArgs} args - Arguments to update many ValuationLogs.
     * @example
     * // Update many ValuationLogs
     * const valuationLog = await prisma.valuationLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ValuationLogs and only return the `id`
     * const valuationLogWithIdOnly = await prisma.valuationLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ValuationLogUpdateManyAndReturnArgs>(args: SelectSubset<T, ValuationLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ValuationLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ValuationLog.
     * @param {ValuationLogUpsertArgs} args - Arguments to update or create a ValuationLog.
     * @example
     * // Update or create a ValuationLog
     * const valuationLog = await prisma.valuationLog.upsert({
     *   create: {
     *     // ... data to create a ValuationLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ValuationLog we want to update
     *   }
     * })
     */
    upsert<T extends ValuationLogUpsertArgs>(args: SelectSubset<T, ValuationLogUpsertArgs<ExtArgs>>): Prisma__ValuationLogClient<$Result.GetResult<Prisma.$ValuationLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ValuationLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValuationLogCountArgs} args - Arguments to filter ValuationLogs to count.
     * @example
     * // Count the number of ValuationLogs
     * const count = await prisma.valuationLog.count({
     *   where: {
     *     // ... the filter for the ValuationLogs we want to count
     *   }
     * })
    **/
    count<T extends ValuationLogCountArgs>(
      args?: Subset<T, ValuationLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ValuationLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ValuationLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValuationLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ValuationLogAggregateArgs>(args: Subset<T, ValuationLogAggregateArgs>): Prisma.PrismaPromise<GetValuationLogAggregateType<T>>

    /**
     * Group by ValuationLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValuationLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ValuationLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ValuationLogGroupByArgs['orderBy'] }
        : { orderBy?: ValuationLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ValuationLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetValuationLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ValuationLog model
   */
  readonly fields: ValuationLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ValuationLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ValuationLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    batch<T extends ACCUDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ACCUDefaultArgs<ExtArgs>>): Prisma__ACCUClient<$Result.GetResult<Prisma.$ACCUPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ValuationLog model
   */
  interface ValuationLogFieldRefs {
    readonly id: FieldRef<"ValuationLog", 'String'>
    readonly batchId: FieldRef<"ValuationLog", 'String'>
    readonly date: FieldRef<"ValuationLog", 'DateTime'>
    readonly marketPrice: FieldRef<"ValuationLog", 'Float'>
    readonly nrv: FieldRef<"ValuationLog", 'Float'>
    readonly impairment: FieldRef<"ValuationLog", 'Float'>
    readonly userId: FieldRef<"ValuationLog", 'String'>
    readonly createdAt: FieldRef<"ValuationLog", 'DateTime'>
    readonly entityId: FieldRef<"ValuationLog", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ValuationLog findUnique
   */
  export type ValuationLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValuationLog
     */
    select?: ValuationLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ValuationLog
     */
    omit?: ValuationLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValuationLogInclude<ExtArgs> | null
    /**
     * Filter, which ValuationLog to fetch.
     */
    where: ValuationLogWhereUniqueInput
  }

  /**
   * ValuationLog findUniqueOrThrow
   */
  export type ValuationLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValuationLog
     */
    select?: ValuationLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ValuationLog
     */
    omit?: ValuationLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValuationLogInclude<ExtArgs> | null
    /**
     * Filter, which ValuationLog to fetch.
     */
    where: ValuationLogWhereUniqueInput
  }

  /**
   * ValuationLog findFirst
   */
  export type ValuationLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValuationLog
     */
    select?: ValuationLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ValuationLog
     */
    omit?: ValuationLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValuationLogInclude<ExtArgs> | null
    /**
     * Filter, which ValuationLog to fetch.
     */
    where?: ValuationLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ValuationLogs to fetch.
     */
    orderBy?: ValuationLogOrderByWithRelationInput | ValuationLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ValuationLogs.
     */
    cursor?: ValuationLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ValuationLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ValuationLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ValuationLogs.
     */
    distinct?: ValuationLogScalarFieldEnum | ValuationLogScalarFieldEnum[]
  }

  /**
   * ValuationLog findFirstOrThrow
   */
  export type ValuationLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValuationLog
     */
    select?: ValuationLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ValuationLog
     */
    omit?: ValuationLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValuationLogInclude<ExtArgs> | null
    /**
     * Filter, which ValuationLog to fetch.
     */
    where?: ValuationLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ValuationLogs to fetch.
     */
    orderBy?: ValuationLogOrderByWithRelationInput | ValuationLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ValuationLogs.
     */
    cursor?: ValuationLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ValuationLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ValuationLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ValuationLogs.
     */
    distinct?: ValuationLogScalarFieldEnum | ValuationLogScalarFieldEnum[]
  }

  /**
   * ValuationLog findMany
   */
  export type ValuationLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValuationLog
     */
    select?: ValuationLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ValuationLog
     */
    omit?: ValuationLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValuationLogInclude<ExtArgs> | null
    /**
     * Filter, which ValuationLogs to fetch.
     */
    where?: ValuationLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ValuationLogs to fetch.
     */
    orderBy?: ValuationLogOrderByWithRelationInput | ValuationLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ValuationLogs.
     */
    cursor?: ValuationLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ValuationLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ValuationLogs.
     */
    skip?: number
    distinct?: ValuationLogScalarFieldEnum | ValuationLogScalarFieldEnum[]
  }

  /**
   * ValuationLog create
   */
  export type ValuationLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValuationLog
     */
    select?: ValuationLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ValuationLog
     */
    omit?: ValuationLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValuationLogInclude<ExtArgs> | null
    /**
     * The data needed to create a ValuationLog.
     */
    data: XOR<ValuationLogCreateInput, ValuationLogUncheckedCreateInput>
  }

  /**
   * ValuationLog createMany
   */
  export type ValuationLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ValuationLogs.
     */
    data: ValuationLogCreateManyInput | ValuationLogCreateManyInput[]
  }

  /**
   * ValuationLog createManyAndReturn
   */
  export type ValuationLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValuationLog
     */
    select?: ValuationLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ValuationLog
     */
    omit?: ValuationLogOmit<ExtArgs> | null
    /**
     * The data used to create many ValuationLogs.
     */
    data: ValuationLogCreateManyInput | ValuationLogCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValuationLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ValuationLog update
   */
  export type ValuationLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValuationLog
     */
    select?: ValuationLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ValuationLog
     */
    omit?: ValuationLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValuationLogInclude<ExtArgs> | null
    /**
     * The data needed to update a ValuationLog.
     */
    data: XOR<ValuationLogUpdateInput, ValuationLogUncheckedUpdateInput>
    /**
     * Choose, which ValuationLog to update.
     */
    where: ValuationLogWhereUniqueInput
  }

  /**
   * ValuationLog updateMany
   */
  export type ValuationLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ValuationLogs.
     */
    data: XOR<ValuationLogUpdateManyMutationInput, ValuationLogUncheckedUpdateManyInput>
    /**
     * Filter which ValuationLogs to update
     */
    where?: ValuationLogWhereInput
    /**
     * Limit how many ValuationLogs to update.
     */
    limit?: number
  }

  /**
   * ValuationLog updateManyAndReturn
   */
  export type ValuationLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValuationLog
     */
    select?: ValuationLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ValuationLog
     */
    omit?: ValuationLogOmit<ExtArgs> | null
    /**
     * The data used to update ValuationLogs.
     */
    data: XOR<ValuationLogUpdateManyMutationInput, ValuationLogUncheckedUpdateManyInput>
    /**
     * Filter which ValuationLogs to update
     */
    where?: ValuationLogWhereInput
    /**
     * Limit how many ValuationLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValuationLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ValuationLog upsert
   */
  export type ValuationLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValuationLog
     */
    select?: ValuationLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ValuationLog
     */
    omit?: ValuationLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValuationLogInclude<ExtArgs> | null
    /**
     * The filter to search for the ValuationLog to update in case it exists.
     */
    where: ValuationLogWhereUniqueInput
    /**
     * In case the ValuationLog found by the `where` argument doesn't exist, create a new ValuationLog with this data.
     */
    create: XOR<ValuationLogCreateInput, ValuationLogUncheckedCreateInput>
    /**
     * In case the ValuationLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ValuationLogUpdateInput, ValuationLogUncheckedUpdateInput>
  }

  /**
   * ValuationLog delete
   */
  export type ValuationLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValuationLog
     */
    select?: ValuationLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ValuationLog
     */
    omit?: ValuationLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValuationLogInclude<ExtArgs> | null
    /**
     * Filter which ValuationLog to delete.
     */
    where: ValuationLogWhereUniqueInput
  }

  /**
   * ValuationLog deleteMany
   */
  export type ValuationLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ValuationLogs to delete
     */
    where?: ValuationLogWhereInput
    /**
     * Limit how many ValuationLogs to delete.
     */
    limit?: number
  }

  /**
   * ValuationLog without action
   */
  export type ValuationLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValuationLog
     */
    select?: ValuationLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ValuationLog
     */
    omit?: ValuationLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValuationLogInclude<ExtArgs> | null
  }


  /**
   * Model AuditLogEntry
   */

  export type AggregateAuditLogEntry = {
    _count: AuditLogEntryCountAggregateOutputType | null
    _min: AuditLogEntryMinAggregateOutputType | null
    _max: AuditLogEntryMaxAggregateOutputType | null
  }

  export type AuditLogEntryMinAggregateOutputType = {
    id: string | null
    action: string | null
    tableName: string | null
    recordId: string | null
    userId: string | null
    timestamp: Date | null
    ipAddress: string | null
    entityId: string | null
  }

  export type AuditLogEntryMaxAggregateOutputType = {
    id: string | null
    action: string | null
    tableName: string | null
    recordId: string | null
    userId: string | null
    timestamp: Date | null
    ipAddress: string | null
    entityId: string | null
  }

  export type AuditLogEntryCountAggregateOutputType = {
    id: number
    action: number
    tableName: number
    recordId: number
    oldValues: number
    newValues: number
    userId: number
    timestamp: number
    ipAddress: number
    entityId: number
    _all: number
  }


  export type AuditLogEntryMinAggregateInputType = {
    id?: true
    action?: true
    tableName?: true
    recordId?: true
    userId?: true
    timestamp?: true
    ipAddress?: true
    entityId?: true
  }

  export type AuditLogEntryMaxAggregateInputType = {
    id?: true
    action?: true
    tableName?: true
    recordId?: true
    userId?: true
    timestamp?: true
    ipAddress?: true
    entityId?: true
  }

  export type AuditLogEntryCountAggregateInputType = {
    id?: true
    action?: true
    tableName?: true
    recordId?: true
    oldValues?: true
    newValues?: true
    userId?: true
    timestamp?: true
    ipAddress?: true
    entityId?: true
    _all?: true
  }

  export type AuditLogEntryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogEntry to aggregate.
     */
    where?: AuditLogEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogEntries to fetch.
     */
    orderBy?: AuditLogEntryOrderByWithRelationInput | AuditLogEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogEntries
    **/
    _count?: true | AuditLogEntryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogEntryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogEntryMaxAggregateInputType
  }

  export type GetAuditLogEntryAggregateType<T extends AuditLogEntryAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLogEntry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLogEntry[P]>
      : GetScalarType<T[P], AggregateAuditLogEntry[P]>
  }




  export type AuditLogEntryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogEntryWhereInput
    orderBy?: AuditLogEntryOrderByWithAggregationInput | AuditLogEntryOrderByWithAggregationInput[]
    by: AuditLogEntryScalarFieldEnum[] | AuditLogEntryScalarFieldEnum
    having?: AuditLogEntryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogEntryCountAggregateInputType | true
    _min?: AuditLogEntryMinAggregateInputType
    _max?: AuditLogEntryMaxAggregateInputType
  }

  export type AuditLogEntryGroupByOutputType = {
    id: string
    action: string
    tableName: string
    recordId: string
    oldValues: JsonValue | null
    newValues: JsonValue | null
    userId: string
    timestamp: Date
    ipAddress: string | null
    entityId: string
    _count: AuditLogEntryCountAggregateOutputType | null
    _min: AuditLogEntryMinAggregateOutputType | null
    _max: AuditLogEntryMaxAggregateOutputType | null
  }

  type GetAuditLogEntryGroupByPayload<T extends AuditLogEntryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogEntryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogEntryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogEntryGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogEntryGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogEntrySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    tableName?: boolean
    recordId?: boolean
    oldValues?: boolean
    newValues?: boolean
    userId?: boolean
    timestamp?: boolean
    ipAddress?: boolean
    entityId?: boolean
    user?: boolean | AuditLogEntry$userArgs<ExtArgs>
    batch?: boolean | AuditLogEntry$batchArgs<ExtArgs>
  }, ExtArgs["result"]["auditLogEntry"]>

  export type AuditLogEntrySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    tableName?: boolean
    recordId?: boolean
    oldValues?: boolean
    newValues?: boolean
    userId?: boolean
    timestamp?: boolean
    ipAddress?: boolean
    entityId?: boolean
    user?: boolean | AuditLogEntry$userArgs<ExtArgs>
    batch?: boolean | AuditLogEntry$batchArgs<ExtArgs>
  }, ExtArgs["result"]["auditLogEntry"]>

  export type AuditLogEntrySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    tableName?: boolean
    recordId?: boolean
    oldValues?: boolean
    newValues?: boolean
    userId?: boolean
    timestamp?: boolean
    ipAddress?: boolean
    entityId?: boolean
    user?: boolean | AuditLogEntry$userArgs<ExtArgs>
    batch?: boolean | AuditLogEntry$batchArgs<ExtArgs>
  }, ExtArgs["result"]["auditLogEntry"]>

  export type AuditLogEntrySelectScalar = {
    id?: boolean
    action?: boolean
    tableName?: boolean
    recordId?: boolean
    oldValues?: boolean
    newValues?: boolean
    userId?: boolean
    timestamp?: boolean
    ipAddress?: boolean
    entityId?: boolean
  }

  export type AuditLogEntryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "action" | "tableName" | "recordId" | "oldValues" | "newValues" | "userId" | "timestamp" | "ipAddress" | "entityId", ExtArgs["result"]["auditLogEntry"]>
  export type AuditLogEntryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | AuditLogEntry$userArgs<ExtArgs>
    batch?: boolean | AuditLogEntry$batchArgs<ExtArgs>
  }
  export type AuditLogEntryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | AuditLogEntry$userArgs<ExtArgs>
    batch?: boolean | AuditLogEntry$batchArgs<ExtArgs>
  }
  export type AuditLogEntryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | AuditLogEntry$userArgs<ExtArgs>
    batch?: boolean | AuditLogEntry$batchArgs<ExtArgs>
  }

  export type $AuditLogEntryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLogEntry"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
      batch: Prisma.$ACCUPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      action: string
      tableName: string
      recordId: string
      oldValues: Prisma.JsonValue | null
      newValues: Prisma.JsonValue | null
      userId: string
      timestamp: Date
      ipAddress: string | null
      entityId: string
    }, ExtArgs["result"]["auditLogEntry"]>
    composites: {}
  }

  type AuditLogEntryGetPayload<S extends boolean | null | undefined | AuditLogEntryDefaultArgs> = $Result.GetResult<Prisma.$AuditLogEntryPayload, S>

  type AuditLogEntryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<AuditLogEntryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AuditLogEntryCountAggregateInputType | true
    }

  export interface AuditLogEntryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLogEntry'], meta: { name: 'AuditLogEntry' } }
    /**
     * Find zero or one AuditLogEntry that matches the filter.
     * @param {AuditLogEntryFindUniqueArgs} args - Arguments to find a AuditLogEntry
     * @example
     * // Get one AuditLogEntry
     * const auditLogEntry = await prisma.auditLogEntry.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogEntryFindUniqueArgs>(args: SelectSubset<T, AuditLogEntryFindUniqueArgs<ExtArgs>>): Prisma__AuditLogEntryClient<$Result.GetResult<Prisma.$AuditLogEntryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one AuditLogEntry that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {AuditLogEntryFindUniqueOrThrowArgs} args - Arguments to find a AuditLogEntry
     * @example
     * // Get one AuditLogEntry
     * const auditLogEntry = await prisma.auditLogEntry.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogEntryFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogEntryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogEntryClient<$Result.GetResult<Prisma.$AuditLogEntryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLogEntry that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogEntryFindFirstArgs} args - Arguments to find a AuditLogEntry
     * @example
     * // Get one AuditLogEntry
     * const auditLogEntry = await prisma.auditLogEntry.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogEntryFindFirstArgs>(args?: SelectSubset<T, AuditLogEntryFindFirstArgs<ExtArgs>>): Prisma__AuditLogEntryClient<$Result.GetResult<Prisma.$AuditLogEntryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first AuditLogEntry that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogEntryFindFirstOrThrowArgs} args - Arguments to find a AuditLogEntry
     * @example
     * // Get one AuditLogEntry
     * const auditLogEntry = await prisma.auditLogEntry.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogEntryFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogEntryFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogEntryClient<$Result.GetResult<Prisma.$AuditLogEntryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more AuditLogEntries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogEntryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogEntries
     * const auditLogEntries = await prisma.auditLogEntry.findMany()
     * 
     * // Get first 10 AuditLogEntries
     * const auditLogEntries = await prisma.auditLogEntry.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogEntryWithIdOnly = await prisma.auditLogEntry.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogEntryFindManyArgs>(args?: SelectSubset<T, AuditLogEntryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogEntryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a AuditLogEntry.
     * @param {AuditLogEntryCreateArgs} args - Arguments to create a AuditLogEntry.
     * @example
     * // Create one AuditLogEntry
     * const AuditLogEntry = await prisma.auditLogEntry.create({
     *   data: {
     *     // ... data to create a AuditLogEntry
     *   }
     * })
     * 
     */
    create<T extends AuditLogEntryCreateArgs>(args: SelectSubset<T, AuditLogEntryCreateArgs<ExtArgs>>): Prisma__AuditLogEntryClient<$Result.GetResult<Prisma.$AuditLogEntryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many AuditLogEntries.
     * @param {AuditLogEntryCreateManyArgs} args - Arguments to create many AuditLogEntries.
     * @example
     * // Create many AuditLogEntries
     * const auditLogEntry = await prisma.auditLogEntry.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogEntryCreateManyArgs>(args?: SelectSubset<T, AuditLogEntryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditLogEntries and returns the data saved in the database.
     * @param {AuditLogEntryCreateManyAndReturnArgs} args - Arguments to create many AuditLogEntries.
     * @example
     * // Create many AuditLogEntries
     * const auditLogEntry = await prisma.auditLogEntry.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditLogEntries and only return the `id`
     * const auditLogEntryWithIdOnly = await prisma.auditLogEntry.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditLogEntryCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditLogEntryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogEntryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a AuditLogEntry.
     * @param {AuditLogEntryDeleteArgs} args - Arguments to delete one AuditLogEntry.
     * @example
     * // Delete one AuditLogEntry
     * const AuditLogEntry = await prisma.auditLogEntry.delete({
     *   where: {
     *     // ... filter to delete one AuditLogEntry
     *   }
     * })
     * 
     */
    delete<T extends AuditLogEntryDeleteArgs>(args: SelectSubset<T, AuditLogEntryDeleteArgs<ExtArgs>>): Prisma__AuditLogEntryClient<$Result.GetResult<Prisma.$AuditLogEntryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one AuditLogEntry.
     * @param {AuditLogEntryUpdateArgs} args - Arguments to update one AuditLogEntry.
     * @example
     * // Update one AuditLogEntry
     * const auditLogEntry = await prisma.auditLogEntry.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogEntryUpdateArgs>(args: SelectSubset<T, AuditLogEntryUpdateArgs<ExtArgs>>): Prisma__AuditLogEntryClient<$Result.GetResult<Prisma.$AuditLogEntryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more AuditLogEntries.
     * @param {AuditLogEntryDeleteManyArgs} args - Arguments to filter AuditLogEntries to delete.
     * @example
     * // Delete a few AuditLogEntries
     * const { count } = await prisma.auditLogEntry.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogEntryDeleteManyArgs>(args?: SelectSubset<T, AuditLogEntryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogEntryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogEntries
     * const auditLogEntry = await prisma.auditLogEntry.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogEntryUpdateManyArgs>(args: SelectSubset<T, AuditLogEntryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogEntries and returns the data updated in the database.
     * @param {AuditLogEntryUpdateManyAndReturnArgs} args - Arguments to update many AuditLogEntries.
     * @example
     * // Update many AuditLogEntries
     * const auditLogEntry = await prisma.auditLogEntry.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more AuditLogEntries and only return the `id`
     * const auditLogEntryWithIdOnly = await prisma.auditLogEntry.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends AuditLogEntryUpdateManyAndReturnArgs>(args: SelectSubset<T, AuditLogEntryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogEntryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one AuditLogEntry.
     * @param {AuditLogEntryUpsertArgs} args - Arguments to update or create a AuditLogEntry.
     * @example
     * // Update or create a AuditLogEntry
     * const auditLogEntry = await prisma.auditLogEntry.upsert({
     *   create: {
     *     // ... data to create a AuditLogEntry
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLogEntry we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogEntryUpsertArgs>(args: SelectSubset<T, AuditLogEntryUpsertArgs<ExtArgs>>): Prisma__AuditLogEntryClient<$Result.GetResult<Prisma.$AuditLogEntryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of AuditLogEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogEntryCountArgs} args - Arguments to filter AuditLogEntries to count.
     * @example
     * // Count the number of AuditLogEntries
     * const count = await prisma.auditLogEntry.count({
     *   where: {
     *     // ... the filter for the AuditLogEntries we want to count
     *   }
     * })
    **/
    count<T extends AuditLogEntryCountArgs>(
      args?: Subset<T, AuditLogEntryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogEntryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLogEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogEntryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogEntryAggregateArgs>(args: Subset<T, AuditLogEntryAggregateArgs>): Prisma.PrismaPromise<GetAuditLogEntryAggregateType<T>>

    /**
     * Group by AuditLogEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogEntryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogEntryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogEntryGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogEntryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogEntryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogEntryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLogEntry model
   */
  readonly fields: AuditLogEntryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLogEntry.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogEntryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends AuditLogEntry$userArgs<ExtArgs> = {}>(args?: Subset<T, AuditLogEntry$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    batch<T extends AuditLogEntry$batchArgs<ExtArgs> = {}>(args?: Subset<T, AuditLogEntry$batchArgs<ExtArgs>>): Prisma__ACCUClient<$Result.GetResult<Prisma.$ACCUPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLogEntry model
   */
  interface AuditLogEntryFieldRefs {
    readonly id: FieldRef<"AuditLogEntry", 'String'>
    readonly action: FieldRef<"AuditLogEntry", 'String'>
    readonly tableName: FieldRef<"AuditLogEntry", 'String'>
    readonly recordId: FieldRef<"AuditLogEntry", 'String'>
    readonly oldValues: FieldRef<"AuditLogEntry", 'Json'>
    readonly newValues: FieldRef<"AuditLogEntry", 'Json'>
    readonly userId: FieldRef<"AuditLogEntry", 'String'>
    readonly timestamp: FieldRef<"AuditLogEntry", 'DateTime'>
    readonly ipAddress: FieldRef<"AuditLogEntry", 'String'>
    readonly entityId: FieldRef<"AuditLogEntry", 'String'>
  }
    

  // Custom InputTypes
  /**
   * AuditLogEntry findUnique
   */
  export type AuditLogEntryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLogEntry
     */
    select?: AuditLogEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLogEntry
     */
    omit?: AuditLogEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogEntryInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogEntry to fetch.
     */
    where: AuditLogEntryWhereUniqueInput
  }

  /**
   * AuditLogEntry findUniqueOrThrow
   */
  export type AuditLogEntryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLogEntry
     */
    select?: AuditLogEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLogEntry
     */
    omit?: AuditLogEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogEntryInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogEntry to fetch.
     */
    where: AuditLogEntryWhereUniqueInput
  }

  /**
   * AuditLogEntry findFirst
   */
  export type AuditLogEntryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLogEntry
     */
    select?: AuditLogEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLogEntry
     */
    omit?: AuditLogEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogEntryInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogEntry to fetch.
     */
    where?: AuditLogEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogEntries to fetch.
     */
    orderBy?: AuditLogEntryOrderByWithRelationInput | AuditLogEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogEntries.
     */
    cursor?: AuditLogEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogEntries.
     */
    distinct?: AuditLogEntryScalarFieldEnum | AuditLogEntryScalarFieldEnum[]
  }

  /**
   * AuditLogEntry findFirstOrThrow
   */
  export type AuditLogEntryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLogEntry
     */
    select?: AuditLogEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLogEntry
     */
    omit?: AuditLogEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogEntryInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogEntry to fetch.
     */
    where?: AuditLogEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogEntries to fetch.
     */
    orderBy?: AuditLogEntryOrderByWithRelationInput | AuditLogEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogEntries.
     */
    cursor?: AuditLogEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogEntries.
     */
    distinct?: AuditLogEntryScalarFieldEnum | AuditLogEntryScalarFieldEnum[]
  }

  /**
   * AuditLogEntry findMany
   */
  export type AuditLogEntryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLogEntry
     */
    select?: AuditLogEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLogEntry
     */
    omit?: AuditLogEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogEntryInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogEntries to fetch.
     */
    where?: AuditLogEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogEntries to fetch.
     */
    orderBy?: AuditLogEntryOrderByWithRelationInput | AuditLogEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogEntries.
     */
    cursor?: AuditLogEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogEntries.
     */
    skip?: number
    distinct?: AuditLogEntryScalarFieldEnum | AuditLogEntryScalarFieldEnum[]
  }

  /**
   * AuditLogEntry create
   */
  export type AuditLogEntryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLogEntry
     */
    select?: AuditLogEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLogEntry
     */
    omit?: AuditLogEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogEntryInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditLogEntry.
     */
    data: XOR<AuditLogEntryCreateInput, AuditLogEntryUncheckedCreateInput>
  }

  /**
   * AuditLogEntry createMany
   */
  export type AuditLogEntryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogEntries.
     */
    data: AuditLogEntryCreateManyInput | AuditLogEntryCreateManyInput[]
  }

  /**
   * AuditLogEntry createManyAndReturn
   */
  export type AuditLogEntryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLogEntry
     */
    select?: AuditLogEntrySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLogEntry
     */
    omit?: AuditLogEntryOmit<ExtArgs> | null
    /**
     * The data used to create many AuditLogEntries.
     */
    data: AuditLogEntryCreateManyInput | AuditLogEntryCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogEntryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLogEntry update
   */
  export type AuditLogEntryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLogEntry
     */
    select?: AuditLogEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLogEntry
     */
    omit?: AuditLogEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogEntryInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditLogEntry.
     */
    data: XOR<AuditLogEntryUpdateInput, AuditLogEntryUncheckedUpdateInput>
    /**
     * Choose, which AuditLogEntry to update.
     */
    where: AuditLogEntryWhereUniqueInput
  }

  /**
   * AuditLogEntry updateMany
   */
  export type AuditLogEntryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogEntries.
     */
    data: XOR<AuditLogEntryUpdateManyMutationInput, AuditLogEntryUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogEntries to update
     */
    where?: AuditLogEntryWhereInput
    /**
     * Limit how many AuditLogEntries to update.
     */
    limit?: number
  }

  /**
   * AuditLogEntry updateManyAndReturn
   */
  export type AuditLogEntryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLogEntry
     */
    select?: AuditLogEntrySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLogEntry
     */
    omit?: AuditLogEntryOmit<ExtArgs> | null
    /**
     * The data used to update AuditLogEntries.
     */
    data: XOR<AuditLogEntryUpdateManyMutationInput, AuditLogEntryUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogEntries to update
     */
    where?: AuditLogEntryWhereInput
    /**
     * Limit how many AuditLogEntries to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogEntryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLogEntry upsert
   */
  export type AuditLogEntryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLogEntry
     */
    select?: AuditLogEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLogEntry
     */
    omit?: AuditLogEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogEntryInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditLogEntry to update in case it exists.
     */
    where: AuditLogEntryWhereUniqueInput
    /**
     * In case the AuditLogEntry found by the `where` argument doesn't exist, create a new AuditLogEntry with this data.
     */
    create: XOR<AuditLogEntryCreateInput, AuditLogEntryUncheckedCreateInput>
    /**
     * In case the AuditLogEntry was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogEntryUpdateInput, AuditLogEntryUncheckedUpdateInput>
  }

  /**
   * AuditLogEntry delete
   */
  export type AuditLogEntryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLogEntry
     */
    select?: AuditLogEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLogEntry
     */
    omit?: AuditLogEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogEntryInclude<ExtArgs> | null
    /**
     * Filter which AuditLogEntry to delete.
     */
    where: AuditLogEntryWhereUniqueInput
  }

  /**
   * AuditLogEntry deleteMany
   */
  export type AuditLogEntryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogEntries to delete
     */
    where?: AuditLogEntryWhereInput
    /**
     * Limit how many AuditLogEntries to delete.
     */
    limit?: number
  }

  /**
   * AuditLogEntry.user
   */
  export type AuditLogEntry$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * AuditLogEntry.batch
   */
  export type AuditLogEntry$batchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ACCU
     */
    select?: ACCUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ACCU
     */
    omit?: ACCUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ACCUInclude<ExtArgs> | null
    where?: ACCUWhereInput
  }

  /**
   * AuditLogEntry without action
   */
  export type AuditLogEntryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLogEntry
     */
    select?: AuditLogEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLogEntry
     */
    omit?: AuditLogEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogEntryInclude<ExtArgs> | null
  }


  /**
   * Model JournalEntry
   */

  export type AggregateJournalEntry = {
    _count: JournalEntryCountAggregateOutputType | null
    _min: JournalEntryMinAggregateOutputType | null
    _max: JournalEntryMaxAggregateOutputType | null
  }

  export type JournalEntryMinAggregateOutputType = {
    id: string | null
    description: string | null
    date: Date | null
    userId: string | null
    createdAt: Date | null
    entityId: string | null
  }

  export type JournalEntryMaxAggregateOutputType = {
    id: string | null
    description: string | null
    date: Date | null
    userId: string | null
    createdAt: Date | null
    entityId: string | null
  }

  export type JournalEntryCountAggregateOutputType = {
    id: number
    description: number
    date: number
    userId: number
    createdAt: number
    entityId: number
    _all: number
  }


  export type JournalEntryMinAggregateInputType = {
    id?: true
    description?: true
    date?: true
    userId?: true
    createdAt?: true
    entityId?: true
  }

  export type JournalEntryMaxAggregateInputType = {
    id?: true
    description?: true
    date?: true
    userId?: true
    createdAt?: true
    entityId?: true
  }

  export type JournalEntryCountAggregateInputType = {
    id?: true
    description?: true
    date?: true
    userId?: true
    createdAt?: true
    entityId?: true
    _all?: true
  }

  export type JournalEntryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JournalEntry to aggregate.
     */
    where?: JournalEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JournalEntries to fetch.
     */
    orderBy?: JournalEntryOrderByWithRelationInput | JournalEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JournalEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JournalEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JournalEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JournalEntries
    **/
    _count?: true | JournalEntryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JournalEntryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JournalEntryMaxAggregateInputType
  }

  export type GetJournalEntryAggregateType<T extends JournalEntryAggregateArgs> = {
        [P in keyof T & keyof AggregateJournalEntry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJournalEntry[P]>
      : GetScalarType<T[P], AggregateJournalEntry[P]>
  }




  export type JournalEntryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JournalEntryWhereInput
    orderBy?: JournalEntryOrderByWithAggregationInput | JournalEntryOrderByWithAggregationInput[]
    by: JournalEntryScalarFieldEnum[] | JournalEntryScalarFieldEnum
    having?: JournalEntryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JournalEntryCountAggregateInputType | true
    _min?: JournalEntryMinAggregateInputType
    _max?: JournalEntryMaxAggregateInputType
  }

  export type JournalEntryGroupByOutputType = {
    id: string
    description: string
    date: Date
    userId: string
    createdAt: Date
    entityId: string
    _count: JournalEntryCountAggregateOutputType | null
    _min: JournalEntryMinAggregateOutputType | null
    _max: JournalEntryMaxAggregateOutputType | null
  }

  type GetJournalEntryGroupByPayload<T extends JournalEntryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JournalEntryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JournalEntryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JournalEntryGroupByOutputType[P]>
            : GetScalarType<T[P], JournalEntryGroupByOutputType[P]>
        }
      >
    >


  export type JournalEntrySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    date?: boolean
    userId?: boolean
    createdAt?: boolean
    entityId?: boolean
    lines?: boolean | JournalEntry$linesArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | JournalEntryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["journalEntry"]>

  export type JournalEntrySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    date?: boolean
    userId?: boolean
    createdAt?: boolean
    entityId?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["journalEntry"]>

  export type JournalEntrySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    date?: boolean
    userId?: boolean
    createdAt?: boolean
    entityId?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["journalEntry"]>

  export type JournalEntrySelectScalar = {
    id?: boolean
    description?: boolean
    date?: boolean
    userId?: boolean
    createdAt?: boolean
    entityId?: boolean
  }

  export type JournalEntryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "description" | "date" | "userId" | "createdAt" | "entityId", ExtArgs["result"]["journalEntry"]>
  export type JournalEntryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    lines?: boolean | JournalEntry$linesArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | JournalEntryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type JournalEntryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type JournalEntryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $JournalEntryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "JournalEntry"
    objects: {
      lines: Prisma.$JournalLinePayload<ExtArgs>[]
      createdBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      description: string
      date: Date
      userId: string
      createdAt: Date
      entityId: string
    }, ExtArgs["result"]["journalEntry"]>
    composites: {}
  }

  type JournalEntryGetPayload<S extends boolean | null | undefined | JournalEntryDefaultArgs> = $Result.GetResult<Prisma.$JournalEntryPayload, S>

  type JournalEntryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<JournalEntryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: JournalEntryCountAggregateInputType | true
    }

  export interface JournalEntryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JournalEntry'], meta: { name: 'JournalEntry' } }
    /**
     * Find zero or one JournalEntry that matches the filter.
     * @param {JournalEntryFindUniqueArgs} args - Arguments to find a JournalEntry
     * @example
     * // Get one JournalEntry
     * const journalEntry = await prisma.journalEntry.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JournalEntryFindUniqueArgs>(args: SelectSubset<T, JournalEntryFindUniqueArgs<ExtArgs>>): Prisma__JournalEntryClient<$Result.GetResult<Prisma.$JournalEntryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one JournalEntry that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {JournalEntryFindUniqueOrThrowArgs} args - Arguments to find a JournalEntry
     * @example
     * // Get one JournalEntry
     * const journalEntry = await prisma.journalEntry.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JournalEntryFindUniqueOrThrowArgs>(args: SelectSubset<T, JournalEntryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JournalEntryClient<$Result.GetResult<Prisma.$JournalEntryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JournalEntry that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JournalEntryFindFirstArgs} args - Arguments to find a JournalEntry
     * @example
     * // Get one JournalEntry
     * const journalEntry = await prisma.journalEntry.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JournalEntryFindFirstArgs>(args?: SelectSubset<T, JournalEntryFindFirstArgs<ExtArgs>>): Prisma__JournalEntryClient<$Result.GetResult<Prisma.$JournalEntryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JournalEntry that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JournalEntryFindFirstOrThrowArgs} args - Arguments to find a JournalEntry
     * @example
     * // Get one JournalEntry
     * const journalEntry = await prisma.journalEntry.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JournalEntryFindFirstOrThrowArgs>(args?: SelectSubset<T, JournalEntryFindFirstOrThrowArgs<ExtArgs>>): Prisma__JournalEntryClient<$Result.GetResult<Prisma.$JournalEntryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more JournalEntries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JournalEntryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JournalEntries
     * const journalEntries = await prisma.journalEntry.findMany()
     * 
     * // Get first 10 JournalEntries
     * const journalEntries = await prisma.journalEntry.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const journalEntryWithIdOnly = await prisma.journalEntry.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JournalEntryFindManyArgs>(args?: SelectSubset<T, JournalEntryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JournalEntryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a JournalEntry.
     * @param {JournalEntryCreateArgs} args - Arguments to create a JournalEntry.
     * @example
     * // Create one JournalEntry
     * const JournalEntry = await prisma.journalEntry.create({
     *   data: {
     *     // ... data to create a JournalEntry
     *   }
     * })
     * 
     */
    create<T extends JournalEntryCreateArgs>(args: SelectSubset<T, JournalEntryCreateArgs<ExtArgs>>): Prisma__JournalEntryClient<$Result.GetResult<Prisma.$JournalEntryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many JournalEntries.
     * @param {JournalEntryCreateManyArgs} args - Arguments to create many JournalEntries.
     * @example
     * // Create many JournalEntries
     * const journalEntry = await prisma.journalEntry.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JournalEntryCreateManyArgs>(args?: SelectSubset<T, JournalEntryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many JournalEntries and returns the data saved in the database.
     * @param {JournalEntryCreateManyAndReturnArgs} args - Arguments to create many JournalEntries.
     * @example
     * // Create many JournalEntries
     * const journalEntry = await prisma.journalEntry.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many JournalEntries and only return the `id`
     * const journalEntryWithIdOnly = await prisma.journalEntry.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JournalEntryCreateManyAndReturnArgs>(args?: SelectSubset<T, JournalEntryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JournalEntryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a JournalEntry.
     * @param {JournalEntryDeleteArgs} args - Arguments to delete one JournalEntry.
     * @example
     * // Delete one JournalEntry
     * const JournalEntry = await prisma.journalEntry.delete({
     *   where: {
     *     // ... filter to delete one JournalEntry
     *   }
     * })
     * 
     */
    delete<T extends JournalEntryDeleteArgs>(args: SelectSubset<T, JournalEntryDeleteArgs<ExtArgs>>): Prisma__JournalEntryClient<$Result.GetResult<Prisma.$JournalEntryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one JournalEntry.
     * @param {JournalEntryUpdateArgs} args - Arguments to update one JournalEntry.
     * @example
     * // Update one JournalEntry
     * const journalEntry = await prisma.journalEntry.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JournalEntryUpdateArgs>(args: SelectSubset<T, JournalEntryUpdateArgs<ExtArgs>>): Prisma__JournalEntryClient<$Result.GetResult<Prisma.$JournalEntryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more JournalEntries.
     * @param {JournalEntryDeleteManyArgs} args - Arguments to filter JournalEntries to delete.
     * @example
     * // Delete a few JournalEntries
     * const { count } = await prisma.journalEntry.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JournalEntryDeleteManyArgs>(args?: SelectSubset<T, JournalEntryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JournalEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JournalEntryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JournalEntries
     * const journalEntry = await prisma.journalEntry.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JournalEntryUpdateManyArgs>(args: SelectSubset<T, JournalEntryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JournalEntries and returns the data updated in the database.
     * @param {JournalEntryUpdateManyAndReturnArgs} args - Arguments to update many JournalEntries.
     * @example
     * // Update many JournalEntries
     * const journalEntry = await prisma.journalEntry.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more JournalEntries and only return the `id`
     * const journalEntryWithIdOnly = await prisma.journalEntry.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends JournalEntryUpdateManyAndReturnArgs>(args: SelectSubset<T, JournalEntryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JournalEntryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one JournalEntry.
     * @param {JournalEntryUpsertArgs} args - Arguments to update or create a JournalEntry.
     * @example
     * // Update or create a JournalEntry
     * const journalEntry = await prisma.journalEntry.upsert({
     *   create: {
     *     // ... data to create a JournalEntry
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JournalEntry we want to update
     *   }
     * })
     */
    upsert<T extends JournalEntryUpsertArgs>(args: SelectSubset<T, JournalEntryUpsertArgs<ExtArgs>>): Prisma__JournalEntryClient<$Result.GetResult<Prisma.$JournalEntryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of JournalEntries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JournalEntryCountArgs} args - Arguments to filter JournalEntries to count.
     * @example
     * // Count the number of JournalEntries
     * const count = await prisma.journalEntry.count({
     *   where: {
     *     // ... the filter for the JournalEntries we want to count
     *   }
     * })
    **/
    count<T extends JournalEntryCountArgs>(
      args?: Subset<T, JournalEntryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JournalEntryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JournalEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JournalEntryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JournalEntryAggregateArgs>(args: Subset<T, JournalEntryAggregateArgs>): Prisma.PrismaPromise<GetJournalEntryAggregateType<T>>

    /**
     * Group by JournalEntry.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JournalEntryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JournalEntryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JournalEntryGroupByArgs['orderBy'] }
        : { orderBy?: JournalEntryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JournalEntryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJournalEntryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JournalEntry model
   */
  readonly fields: JournalEntryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JournalEntry.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JournalEntryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    lines<T extends JournalEntry$linesArgs<ExtArgs> = {}>(args?: Subset<T, JournalEntry$linesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JournalLinePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the JournalEntry model
   */
  interface JournalEntryFieldRefs {
    readonly id: FieldRef<"JournalEntry", 'String'>
    readonly description: FieldRef<"JournalEntry", 'String'>
    readonly date: FieldRef<"JournalEntry", 'DateTime'>
    readonly userId: FieldRef<"JournalEntry", 'String'>
    readonly createdAt: FieldRef<"JournalEntry", 'DateTime'>
    readonly entityId: FieldRef<"JournalEntry", 'String'>
  }
    

  // Custom InputTypes
  /**
   * JournalEntry findUnique
   */
  export type JournalEntryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalEntry
     */
    select?: JournalEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalEntry
     */
    omit?: JournalEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalEntryInclude<ExtArgs> | null
    /**
     * Filter, which JournalEntry to fetch.
     */
    where: JournalEntryWhereUniqueInput
  }

  /**
   * JournalEntry findUniqueOrThrow
   */
  export type JournalEntryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalEntry
     */
    select?: JournalEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalEntry
     */
    omit?: JournalEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalEntryInclude<ExtArgs> | null
    /**
     * Filter, which JournalEntry to fetch.
     */
    where: JournalEntryWhereUniqueInput
  }

  /**
   * JournalEntry findFirst
   */
  export type JournalEntryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalEntry
     */
    select?: JournalEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalEntry
     */
    omit?: JournalEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalEntryInclude<ExtArgs> | null
    /**
     * Filter, which JournalEntry to fetch.
     */
    where?: JournalEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JournalEntries to fetch.
     */
    orderBy?: JournalEntryOrderByWithRelationInput | JournalEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JournalEntries.
     */
    cursor?: JournalEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JournalEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JournalEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JournalEntries.
     */
    distinct?: JournalEntryScalarFieldEnum | JournalEntryScalarFieldEnum[]
  }

  /**
   * JournalEntry findFirstOrThrow
   */
  export type JournalEntryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalEntry
     */
    select?: JournalEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalEntry
     */
    omit?: JournalEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalEntryInclude<ExtArgs> | null
    /**
     * Filter, which JournalEntry to fetch.
     */
    where?: JournalEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JournalEntries to fetch.
     */
    orderBy?: JournalEntryOrderByWithRelationInput | JournalEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JournalEntries.
     */
    cursor?: JournalEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JournalEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JournalEntries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JournalEntries.
     */
    distinct?: JournalEntryScalarFieldEnum | JournalEntryScalarFieldEnum[]
  }

  /**
   * JournalEntry findMany
   */
  export type JournalEntryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalEntry
     */
    select?: JournalEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalEntry
     */
    omit?: JournalEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalEntryInclude<ExtArgs> | null
    /**
     * Filter, which JournalEntries to fetch.
     */
    where?: JournalEntryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JournalEntries to fetch.
     */
    orderBy?: JournalEntryOrderByWithRelationInput | JournalEntryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JournalEntries.
     */
    cursor?: JournalEntryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JournalEntries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JournalEntries.
     */
    skip?: number
    distinct?: JournalEntryScalarFieldEnum | JournalEntryScalarFieldEnum[]
  }

  /**
   * JournalEntry create
   */
  export type JournalEntryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalEntry
     */
    select?: JournalEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalEntry
     */
    omit?: JournalEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalEntryInclude<ExtArgs> | null
    /**
     * The data needed to create a JournalEntry.
     */
    data: XOR<JournalEntryCreateInput, JournalEntryUncheckedCreateInput>
  }

  /**
   * JournalEntry createMany
   */
  export type JournalEntryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JournalEntries.
     */
    data: JournalEntryCreateManyInput | JournalEntryCreateManyInput[]
  }

  /**
   * JournalEntry createManyAndReturn
   */
  export type JournalEntryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalEntry
     */
    select?: JournalEntrySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JournalEntry
     */
    omit?: JournalEntryOmit<ExtArgs> | null
    /**
     * The data used to create many JournalEntries.
     */
    data: JournalEntryCreateManyInput | JournalEntryCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalEntryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * JournalEntry update
   */
  export type JournalEntryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalEntry
     */
    select?: JournalEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalEntry
     */
    omit?: JournalEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalEntryInclude<ExtArgs> | null
    /**
     * The data needed to update a JournalEntry.
     */
    data: XOR<JournalEntryUpdateInput, JournalEntryUncheckedUpdateInput>
    /**
     * Choose, which JournalEntry to update.
     */
    where: JournalEntryWhereUniqueInput
  }

  /**
   * JournalEntry updateMany
   */
  export type JournalEntryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JournalEntries.
     */
    data: XOR<JournalEntryUpdateManyMutationInput, JournalEntryUncheckedUpdateManyInput>
    /**
     * Filter which JournalEntries to update
     */
    where?: JournalEntryWhereInput
    /**
     * Limit how many JournalEntries to update.
     */
    limit?: number
  }

  /**
   * JournalEntry updateManyAndReturn
   */
  export type JournalEntryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalEntry
     */
    select?: JournalEntrySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JournalEntry
     */
    omit?: JournalEntryOmit<ExtArgs> | null
    /**
     * The data used to update JournalEntries.
     */
    data: XOR<JournalEntryUpdateManyMutationInput, JournalEntryUncheckedUpdateManyInput>
    /**
     * Filter which JournalEntries to update
     */
    where?: JournalEntryWhereInput
    /**
     * Limit how many JournalEntries to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalEntryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * JournalEntry upsert
   */
  export type JournalEntryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalEntry
     */
    select?: JournalEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalEntry
     */
    omit?: JournalEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalEntryInclude<ExtArgs> | null
    /**
     * The filter to search for the JournalEntry to update in case it exists.
     */
    where: JournalEntryWhereUniqueInput
    /**
     * In case the JournalEntry found by the `where` argument doesn't exist, create a new JournalEntry with this data.
     */
    create: XOR<JournalEntryCreateInput, JournalEntryUncheckedCreateInput>
    /**
     * In case the JournalEntry was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JournalEntryUpdateInput, JournalEntryUncheckedUpdateInput>
  }

  /**
   * JournalEntry delete
   */
  export type JournalEntryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalEntry
     */
    select?: JournalEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalEntry
     */
    omit?: JournalEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalEntryInclude<ExtArgs> | null
    /**
     * Filter which JournalEntry to delete.
     */
    where: JournalEntryWhereUniqueInput
  }

  /**
   * JournalEntry deleteMany
   */
  export type JournalEntryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JournalEntries to delete
     */
    where?: JournalEntryWhereInput
    /**
     * Limit how many JournalEntries to delete.
     */
    limit?: number
  }

  /**
   * JournalEntry.lines
   */
  export type JournalEntry$linesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalLine
     */
    select?: JournalLineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalLine
     */
    omit?: JournalLineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalLineInclude<ExtArgs> | null
    where?: JournalLineWhereInput
    orderBy?: JournalLineOrderByWithRelationInput | JournalLineOrderByWithRelationInput[]
    cursor?: JournalLineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JournalLineScalarFieldEnum | JournalLineScalarFieldEnum[]
  }

  /**
   * JournalEntry without action
   */
  export type JournalEntryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalEntry
     */
    select?: JournalEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalEntry
     */
    omit?: JournalEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalEntryInclude<ExtArgs> | null
  }


  /**
   * Model JournalLine
   */

  export type AggregateJournalLine = {
    _count: JournalLineCountAggregateOutputType | null
    _avg: JournalLineAvgAggregateOutputType | null
    _sum: JournalLineSumAggregateOutputType | null
    _min: JournalLineMinAggregateOutputType | null
    _max: JournalLineMaxAggregateOutputType | null
  }

  export type JournalLineAvgAggregateOutputType = {
    debit: number | null
    credit: number | null
  }

  export type JournalLineSumAggregateOutputType = {
    debit: number | null
    credit: number | null
  }

  export type JournalLineMinAggregateOutputType = {
    id: string | null
    entryId: string | null
    accountCode: string | null
    debit: number | null
    credit: number | null
    description: string | null
    createdAt: Date | null
    entityId: string | null
  }

  export type JournalLineMaxAggregateOutputType = {
    id: string | null
    entryId: string | null
    accountCode: string | null
    debit: number | null
    credit: number | null
    description: string | null
    createdAt: Date | null
    entityId: string | null
  }

  export type JournalLineCountAggregateOutputType = {
    id: number
    entryId: number
    accountCode: number
    debit: number
    credit: number
    description: number
    createdAt: number
    entityId: number
    _all: number
  }


  export type JournalLineAvgAggregateInputType = {
    debit?: true
    credit?: true
  }

  export type JournalLineSumAggregateInputType = {
    debit?: true
    credit?: true
  }

  export type JournalLineMinAggregateInputType = {
    id?: true
    entryId?: true
    accountCode?: true
    debit?: true
    credit?: true
    description?: true
    createdAt?: true
    entityId?: true
  }

  export type JournalLineMaxAggregateInputType = {
    id?: true
    entryId?: true
    accountCode?: true
    debit?: true
    credit?: true
    description?: true
    createdAt?: true
    entityId?: true
  }

  export type JournalLineCountAggregateInputType = {
    id?: true
    entryId?: true
    accountCode?: true
    debit?: true
    credit?: true
    description?: true
    createdAt?: true
    entityId?: true
    _all?: true
  }

  export type JournalLineAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JournalLine to aggregate.
     */
    where?: JournalLineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JournalLines to fetch.
     */
    orderBy?: JournalLineOrderByWithRelationInput | JournalLineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: JournalLineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JournalLines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JournalLines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned JournalLines
    **/
    _count?: true | JournalLineCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JournalLineAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JournalLineSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JournalLineMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JournalLineMaxAggregateInputType
  }

  export type GetJournalLineAggregateType<T extends JournalLineAggregateArgs> = {
        [P in keyof T & keyof AggregateJournalLine]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJournalLine[P]>
      : GetScalarType<T[P], AggregateJournalLine[P]>
  }




  export type JournalLineGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: JournalLineWhereInput
    orderBy?: JournalLineOrderByWithAggregationInput | JournalLineOrderByWithAggregationInput[]
    by: JournalLineScalarFieldEnum[] | JournalLineScalarFieldEnum
    having?: JournalLineScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JournalLineCountAggregateInputType | true
    _avg?: JournalLineAvgAggregateInputType
    _sum?: JournalLineSumAggregateInputType
    _min?: JournalLineMinAggregateInputType
    _max?: JournalLineMaxAggregateInputType
  }

  export type JournalLineGroupByOutputType = {
    id: string
    entryId: string
    accountCode: string
    debit: number
    credit: number
    description: string | null
    createdAt: Date
    entityId: string
    _count: JournalLineCountAggregateOutputType | null
    _avg: JournalLineAvgAggregateOutputType | null
    _sum: JournalLineSumAggregateOutputType | null
    _min: JournalLineMinAggregateOutputType | null
    _max: JournalLineMaxAggregateOutputType | null
  }

  type GetJournalLineGroupByPayload<T extends JournalLineGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<JournalLineGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JournalLineGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JournalLineGroupByOutputType[P]>
            : GetScalarType<T[P], JournalLineGroupByOutputType[P]>
        }
      >
    >


  export type JournalLineSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entryId?: boolean
    accountCode?: boolean
    debit?: boolean
    credit?: boolean
    description?: boolean
    createdAt?: boolean
    entityId?: boolean
    entry?: boolean | JournalEntryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["journalLine"]>

  export type JournalLineSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entryId?: boolean
    accountCode?: boolean
    debit?: boolean
    credit?: boolean
    description?: boolean
    createdAt?: boolean
    entityId?: boolean
    entry?: boolean | JournalEntryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["journalLine"]>

  export type JournalLineSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    entryId?: boolean
    accountCode?: boolean
    debit?: boolean
    credit?: boolean
    description?: boolean
    createdAt?: boolean
    entityId?: boolean
    entry?: boolean | JournalEntryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["journalLine"]>

  export type JournalLineSelectScalar = {
    id?: boolean
    entryId?: boolean
    accountCode?: boolean
    debit?: boolean
    credit?: boolean
    description?: boolean
    createdAt?: boolean
    entityId?: boolean
  }

  export type JournalLineOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "entryId" | "accountCode" | "debit" | "credit" | "description" | "createdAt" | "entityId", ExtArgs["result"]["journalLine"]>
  export type JournalLineInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    entry?: boolean | JournalEntryDefaultArgs<ExtArgs>
  }
  export type JournalLineIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    entry?: boolean | JournalEntryDefaultArgs<ExtArgs>
  }
  export type JournalLineIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    entry?: boolean | JournalEntryDefaultArgs<ExtArgs>
  }

  export type $JournalLinePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "JournalLine"
    objects: {
      entry: Prisma.$JournalEntryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      entryId: string
      accountCode: string
      debit: number
      credit: number
      description: string | null
      createdAt: Date
      entityId: string
    }, ExtArgs["result"]["journalLine"]>
    composites: {}
  }

  type JournalLineGetPayload<S extends boolean | null | undefined | JournalLineDefaultArgs> = $Result.GetResult<Prisma.$JournalLinePayload, S>

  type JournalLineCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<JournalLineFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: JournalLineCountAggregateInputType | true
    }

  export interface JournalLineDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['JournalLine'], meta: { name: 'JournalLine' } }
    /**
     * Find zero or one JournalLine that matches the filter.
     * @param {JournalLineFindUniqueArgs} args - Arguments to find a JournalLine
     * @example
     * // Get one JournalLine
     * const journalLine = await prisma.journalLine.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends JournalLineFindUniqueArgs>(args: SelectSubset<T, JournalLineFindUniqueArgs<ExtArgs>>): Prisma__JournalLineClient<$Result.GetResult<Prisma.$JournalLinePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one JournalLine that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {JournalLineFindUniqueOrThrowArgs} args - Arguments to find a JournalLine
     * @example
     * // Get one JournalLine
     * const journalLine = await prisma.journalLine.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends JournalLineFindUniqueOrThrowArgs>(args: SelectSubset<T, JournalLineFindUniqueOrThrowArgs<ExtArgs>>): Prisma__JournalLineClient<$Result.GetResult<Prisma.$JournalLinePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JournalLine that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JournalLineFindFirstArgs} args - Arguments to find a JournalLine
     * @example
     * // Get one JournalLine
     * const journalLine = await prisma.journalLine.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends JournalLineFindFirstArgs>(args?: SelectSubset<T, JournalLineFindFirstArgs<ExtArgs>>): Prisma__JournalLineClient<$Result.GetResult<Prisma.$JournalLinePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first JournalLine that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JournalLineFindFirstOrThrowArgs} args - Arguments to find a JournalLine
     * @example
     * // Get one JournalLine
     * const journalLine = await prisma.journalLine.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends JournalLineFindFirstOrThrowArgs>(args?: SelectSubset<T, JournalLineFindFirstOrThrowArgs<ExtArgs>>): Prisma__JournalLineClient<$Result.GetResult<Prisma.$JournalLinePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more JournalLines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JournalLineFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all JournalLines
     * const journalLines = await prisma.journalLine.findMany()
     * 
     * // Get first 10 JournalLines
     * const journalLines = await prisma.journalLine.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const journalLineWithIdOnly = await prisma.journalLine.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends JournalLineFindManyArgs>(args?: SelectSubset<T, JournalLineFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JournalLinePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a JournalLine.
     * @param {JournalLineCreateArgs} args - Arguments to create a JournalLine.
     * @example
     * // Create one JournalLine
     * const JournalLine = await prisma.journalLine.create({
     *   data: {
     *     // ... data to create a JournalLine
     *   }
     * })
     * 
     */
    create<T extends JournalLineCreateArgs>(args: SelectSubset<T, JournalLineCreateArgs<ExtArgs>>): Prisma__JournalLineClient<$Result.GetResult<Prisma.$JournalLinePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many JournalLines.
     * @param {JournalLineCreateManyArgs} args - Arguments to create many JournalLines.
     * @example
     * // Create many JournalLines
     * const journalLine = await prisma.journalLine.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends JournalLineCreateManyArgs>(args?: SelectSubset<T, JournalLineCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many JournalLines and returns the data saved in the database.
     * @param {JournalLineCreateManyAndReturnArgs} args - Arguments to create many JournalLines.
     * @example
     * // Create many JournalLines
     * const journalLine = await prisma.journalLine.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many JournalLines and only return the `id`
     * const journalLineWithIdOnly = await prisma.journalLine.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends JournalLineCreateManyAndReturnArgs>(args?: SelectSubset<T, JournalLineCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JournalLinePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a JournalLine.
     * @param {JournalLineDeleteArgs} args - Arguments to delete one JournalLine.
     * @example
     * // Delete one JournalLine
     * const JournalLine = await prisma.journalLine.delete({
     *   where: {
     *     // ... filter to delete one JournalLine
     *   }
     * })
     * 
     */
    delete<T extends JournalLineDeleteArgs>(args: SelectSubset<T, JournalLineDeleteArgs<ExtArgs>>): Prisma__JournalLineClient<$Result.GetResult<Prisma.$JournalLinePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one JournalLine.
     * @param {JournalLineUpdateArgs} args - Arguments to update one JournalLine.
     * @example
     * // Update one JournalLine
     * const journalLine = await prisma.journalLine.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends JournalLineUpdateArgs>(args: SelectSubset<T, JournalLineUpdateArgs<ExtArgs>>): Prisma__JournalLineClient<$Result.GetResult<Prisma.$JournalLinePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more JournalLines.
     * @param {JournalLineDeleteManyArgs} args - Arguments to filter JournalLines to delete.
     * @example
     * // Delete a few JournalLines
     * const { count } = await prisma.journalLine.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends JournalLineDeleteManyArgs>(args?: SelectSubset<T, JournalLineDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JournalLines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JournalLineUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many JournalLines
     * const journalLine = await prisma.journalLine.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends JournalLineUpdateManyArgs>(args: SelectSubset<T, JournalLineUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more JournalLines and returns the data updated in the database.
     * @param {JournalLineUpdateManyAndReturnArgs} args - Arguments to update many JournalLines.
     * @example
     * // Update many JournalLines
     * const journalLine = await prisma.journalLine.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more JournalLines and only return the `id`
     * const journalLineWithIdOnly = await prisma.journalLine.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends JournalLineUpdateManyAndReturnArgs>(args: SelectSubset<T, JournalLineUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JournalLinePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one JournalLine.
     * @param {JournalLineUpsertArgs} args - Arguments to update or create a JournalLine.
     * @example
     * // Update or create a JournalLine
     * const journalLine = await prisma.journalLine.upsert({
     *   create: {
     *     // ... data to create a JournalLine
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the JournalLine we want to update
     *   }
     * })
     */
    upsert<T extends JournalLineUpsertArgs>(args: SelectSubset<T, JournalLineUpsertArgs<ExtArgs>>): Prisma__JournalLineClient<$Result.GetResult<Prisma.$JournalLinePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of JournalLines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JournalLineCountArgs} args - Arguments to filter JournalLines to count.
     * @example
     * // Count the number of JournalLines
     * const count = await prisma.journalLine.count({
     *   where: {
     *     // ... the filter for the JournalLines we want to count
     *   }
     * })
    **/
    count<T extends JournalLineCountArgs>(
      args?: Subset<T, JournalLineCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JournalLineCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a JournalLine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JournalLineAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JournalLineAggregateArgs>(args: Subset<T, JournalLineAggregateArgs>): Prisma.PrismaPromise<GetJournalLineAggregateType<T>>

    /**
     * Group by JournalLine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JournalLineGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JournalLineGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JournalLineGroupByArgs['orderBy'] }
        : { orderBy?: JournalLineGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JournalLineGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJournalLineGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the JournalLine model
   */
  readonly fields: JournalLineFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for JournalLine.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__JournalLineClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    entry<T extends JournalEntryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, JournalEntryDefaultArgs<ExtArgs>>): Prisma__JournalEntryClient<$Result.GetResult<Prisma.$JournalEntryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the JournalLine model
   */
  interface JournalLineFieldRefs {
    readonly id: FieldRef<"JournalLine", 'String'>
    readonly entryId: FieldRef<"JournalLine", 'String'>
    readonly accountCode: FieldRef<"JournalLine", 'String'>
    readonly debit: FieldRef<"JournalLine", 'Float'>
    readonly credit: FieldRef<"JournalLine", 'Float'>
    readonly description: FieldRef<"JournalLine", 'String'>
    readonly createdAt: FieldRef<"JournalLine", 'DateTime'>
    readonly entityId: FieldRef<"JournalLine", 'String'>
  }
    

  // Custom InputTypes
  /**
   * JournalLine findUnique
   */
  export type JournalLineFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalLine
     */
    select?: JournalLineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalLine
     */
    omit?: JournalLineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalLineInclude<ExtArgs> | null
    /**
     * Filter, which JournalLine to fetch.
     */
    where: JournalLineWhereUniqueInput
  }

  /**
   * JournalLine findUniqueOrThrow
   */
  export type JournalLineFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalLine
     */
    select?: JournalLineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalLine
     */
    omit?: JournalLineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalLineInclude<ExtArgs> | null
    /**
     * Filter, which JournalLine to fetch.
     */
    where: JournalLineWhereUniqueInput
  }

  /**
   * JournalLine findFirst
   */
  export type JournalLineFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalLine
     */
    select?: JournalLineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalLine
     */
    omit?: JournalLineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalLineInclude<ExtArgs> | null
    /**
     * Filter, which JournalLine to fetch.
     */
    where?: JournalLineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JournalLines to fetch.
     */
    orderBy?: JournalLineOrderByWithRelationInput | JournalLineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JournalLines.
     */
    cursor?: JournalLineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JournalLines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JournalLines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JournalLines.
     */
    distinct?: JournalLineScalarFieldEnum | JournalLineScalarFieldEnum[]
  }

  /**
   * JournalLine findFirstOrThrow
   */
  export type JournalLineFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalLine
     */
    select?: JournalLineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalLine
     */
    omit?: JournalLineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalLineInclude<ExtArgs> | null
    /**
     * Filter, which JournalLine to fetch.
     */
    where?: JournalLineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JournalLines to fetch.
     */
    orderBy?: JournalLineOrderByWithRelationInput | JournalLineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for JournalLines.
     */
    cursor?: JournalLineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JournalLines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JournalLines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of JournalLines.
     */
    distinct?: JournalLineScalarFieldEnum | JournalLineScalarFieldEnum[]
  }

  /**
   * JournalLine findMany
   */
  export type JournalLineFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalLine
     */
    select?: JournalLineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalLine
     */
    omit?: JournalLineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalLineInclude<ExtArgs> | null
    /**
     * Filter, which JournalLines to fetch.
     */
    where?: JournalLineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of JournalLines to fetch.
     */
    orderBy?: JournalLineOrderByWithRelationInput | JournalLineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing JournalLines.
     */
    cursor?: JournalLineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` JournalLines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` JournalLines.
     */
    skip?: number
    distinct?: JournalLineScalarFieldEnum | JournalLineScalarFieldEnum[]
  }

  /**
   * JournalLine create
   */
  export type JournalLineCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalLine
     */
    select?: JournalLineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalLine
     */
    omit?: JournalLineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalLineInclude<ExtArgs> | null
    /**
     * The data needed to create a JournalLine.
     */
    data: XOR<JournalLineCreateInput, JournalLineUncheckedCreateInput>
  }

  /**
   * JournalLine createMany
   */
  export type JournalLineCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many JournalLines.
     */
    data: JournalLineCreateManyInput | JournalLineCreateManyInput[]
  }

  /**
   * JournalLine createManyAndReturn
   */
  export type JournalLineCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalLine
     */
    select?: JournalLineSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JournalLine
     */
    omit?: JournalLineOmit<ExtArgs> | null
    /**
     * The data used to create many JournalLines.
     */
    data: JournalLineCreateManyInput | JournalLineCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalLineIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * JournalLine update
   */
  export type JournalLineUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalLine
     */
    select?: JournalLineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalLine
     */
    omit?: JournalLineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalLineInclude<ExtArgs> | null
    /**
     * The data needed to update a JournalLine.
     */
    data: XOR<JournalLineUpdateInput, JournalLineUncheckedUpdateInput>
    /**
     * Choose, which JournalLine to update.
     */
    where: JournalLineWhereUniqueInput
  }

  /**
   * JournalLine updateMany
   */
  export type JournalLineUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update JournalLines.
     */
    data: XOR<JournalLineUpdateManyMutationInput, JournalLineUncheckedUpdateManyInput>
    /**
     * Filter which JournalLines to update
     */
    where?: JournalLineWhereInput
    /**
     * Limit how many JournalLines to update.
     */
    limit?: number
  }

  /**
   * JournalLine updateManyAndReturn
   */
  export type JournalLineUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalLine
     */
    select?: JournalLineSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the JournalLine
     */
    omit?: JournalLineOmit<ExtArgs> | null
    /**
     * The data used to update JournalLines.
     */
    data: XOR<JournalLineUpdateManyMutationInput, JournalLineUncheckedUpdateManyInput>
    /**
     * Filter which JournalLines to update
     */
    where?: JournalLineWhereInput
    /**
     * Limit how many JournalLines to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalLineIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * JournalLine upsert
   */
  export type JournalLineUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalLine
     */
    select?: JournalLineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalLine
     */
    omit?: JournalLineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalLineInclude<ExtArgs> | null
    /**
     * The filter to search for the JournalLine to update in case it exists.
     */
    where: JournalLineWhereUniqueInput
    /**
     * In case the JournalLine found by the `where` argument doesn't exist, create a new JournalLine with this data.
     */
    create: XOR<JournalLineCreateInput, JournalLineUncheckedCreateInput>
    /**
     * In case the JournalLine was found with the provided `where` argument, update it with this data.
     */
    update: XOR<JournalLineUpdateInput, JournalLineUncheckedUpdateInput>
  }

  /**
   * JournalLine delete
   */
  export type JournalLineDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalLine
     */
    select?: JournalLineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalLine
     */
    omit?: JournalLineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalLineInclude<ExtArgs> | null
    /**
     * Filter which JournalLine to delete.
     */
    where: JournalLineWhereUniqueInput
  }

  /**
   * JournalLine deleteMany
   */
  export type JournalLineDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which JournalLines to delete
     */
    where?: JournalLineWhereInput
    /**
     * Limit how many JournalLines to delete.
     */
    limit?: number
  }

  /**
   * JournalLine without action
   */
  export type JournalLineDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalLine
     */
    select?: JournalLineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalLine
     */
    omit?: JournalLineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalLineInclude<ExtArgs> | null
  }


  /**
   * Model XbrlTag
   */

  export type AggregateXbrlTag = {
    _count: XbrlTagCountAggregateOutputType | null
    _min: XbrlTagMinAggregateOutputType | null
    _max: XbrlTagMaxAggregateOutputType | null
  }

  export type XbrlTagMinAggregateOutputType = {
    id: string | null
    tagName: string | null
    value: string | null
    context: string | null
    periodStart: Date | null
    periodEnd: Date | null
    userId: string | null
    createdAt: Date | null
    entityId: string | null
  }

  export type XbrlTagMaxAggregateOutputType = {
    id: string | null
    tagName: string | null
    value: string | null
    context: string | null
    periodStart: Date | null
    periodEnd: Date | null
    userId: string | null
    createdAt: Date | null
    entityId: string | null
  }

  export type XbrlTagCountAggregateOutputType = {
    id: number
    tagName: number
    value: number
    context: number
    periodStart: number
    periodEnd: number
    userId: number
    createdAt: number
    entityId: number
    _all: number
  }


  export type XbrlTagMinAggregateInputType = {
    id?: true
    tagName?: true
    value?: true
    context?: true
    periodStart?: true
    periodEnd?: true
    userId?: true
    createdAt?: true
    entityId?: true
  }

  export type XbrlTagMaxAggregateInputType = {
    id?: true
    tagName?: true
    value?: true
    context?: true
    periodStart?: true
    periodEnd?: true
    userId?: true
    createdAt?: true
    entityId?: true
  }

  export type XbrlTagCountAggregateInputType = {
    id?: true
    tagName?: true
    value?: true
    context?: true
    periodStart?: true
    periodEnd?: true
    userId?: true
    createdAt?: true
    entityId?: true
    _all?: true
  }

  export type XbrlTagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which XbrlTag to aggregate.
     */
    where?: XbrlTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of XbrlTags to fetch.
     */
    orderBy?: XbrlTagOrderByWithRelationInput | XbrlTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: XbrlTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` XbrlTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` XbrlTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned XbrlTags
    **/
    _count?: true | XbrlTagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: XbrlTagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: XbrlTagMaxAggregateInputType
  }

  export type GetXbrlTagAggregateType<T extends XbrlTagAggregateArgs> = {
        [P in keyof T & keyof AggregateXbrlTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateXbrlTag[P]>
      : GetScalarType<T[P], AggregateXbrlTag[P]>
  }




  export type XbrlTagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: XbrlTagWhereInput
    orderBy?: XbrlTagOrderByWithAggregationInput | XbrlTagOrderByWithAggregationInput[]
    by: XbrlTagScalarFieldEnum[] | XbrlTagScalarFieldEnum
    having?: XbrlTagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: XbrlTagCountAggregateInputType | true
    _min?: XbrlTagMinAggregateInputType
    _max?: XbrlTagMaxAggregateInputType
  }

  export type XbrlTagGroupByOutputType = {
    id: string
    tagName: string
    value: string
    context: string
    periodStart: Date | null
    periodEnd: Date | null
    userId: string
    createdAt: Date
    entityId: string
    _count: XbrlTagCountAggregateOutputType | null
    _min: XbrlTagMinAggregateOutputType | null
    _max: XbrlTagMaxAggregateOutputType | null
  }

  type GetXbrlTagGroupByPayload<T extends XbrlTagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<XbrlTagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof XbrlTagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], XbrlTagGroupByOutputType[P]>
            : GetScalarType<T[P], XbrlTagGroupByOutputType[P]>
        }
      >
    >


  export type XbrlTagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tagName?: boolean
    value?: boolean
    context?: boolean
    periodStart?: boolean
    periodEnd?: boolean
    userId?: boolean
    createdAt?: boolean
    entityId?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["xbrlTag"]>

  export type XbrlTagSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tagName?: boolean
    value?: boolean
    context?: boolean
    periodStart?: boolean
    periodEnd?: boolean
    userId?: boolean
    createdAt?: boolean
    entityId?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["xbrlTag"]>

  export type XbrlTagSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tagName?: boolean
    value?: boolean
    context?: boolean
    periodStart?: boolean
    periodEnd?: boolean
    userId?: boolean
    createdAt?: boolean
    entityId?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["xbrlTag"]>

  export type XbrlTagSelectScalar = {
    id?: boolean
    tagName?: boolean
    value?: boolean
    context?: boolean
    periodStart?: boolean
    periodEnd?: boolean
    userId?: boolean
    createdAt?: boolean
    entityId?: boolean
  }

  export type XbrlTagOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "tagName" | "value" | "context" | "periodStart" | "periodEnd" | "userId" | "createdAt" | "entityId", ExtArgs["result"]["xbrlTag"]>
  export type XbrlTagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type XbrlTagIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type XbrlTagIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $XbrlTagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "XbrlTag"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tagName: string
      value: string
      context: string
      periodStart: Date | null
      periodEnd: Date | null
      userId: string
      createdAt: Date
      entityId: string
    }, ExtArgs["result"]["xbrlTag"]>
    composites: {}
  }

  type XbrlTagGetPayload<S extends boolean | null | undefined | XbrlTagDefaultArgs> = $Result.GetResult<Prisma.$XbrlTagPayload, S>

  type XbrlTagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<XbrlTagFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: XbrlTagCountAggregateInputType | true
    }

  export interface XbrlTagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['XbrlTag'], meta: { name: 'XbrlTag' } }
    /**
     * Find zero or one XbrlTag that matches the filter.
     * @param {XbrlTagFindUniqueArgs} args - Arguments to find a XbrlTag
     * @example
     * // Get one XbrlTag
     * const xbrlTag = await prisma.xbrlTag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends XbrlTagFindUniqueArgs>(args: SelectSubset<T, XbrlTagFindUniqueArgs<ExtArgs>>): Prisma__XbrlTagClient<$Result.GetResult<Prisma.$XbrlTagPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one XbrlTag that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {XbrlTagFindUniqueOrThrowArgs} args - Arguments to find a XbrlTag
     * @example
     * // Get one XbrlTag
     * const xbrlTag = await prisma.xbrlTag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends XbrlTagFindUniqueOrThrowArgs>(args: SelectSubset<T, XbrlTagFindUniqueOrThrowArgs<ExtArgs>>): Prisma__XbrlTagClient<$Result.GetResult<Prisma.$XbrlTagPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first XbrlTag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {XbrlTagFindFirstArgs} args - Arguments to find a XbrlTag
     * @example
     * // Get one XbrlTag
     * const xbrlTag = await prisma.xbrlTag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends XbrlTagFindFirstArgs>(args?: SelectSubset<T, XbrlTagFindFirstArgs<ExtArgs>>): Prisma__XbrlTagClient<$Result.GetResult<Prisma.$XbrlTagPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first XbrlTag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {XbrlTagFindFirstOrThrowArgs} args - Arguments to find a XbrlTag
     * @example
     * // Get one XbrlTag
     * const xbrlTag = await prisma.xbrlTag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends XbrlTagFindFirstOrThrowArgs>(args?: SelectSubset<T, XbrlTagFindFirstOrThrowArgs<ExtArgs>>): Prisma__XbrlTagClient<$Result.GetResult<Prisma.$XbrlTagPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more XbrlTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {XbrlTagFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all XbrlTags
     * const xbrlTags = await prisma.xbrlTag.findMany()
     * 
     * // Get first 10 XbrlTags
     * const xbrlTags = await prisma.xbrlTag.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const xbrlTagWithIdOnly = await prisma.xbrlTag.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends XbrlTagFindManyArgs>(args?: SelectSubset<T, XbrlTagFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$XbrlTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a XbrlTag.
     * @param {XbrlTagCreateArgs} args - Arguments to create a XbrlTag.
     * @example
     * // Create one XbrlTag
     * const XbrlTag = await prisma.xbrlTag.create({
     *   data: {
     *     // ... data to create a XbrlTag
     *   }
     * })
     * 
     */
    create<T extends XbrlTagCreateArgs>(args: SelectSubset<T, XbrlTagCreateArgs<ExtArgs>>): Prisma__XbrlTagClient<$Result.GetResult<Prisma.$XbrlTagPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many XbrlTags.
     * @param {XbrlTagCreateManyArgs} args - Arguments to create many XbrlTags.
     * @example
     * // Create many XbrlTags
     * const xbrlTag = await prisma.xbrlTag.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends XbrlTagCreateManyArgs>(args?: SelectSubset<T, XbrlTagCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many XbrlTags and returns the data saved in the database.
     * @param {XbrlTagCreateManyAndReturnArgs} args - Arguments to create many XbrlTags.
     * @example
     * // Create many XbrlTags
     * const xbrlTag = await prisma.xbrlTag.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many XbrlTags and only return the `id`
     * const xbrlTagWithIdOnly = await prisma.xbrlTag.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends XbrlTagCreateManyAndReturnArgs>(args?: SelectSubset<T, XbrlTagCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$XbrlTagPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a XbrlTag.
     * @param {XbrlTagDeleteArgs} args - Arguments to delete one XbrlTag.
     * @example
     * // Delete one XbrlTag
     * const XbrlTag = await prisma.xbrlTag.delete({
     *   where: {
     *     // ... filter to delete one XbrlTag
     *   }
     * })
     * 
     */
    delete<T extends XbrlTagDeleteArgs>(args: SelectSubset<T, XbrlTagDeleteArgs<ExtArgs>>): Prisma__XbrlTagClient<$Result.GetResult<Prisma.$XbrlTagPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one XbrlTag.
     * @param {XbrlTagUpdateArgs} args - Arguments to update one XbrlTag.
     * @example
     * // Update one XbrlTag
     * const xbrlTag = await prisma.xbrlTag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends XbrlTagUpdateArgs>(args: SelectSubset<T, XbrlTagUpdateArgs<ExtArgs>>): Prisma__XbrlTagClient<$Result.GetResult<Prisma.$XbrlTagPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more XbrlTags.
     * @param {XbrlTagDeleteManyArgs} args - Arguments to filter XbrlTags to delete.
     * @example
     * // Delete a few XbrlTags
     * const { count } = await prisma.xbrlTag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends XbrlTagDeleteManyArgs>(args?: SelectSubset<T, XbrlTagDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more XbrlTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {XbrlTagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many XbrlTags
     * const xbrlTag = await prisma.xbrlTag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends XbrlTagUpdateManyArgs>(args: SelectSubset<T, XbrlTagUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more XbrlTags and returns the data updated in the database.
     * @param {XbrlTagUpdateManyAndReturnArgs} args - Arguments to update many XbrlTags.
     * @example
     * // Update many XbrlTags
     * const xbrlTag = await prisma.xbrlTag.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more XbrlTags and only return the `id`
     * const xbrlTagWithIdOnly = await prisma.xbrlTag.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends XbrlTagUpdateManyAndReturnArgs>(args: SelectSubset<T, XbrlTagUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$XbrlTagPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one XbrlTag.
     * @param {XbrlTagUpsertArgs} args - Arguments to update or create a XbrlTag.
     * @example
     * // Update or create a XbrlTag
     * const xbrlTag = await prisma.xbrlTag.upsert({
     *   create: {
     *     // ... data to create a XbrlTag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the XbrlTag we want to update
     *   }
     * })
     */
    upsert<T extends XbrlTagUpsertArgs>(args: SelectSubset<T, XbrlTagUpsertArgs<ExtArgs>>): Prisma__XbrlTagClient<$Result.GetResult<Prisma.$XbrlTagPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of XbrlTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {XbrlTagCountArgs} args - Arguments to filter XbrlTags to count.
     * @example
     * // Count the number of XbrlTags
     * const count = await prisma.xbrlTag.count({
     *   where: {
     *     // ... the filter for the XbrlTags we want to count
     *   }
     * })
    **/
    count<T extends XbrlTagCountArgs>(
      args?: Subset<T, XbrlTagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], XbrlTagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a XbrlTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {XbrlTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends XbrlTagAggregateArgs>(args: Subset<T, XbrlTagAggregateArgs>): Prisma.PrismaPromise<GetXbrlTagAggregateType<T>>

    /**
     * Group by XbrlTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {XbrlTagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends XbrlTagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: XbrlTagGroupByArgs['orderBy'] }
        : { orderBy?: XbrlTagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, XbrlTagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetXbrlTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the XbrlTag model
   */
  readonly fields: XbrlTagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for XbrlTag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__XbrlTagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the XbrlTag model
   */
  interface XbrlTagFieldRefs {
    readonly id: FieldRef<"XbrlTag", 'String'>
    readonly tagName: FieldRef<"XbrlTag", 'String'>
    readonly value: FieldRef<"XbrlTag", 'String'>
    readonly context: FieldRef<"XbrlTag", 'String'>
    readonly periodStart: FieldRef<"XbrlTag", 'DateTime'>
    readonly periodEnd: FieldRef<"XbrlTag", 'DateTime'>
    readonly userId: FieldRef<"XbrlTag", 'String'>
    readonly createdAt: FieldRef<"XbrlTag", 'DateTime'>
    readonly entityId: FieldRef<"XbrlTag", 'String'>
  }
    

  // Custom InputTypes
  /**
   * XbrlTag findUnique
   */
  export type XbrlTagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XbrlTag
     */
    select?: XbrlTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the XbrlTag
     */
    omit?: XbrlTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XbrlTagInclude<ExtArgs> | null
    /**
     * Filter, which XbrlTag to fetch.
     */
    where: XbrlTagWhereUniqueInput
  }

  /**
   * XbrlTag findUniqueOrThrow
   */
  export type XbrlTagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XbrlTag
     */
    select?: XbrlTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the XbrlTag
     */
    omit?: XbrlTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XbrlTagInclude<ExtArgs> | null
    /**
     * Filter, which XbrlTag to fetch.
     */
    where: XbrlTagWhereUniqueInput
  }

  /**
   * XbrlTag findFirst
   */
  export type XbrlTagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XbrlTag
     */
    select?: XbrlTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the XbrlTag
     */
    omit?: XbrlTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XbrlTagInclude<ExtArgs> | null
    /**
     * Filter, which XbrlTag to fetch.
     */
    where?: XbrlTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of XbrlTags to fetch.
     */
    orderBy?: XbrlTagOrderByWithRelationInput | XbrlTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for XbrlTags.
     */
    cursor?: XbrlTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` XbrlTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` XbrlTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of XbrlTags.
     */
    distinct?: XbrlTagScalarFieldEnum | XbrlTagScalarFieldEnum[]
  }

  /**
   * XbrlTag findFirstOrThrow
   */
  export type XbrlTagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XbrlTag
     */
    select?: XbrlTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the XbrlTag
     */
    omit?: XbrlTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XbrlTagInclude<ExtArgs> | null
    /**
     * Filter, which XbrlTag to fetch.
     */
    where?: XbrlTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of XbrlTags to fetch.
     */
    orderBy?: XbrlTagOrderByWithRelationInput | XbrlTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for XbrlTags.
     */
    cursor?: XbrlTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` XbrlTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` XbrlTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of XbrlTags.
     */
    distinct?: XbrlTagScalarFieldEnum | XbrlTagScalarFieldEnum[]
  }

  /**
   * XbrlTag findMany
   */
  export type XbrlTagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XbrlTag
     */
    select?: XbrlTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the XbrlTag
     */
    omit?: XbrlTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XbrlTagInclude<ExtArgs> | null
    /**
     * Filter, which XbrlTags to fetch.
     */
    where?: XbrlTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of XbrlTags to fetch.
     */
    orderBy?: XbrlTagOrderByWithRelationInput | XbrlTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing XbrlTags.
     */
    cursor?: XbrlTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` XbrlTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` XbrlTags.
     */
    skip?: number
    distinct?: XbrlTagScalarFieldEnum | XbrlTagScalarFieldEnum[]
  }

  /**
   * XbrlTag create
   */
  export type XbrlTagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XbrlTag
     */
    select?: XbrlTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the XbrlTag
     */
    omit?: XbrlTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XbrlTagInclude<ExtArgs> | null
    /**
     * The data needed to create a XbrlTag.
     */
    data: XOR<XbrlTagCreateInput, XbrlTagUncheckedCreateInput>
  }

  /**
   * XbrlTag createMany
   */
  export type XbrlTagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many XbrlTags.
     */
    data: XbrlTagCreateManyInput | XbrlTagCreateManyInput[]
  }

  /**
   * XbrlTag createManyAndReturn
   */
  export type XbrlTagCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XbrlTag
     */
    select?: XbrlTagSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the XbrlTag
     */
    omit?: XbrlTagOmit<ExtArgs> | null
    /**
     * The data used to create many XbrlTags.
     */
    data: XbrlTagCreateManyInput | XbrlTagCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XbrlTagIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * XbrlTag update
   */
  export type XbrlTagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XbrlTag
     */
    select?: XbrlTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the XbrlTag
     */
    omit?: XbrlTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XbrlTagInclude<ExtArgs> | null
    /**
     * The data needed to update a XbrlTag.
     */
    data: XOR<XbrlTagUpdateInput, XbrlTagUncheckedUpdateInput>
    /**
     * Choose, which XbrlTag to update.
     */
    where: XbrlTagWhereUniqueInput
  }

  /**
   * XbrlTag updateMany
   */
  export type XbrlTagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update XbrlTags.
     */
    data: XOR<XbrlTagUpdateManyMutationInput, XbrlTagUncheckedUpdateManyInput>
    /**
     * Filter which XbrlTags to update
     */
    where?: XbrlTagWhereInput
    /**
     * Limit how many XbrlTags to update.
     */
    limit?: number
  }

  /**
   * XbrlTag updateManyAndReturn
   */
  export type XbrlTagUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XbrlTag
     */
    select?: XbrlTagSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the XbrlTag
     */
    omit?: XbrlTagOmit<ExtArgs> | null
    /**
     * The data used to update XbrlTags.
     */
    data: XOR<XbrlTagUpdateManyMutationInput, XbrlTagUncheckedUpdateManyInput>
    /**
     * Filter which XbrlTags to update
     */
    where?: XbrlTagWhereInput
    /**
     * Limit how many XbrlTags to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XbrlTagIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * XbrlTag upsert
   */
  export type XbrlTagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XbrlTag
     */
    select?: XbrlTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the XbrlTag
     */
    omit?: XbrlTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XbrlTagInclude<ExtArgs> | null
    /**
     * The filter to search for the XbrlTag to update in case it exists.
     */
    where: XbrlTagWhereUniqueInput
    /**
     * In case the XbrlTag found by the `where` argument doesn't exist, create a new XbrlTag with this data.
     */
    create: XOR<XbrlTagCreateInput, XbrlTagUncheckedCreateInput>
    /**
     * In case the XbrlTag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<XbrlTagUpdateInput, XbrlTagUncheckedUpdateInput>
  }

  /**
   * XbrlTag delete
   */
  export type XbrlTagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XbrlTag
     */
    select?: XbrlTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the XbrlTag
     */
    omit?: XbrlTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XbrlTagInclude<ExtArgs> | null
    /**
     * Filter which XbrlTag to delete.
     */
    where: XbrlTagWhereUniqueInput
  }

  /**
   * XbrlTag deleteMany
   */
  export type XbrlTagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which XbrlTags to delete
     */
    where?: XbrlTagWhereInput
    /**
     * Limit how many XbrlTags to delete.
     */
    limit?: number
  }

  /**
   * XbrlTag without action
   */
  export type XbrlTagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XbrlTag
     */
    select?: XbrlTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the XbrlTag
     */
    omit?: XbrlTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XbrlTagInclude<ExtArgs> | null
  }


  /**
   * Model ReclassificationRequest
   */

  export type AggregateReclassificationRequest = {
    _count: ReclassificationRequestCountAggregateOutputType | null
    _min: ReclassificationRequestMinAggregateOutputType | null
    _max: ReclassificationRequestMaxAggregateOutputType | null
  }

  export type ReclassificationRequestMinAggregateOutputType = {
    id: string | null
    batchId: string | null
    fromClass: $Enums.Classification | null
    toClass: $Enums.Classification | null
    reason: string | null
    status: $Enums.ReclassificationStatus | null
    submittedBy: string | null
    approvedBy: string | null
    timestamp: Date | null
    approvedAt: Date | null
    entityId: string | null
  }

  export type ReclassificationRequestMaxAggregateOutputType = {
    id: string | null
    batchId: string | null
    fromClass: $Enums.Classification | null
    toClass: $Enums.Classification | null
    reason: string | null
    status: $Enums.ReclassificationStatus | null
    submittedBy: string | null
    approvedBy: string | null
    timestamp: Date | null
    approvedAt: Date | null
    entityId: string | null
  }

  export type ReclassificationRequestCountAggregateOutputType = {
    id: number
    batchId: number
    fromClass: number
    toClass: number
    reason: number
    status: number
    submittedBy: number
    approvedBy: number
    timestamp: number
    approvedAt: number
    entityId: number
    _all: number
  }


  export type ReclassificationRequestMinAggregateInputType = {
    id?: true
    batchId?: true
    fromClass?: true
    toClass?: true
    reason?: true
    status?: true
    submittedBy?: true
    approvedBy?: true
    timestamp?: true
    approvedAt?: true
    entityId?: true
  }

  export type ReclassificationRequestMaxAggregateInputType = {
    id?: true
    batchId?: true
    fromClass?: true
    toClass?: true
    reason?: true
    status?: true
    submittedBy?: true
    approvedBy?: true
    timestamp?: true
    approvedAt?: true
    entityId?: true
  }

  export type ReclassificationRequestCountAggregateInputType = {
    id?: true
    batchId?: true
    fromClass?: true
    toClass?: true
    reason?: true
    status?: true
    submittedBy?: true
    approvedBy?: true
    timestamp?: true
    approvedAt?: true
    entityId?: true
    _all?: true
  }

  export type ReclassificationRequestAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReclassificationRequest to aggregate.
     */
    where?: ReclassificationRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReclassificationRequests to fetch.
     */
    orderBy?: ReclassificationRequestOrderByWithRelationInput | ReclassificationRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReclassificationRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReclassificationRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReclassificationRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReclassificationRequests
    **/
    _count?: true | ReclassificationRequestCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReclassificationRequestMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReclassificationRequestMaxAggregateInputType
  }

  export type GetReclassificationRequestAggregateType<T extends ReclassificationRequestAggregateArgs> = {
        [P in keyof T & keyof AggregateReclassificationRequest]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReclassificationRequest[P]>
      : GetScalarType<T[P], AggregateReclassificationRequest[P]>
  }




  export type ReclassificationRequestGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReclassificationRequestWhereInput
    orderBy?: ReclassificationRequestOrderByWithAggregationInput | ReclassificationRequestOrderByWithAggregationInput[]
    by: ReclassificationRequestScalarFieldEnum[] | ReclassificationRequestScalarFieldEnum
    having?: ReclassificationRequestScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReclassificationRequestCountAggregateInputType | true
    _min?: ReclassificationRequestMinAggregateInputType
    _max?: ReclassificationRequestMaxAggregateInputType
  }

  export type ReclassificationRequestGroupByOutputType = {
    id: string
    batchId: string
    fromClass: $Enums.Classification
    toClass: $Enums.Classification
    reason: string | null
    status: $Enums.ReclassificationStatus
    submittedBy: string
    approvedBy: string | null
    timestamp: Date
    approvedAt: Date | null
    entityId: string
    _count: ReclassificationRequestCountAggregateOutputType | null
    _min: ReclassificationRequestMinAggregateOutputType | null
    _max: ReclassificationRequestMaxAggregateOutputType | null
  }

  type GetReclassificationRequestGroupByPayload<T extends ReclassificationRequestGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReclassificationRequestGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReclassificationRequestGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReclassificationRequestGroupByOutputType[P]>
            : GetScalarType<T[P], ReclassificationRequestGroupByOutputType[P]>
        }
      >
    >


  export type ReclassificationRequestSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    batchId?: boolean
    fromClass?: boolean
    toClass?: boolean
    reason?: boolean
    status?: boolean
    submittedBy?: boolean
    approvedBy?: boolean
    timestamp?: boolean
    approvedAt?: boolean
    entityId?: boolean
    batch?: boolean | ACCUDefaultArgs<ExtArgs>
    submittedByUser?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reclassificationRequest"]>

  export type ReclassificationRequestSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    batchId?: boolean
    fromClass?: boolean
    toClass?: boolean
    reason?: boolean
    status?: boolean
    submittedBy?: boolean
    approvedBy?: boolean
    timestamp?: boolean
    approvedAt?: boolean
    entityId?: boolean
    batch?: boolean | ACCUDefaultArgs<ExtArgs>
    submittedByUser?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reclassificationRequest"]>

  export type ReclassificationRequestSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    batchId?: boolean
    fromClass?: boolean
    toClass?: boolean
    reason?: boolean
    status?: boolean
    submittedBy?: boolean
    approvedBy?: boolean
    timestamp?: boolean
    approvedAt?: boolean
    entityId?: boolean
    batch?: boolean | ACCUDefaultArgs<ExtArgs>
    submittedByUser?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reclassificationRequest"]>

  export type ReclassificationRequestSelectScalar = {
    id?: boolean
    batchId?: boolean
    fromClass?: boolean
    toClass?: boolean
    reason?: boolean
    status?: boolean
    submittedBy?: boolean
    approvedBy?: boolean
    timestamp?: boolean
    approvedAt?: boolean
    entityId?: boolean
  }

  export type ReclassificationRequestOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "batchId" | "fromClass" | "toClass" | "reason" | "status" | "submittedBy" | "approvedBy" | "timestamp" | "approvedAt" | "entityId", ExtArgs["result"]["reclassificationRequest"]>
  export type ReclassificationRequestInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    batch?: boolean | ACCUDefaultArgs<ExtArgs>
    submittedByUser?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ReclassificationRequestIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    batch?: boolean | ACCUDefaultArgs<ExtArgs>
    submittedByUser?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ReclassificationRequestIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    batch?: boolean | ACCUDefaultArgs<ExtArgs>
    submittedByUser?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ReclassificationRequestPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReclassificationRequest"
    objects: {
      batch: Prisma.$ACCUPayload<ExtArgs>
      submittedByUser: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      batchId: string
      fromClass: $Enums.Classification
      toClass: $Enums.Classification
      reason: string | null
      status: $Enums.ReclassificationStatus
      submittedBy: string
      approvedBy: string | null
      timestamp: Date
      approvedAt: Date | null
      entityId: string
    }, ExtArgs["result"]["reclassificationRequest"]>
    composites: {}
  }

  type ReclassificationRequestGetPayload<S extends boolean | null | undefined | ReclassificationRequestDefaultArgs> = $Result.GetResult<Prisma.$ReclassificationRequestPayload, S>

  type ReclassificationRequestCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReclassificationRequestFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReclassificationRequestCountAggregateInputType | true
    }

  export interface ReclassificationRequestDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReclassificationRequest'], meta: { name: 'ReclassificationRequest' } }
    /**
     * Find zero or one ReclassificationRequest that matches the filter.
     * @param {ReclassificationRequestFindUniqueArgs} args - Arguments to find a ReclassificationRequest
     * @example
     * // Get one ReclassificationRequest
     * const reclassificationRequest = await prisma.reclassificationRequest.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReclassificationRequestFindUniqueArgs>(args: SelectSubset<T, ReclassificationRequestFindUniqueArgs<ExtArgs>>): Prisma__ReclassificationRequestClient<$Result.GetResult<Prisma.$ReclassificationRequestPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ReclassificationRequest that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReclassificationRequestFindUniqueOrThrowArgs} args - Arguments to find a ReclassificationRequest
     * @example
     * // Get one ReclassificationRequest
     * const reclassificationRequest = await prisma.reclassificationRequest.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReclassificationRequestFindUniqueOrThrowArgs>(args: SelectSubset<T, ReclassificationRequestFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReclassificationRequestClient<$Result.GetResult<Prisma.$ReclassificationRequestPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReclassificationRequest that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReclassificationRequestFindFirstArgs} args - Arguments to find a ReclassificationRequest
     * @example
     * // Get one ReclassificationRequest
     * const reclassificationRequest = await prisma.reclassificationRequest.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReclassificationRequestFindFirstArgs>(args?: SelectSubset<T, ReclassificationRequestFindFirstArgs<ExtArgs>>): Prisma__ReclassificationRequestClient<$Result.GetResult<Prisma.$ReclassificationRequestPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReclassificationRequest that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReclassificationRequestFindFirstOrThrowArgs} args - Arguments to find a ReclassificationRequest
     * @example
     * // Get one ReclassificationRequest
     * const reclassificationRequest = await prisma.reclassificationRequest.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReclassificationRequestFindFirstOrThrowArgs>(args?: SelectSubset<T, ReclassificationRequestFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReclassificationRequestClient<$Result.GetResult<Prisma.$ReclassificationRequestPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ReclassificationRequests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReclassificationRequestFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReclassificationRequests
     * const reclassificationRequests = await prisma.reclassificationRequest.findMany()
     * 
     * // Get first 10 ReclassificationRequests
     * const reclassificationRequests = await prisma.reclassificationRequest.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reclassificationRequestWithIdOnly = await prisma.reclassificationRequest.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReclassificationRequestFindManyArgs>(args?: SelectSubset<T, ReclassificationRequestFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReclassificationRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ReclassificationRequest.
     * @param {ReclassificationRequestCreateArgs} args - Arguments to create a ReclassificationRequest.
     * @example
     * // Create one ReclassificationRequest
     * const ReclassificationRequest = await prisma.reclassificationRequest.create({
     *   data: {
     *     // ... data to create a ReclassificationRequest
     *   }
     * })
     * 
     */
    create<T extends ReclassificationRequestCreateArgs>(args: SelectSubset<T, ReclassificationRequestCreateArgs<ExtArgs>>): Prisma__ReclassificationRequestClient<$Result.GetResult<Prisma.$ReclassificationRequestPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ReclassificationRequests.
     * @param {ReclassificationRequestCreateManyArgs} args - Arguments to create many ReclassificationRequests.
     * @example
     * // Create many ReclassificationRequests
     * const reclassificationRequest = await prisma.reclassificationRequest.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReclassificationRequestCreateManyArgs>(args?: SelectSubset<T, ReclassificationRequestCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReclassificationRequests and returns the data saved in the database.
     * @param {ReclassificationRequestCreateManyAndReturnArgs} args - Arguments to create many ReclassificationRequests.
     * @example
     * // Create many ReclassificationRequests
     * const reclassificationRequest = await prisma.reclassificationRequest.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReclassificationRequests and only return the `id`
     * const reclassificationRequestWithIdOnly = await prisma.reclassificationRequest.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReclassificationRequestCreateManyAndReturnArgs>(args?: SelectSubset<T, ReclassificationRequestCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReclassificationRequestPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ReclassificationRequest.
     * @param {ReclassificationRequestDeleteArgs} args - Arguments to delete one ReclassificationRequest.
     * @example
     * // Delete one ReclassificationRequest
     * const ReclassificationRequest = await prisma.reclassificationRequest.delete({
     *   where: {
     *     // ... filter to delete one ReclassificationRequest
     *   }
     * })
     * 
     */
    delete<T extends ReclassificationRequestDeleteArgs>(args: SelectSubset<T, ReclassificationRequestDeleteArgs<ExtArgs>>): Prisma__ReclassificationRequestClient<$Result.GetResult<Prisma.$ReclassificationRequestPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ReclassificationRequest.
     * @param {ReclassificationRequestUpdateArgs} args - Arguments to update one ReclassificationRequest.
     * @example
     * // Update one ReclassificationRequest
     * const reclassificationRequest = await prisma.reclassificationRequest.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReclassificationRequestUpdateArgs>(args: SelectSubset<T, ReclassificationRequestUpdateArgs<ExtArgs>>): Prisma__ReclassificationRequestClient<$Result.GetResult<Prisma.$ReclassificationRequestPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ReclassificationRequests.
     * @param {ReclassificationRequestDeleteManyArgs} args - Arguments to filter ReclassificationRequests to delete.
     * @example
     * // Delete a few ReclassificationRequests
     * const { count } = await prisma.reclassificationRequest.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReclassificationRequestDeleteManyArgs>(args?: SelectSubset<T, ReclassificationRequestDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReclassificationRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReclassificationRequestUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReclassificationRequests
     * const reclassificationRequest = await prisma.reclassificationRequest.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReclassificationRequestUpdateManyArgs>(args: SelectSubset<T, ReclassificationRequestUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReclassificationRequests and returns the data updated in the database.
     * @param {ReclassificationRequestUpdateManyAndReturnArgs} args - Arguments to update many ReclassificationRequests.
     * @example
     * // Update many ReclassificationRequests
     * const reclassificationRequest = await prisma.reclassificationRequest.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ReclassificationRequests and only return the `id`
     * const reclassificationRequestWithIdOnly = await prisma.reclassificationRequest.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReclassificationRequestUpdateManyAndReturnArgs>(args: SelectSubset<T, ReclassificationRequestUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReclassificationRequestPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ReclassificationRequest.
     * @param {ReclassificationRequestUpsertArgs} args - Arguments to update or create a ReclassificationRequest.
     * @example
     * // Update or create a ReclassificationRequest
     * const reclassificationRequest = await prisma.reclassificationRequest.upsert({
     *   create: {
     *     // ... data to create a ReclassificationRequest
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReclassificationRequest we want to update
     *   }
     * })
     */
    upsert<T extends ReclassificationRequestUpsertArgs>(args: SelectSubset<T, ReclassificationRequestUpsertArgs<ExtArgs>>): Prisma__ReclassificationRequestClient<$Result.GetResult<Prisma.$ReclassificationRequestPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ReclassificationRequests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReclassificationRequestCountArgs} args - Arguments to filter ReclassificationRequests to count.
     * @example
     * // Count the number of ReclassificationRequests
     * const count = await prisma.reclassificationRequest.count({
     *   where: {
     *     // ... the filter for the ReclassificationRequests we want to count
     *   }
     * })
    **/
    count<T extends ReclassificationRequestCountArgs>(
      args?: Subset<T, ReclassificationRequestCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReclassificationRequestCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReclassificationRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReclassificationRequestAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReclassificationRequestAggregateArgs>(args: Subset<T, ReclassificationRequestAggregateArgs>): Prisma.PrismaPromise<GetReclassificationRequestAggregateType<T>>

    /**
     * Group by ReclassificationRequest.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReclassificationRequestGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReclassificationRequestGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReclassificationRequestGroupByArgs['orderBy'] }
        : { orderBy?: ReclassificationRequestGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReclassificationRequestGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReclassificationRequestGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReclassificationRequest model
   */
  readonly fields: ReclassificationRequestFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReclassificationRequest.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReclassificationRequestClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    batch<T extends ACCUDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ACCUDefaultArgs<ExtArgs>>): Prisma__ACCUClient<$Result.GetResult<Prisma.$ACCUPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    submittedByUser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReclassificationRequest model
   */
  interface ReclassificationRequestFieldRefs {
    readonly id: FieldRef<"ReclassificationRequest", 'String'>
    readonly batchId: FieldRef<"ReclassificationRequest", 'String'>
    readonly fromClass: FieldRef<"ReclassificationRequest", 'Classification'>
    readonly toClass: FieldRef<"ReclassificationRequest", 'Classification'>
    readonly reason: FieldRef<"ReclassificationRequest", 'String'>
    readonly status: FieldRef<"ReclassificationRequest", 'ReclassificationStatus'>
    readonly submittedBy: FieldRef<"ReclassificationRequest", 'String'>
    readonly approvedBy: FieldRef<"ReclassificationRequest", 'String'>
    readonly timestamp: FieldRef<"ReclassificationRequest", 'DateTime'>
    readonly approvedAt: FieldRef<"ReclassificationRequest", 'DateTime'>
    readonly entityId: FieldRef<"ReclassificationRequest", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ReclassificationRequest findUnique
   */
  export type ReclassificationRequestFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReclassificationRequest
     */
    select?: ReclassificationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReclassificationRequest
     */
    omit?: ReclassificationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReclassificationRequestInclude<ExtArgs> | null
    /**
     * Filter, which ReclassificationRequest to fetch.
     */
    where: ReclassificationRequestWhereUniqueInput
  }

  /**
   * ReclassificationRequest findUniqueOrThrow
   */
  export type ReclassificationRequestFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReclassificationRequest
     */
    select?: ReclassificationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReclassificationRequest
     */
    omit?: ReclassificationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReclassificationRequestInclude<ExtArgs> | null
    /**
     * Filter, which ReclassificationRequest to fetch.
     */
    where: ReclassificationRequestWhereUniqueInput
  }

  /**
   * ReclassificationRequest findFirst
   */
  export type ReclassificationRequestFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReclassificationRequest
     */
    select?: ReclassificationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReclassificationRequest
     */
    omit?: ReclassificationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReclassificationRequestInclude<ExtArgs> | null
    /**
     * Filter, which ReclassificationRequest to fetch.
     */
    where?: ReclassificationRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReclassificationRequests to fetch.
     */
    orderBy?: ReclassificationRequestOrderByWithRelationInput | ReclassificationRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReclassificationRequests.
     */
    cursor?: ReclassificationRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReclassificationRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReclassificationRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReclassificationRequests.
     */
    distinct?: ReclassificationRequestScalarFieldEnum | ReclassificationRequestScalarFieldEnum[]
  }

  /**
   * ReclassificationRequest findFirstOrThrow
   */
  export type ReclassificationRequestFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReclassificationRequest
     */
    select?: ReclassificationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReclassificationRequest
     */
    omit?: ReclassificationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReclassificationRequestInclude<ExtArgs> | null
    /**
     * Filter, which ReclassificationRequest to fetch.
     */
    where?: ReclassificationRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReclassificationRequests to fetch.
     */
    orderBy?: ReclassificationRequestOrderByWithRelationInput | ReclassificationRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReclassificationRequests.
     */
    cursor?: ReclassificationRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReclassificationRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReclassificationRequests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReclassificationRequests.
     */
    distinct?: ReclassificationRequestScalarFieldEnum | ReclassificationRequestScalarFieldEnum[]
  }

  /**
   * ReclassificationRequest findMany
   */
  export type ReclassificationRequestFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReclassificationRequest
     */
    select?: ReclassificationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReclassificationRequest
     */
    omit?: ReclassificationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReclassificationRequestInclude<ExtArgs> | null
    /**
     * Filter, which ReclassificationRequests to fetch.
     */
    where?: ReclassificationRequestWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReclassificationRequests to fetch.
     */
    orderBy?: ReclassificationRequestOrderByWithRelationInput | ReclassificationRequestOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReclassificationRequests.
     */
    cursor?: ReclassificationRequestWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReclassificationRequests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReclassificationRequests.
     */
    skip?: number
    distinct?: ReclassificationRequestScalarFieldEnum | ReclassificationRequestScalarFieldEnum[]
  }

  /**
   * ReclassificationRequest create
   */
  export type ReclassificationRequestCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReclassificationRequest
     */
    select?: ReclassificationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReclassificationRequest
     */
    omit?: ReclassificationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReclassificationRequestInclude<ExtArgs> | null
    /**
     * The data needed to create a ReclassificationRequest.
     */
    data: XOR<ReclassificationRequestCreateInput, ReclassificationRequestUncheckedCreateInput>
  }

  /**
   * ReclassificationRequest createMany
   */
  export type ReclassificationRequestCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReclassificationRequests.
     */
    data: ReclassificationRequestCreateManyInput | ReclassificationRequestCreateManyInput[]
  }

  /**
   * ReclassificationRequest createManyAndReturn
   */
  export type ReclassificationRequestCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReclassificationRequest
     */
    select?: ReclassificationRequestSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReclassificationRequest
     */
    omit?: ReclassificationRequestOmit<ExtArgs> | null
    /**
     * The data used to create many ReclassificationRequests.
     */
    data: ReclassificationRequestCreateManyInput | ReclassificationRequestCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReclassificationRequestIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReclassificationRequest update
   */
  export type ReclassificationRequestUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReclassificationRequest
     */
    select?: ReclassificationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReclassificationRequest
     */
    omit?: ReclassificationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReclassificationRequestInclude<ExtArgs> | null
    /**
     * The data needed to update a ReclassificationRequest.
     */
    data: XOR<ReclassificationRequestUpdateInput, ReclassificationRequestUncheckedUpdateInput>
    /**
     * Choose, which ReclassificationRequest to update.
     */
    where: ReclassificationRequestWhereUniqueInput
  }

  /**
   * ReclassificationRequest updateMany
   */
  export type ReclassificationRequestUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReclassificationRequests.
     */
    data: XOR<ReclassificationRequestUpdateManyMutationInput, ReclassificationRequestUncheckedUpdateManyInput>
    /**
     * Filter which ReclassificationRequests to update
     */
    where?: ReclassificationRequestWhereInput
    /**
     * Limit how many ReclassificationRequests to update.
     */
    limit?: number
  }

  /**
   * ReclassificationRequest updateManyAndReturn
   */
  export type ReclassificationRequestUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReclassificationRequest
     */
    select?: ReclassificationRequestSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReclassificationRequest
     */
    omit?: ReclassificationRequestOmit<ExtArgs> | null
    /**
     * The data used to update ReclassificationRequests.
     */
    data: XOR<ReclassificationRequestUpdateManyMutationInput, ReclassificationRequestUncheckedUpdateManyInput>
    /**
     * Filter which ReclassificationRequests to update
     */
    where?: ReclassificationRequestWhereInput
    /**
     * Limit how many ReclassificationRequests to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReclassificationRequestIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReclassificationRequest upsert
   */
  export type ReclassificationRequestUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReclassificationRequest
     */
    select?: ReclassificationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReclassificationRequest
     */
    omit?: ReclassificationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReclassificationRequestInclude<ExtArgs> | null
    /**
     * The filter to search for the ReclassificationRequest to update in case it exists.
     */
    where: ReclassificationRequestWhereUniqueInput
    /**
     * In case the ReclassificationRequest found by the `where` argument doesn't exist, create a new ReclassificationRequest with this data.
     */
    create: XOR<ReclassificationRequestCreateInput, ReclassificationRequestUncheckedCreateInput>
    /**
     * In case the ReclassificationRequest was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReclassificationRequestUpdateInput, ReclassificationRequestUncheckedUpdateInput>
  }

  /**
   * ReclassificationRequest delete
   */
  export type ReclassificationRequestDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReclassificationRequest
     */
    select?: ReclassificationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReclassificationRequest
     */
    omit?: ReclassificationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReclassificationRequestInclude<ExtArgs> | null
    /**
     * Filter which ReclassificationRequest to delete.
     */
    where: ReclassificationRequestWhereUniqueInput
  }

  /**
   * ReclassificationRequest deleteMany
   */
  export type ReclassificationRequestDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReclassificationRequests to delete
     */
    where?: ReclassificationRequestWhereInput
    /**
     * Limit how many ReclassificationRequests to delete.
     */
    limit?: number
  }

  /**
   * ReclassificationRequest without action
   */
  export type ReclassificationRequestDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReclassificationRequest
     */
    select?: ReclassificationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReclassificationRequest
     */
    omit?: ReclassificationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReclassificationRequestInclude<ExtArgs> | null
  }


  /**
   * Model MarketPrice
   */

  export type AggregateMarketPrice = {
    _count: MarketPriceCountAggregateOutputType | null
    _avg: MarketPriceAvgAggregateOutputType | null
    _sum: MarketPriceSumAggregateOutputType | null
    _min: MarketPriceMinAggregateOutputType | null
    _max: MarketPriceMaxAggregateOutputType | null
  }

  export type MarketPriceAvgAggregateOutputType = {
    price: number | null
  }

  export type MarketPriceSumAggregateOutputType = {
    price: number | null
  }

  export type MarketPriceMinAggregateOutputType = {
    id: string | null
    date: Date | null
    commodityType: string | null
    price: number | null
    source: string | null
    createdAt: Date | null
    entityId: string | null
  }

  export type MarketPriceMaxAggregateOutputType = {
    id: string | null
    date: Date | null
    commodityType: string | null
    price: number | null
    source: string | null
    createdAt: Date | null
    entityId: string | null
  }

  export type MarketPriceCountAggregateOutputType = {
    id: number
    date: number
    commodityType: number
    price: number
    source: number
    createdAt: number
    entityId: number
    _all: number
  }


  export type MarketPriceAvgAggregateInputType = {
    price?: true
  }

  export type MarketPriceSumAggregateInputType = {
    price?: true
  }

  export type MarketPriceMinAggregateInputType = {
    id?: true
    date?: true
    commodityType?: true
    price?: true
    source?: true
    createdAt?: true
    entityId?: true
  }

  export type MarketPriceMaxAggregateInputType = {
    id?: true
    date?: true
    commodityType?: true
    price?: true
    source?: true
    createdAt?: true
    entityId?: true
  }

  export type MarketPriceCountAggregateInputType = {
    id?: true
    date?: true
    commodityType?: true
    price?: true
    source?: true
    createdAt?: true
    entityId?: true
    _all?: true
  }

  export type MarketPriceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MarketPrice to aggregate.
     */
    where?: MarketPriceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarketPrices to fetch.
     */
    orderBy?: MarketPriceOrderByWithRelationInput | MarketPriceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MarketPriceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarketPrices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarketPrices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned MarketPrices
    **/
    _count?: true | MarketPriceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MarketPriceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MarketPriceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MarketPriceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MarketPriceMaxAggregateInputType
  }

  export type GetMarketPriceAggregateType<T extends MarketPriceAggregateArgs> = {
        [P in keyof T & keyof AggregateMarketPrice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMarketPrice[P]>
      : GetScalarType<T[P], AggregateMarketPrice[P]>
  }




  export type MarketPriceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MarketPriceWhereInput
    orderBy?: MarketPriceOrderByWithAggregationInput | MarketPriceOrderByWithAggregationInput[]
    by: MarketPriceScalarFieldEnum[] | MarketPriceScalarFieldEnum
    having?: MarketPriceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MarketPriceCountAggregateInputType | true
    _avg?: MarketPriceAvgAggregateInputType
    _sum?: MarketPriceSumAggregateInputType
    _min?: MarketPriceMinAggregateInputType
    _max?: MarketPriceMaxAggregateInputType
  }

  export type MarketPriceGroupByOutputType = {
    id: string
    date: Date
    commodityType: string
    price: number
    source: string
    createdAt: Date
    entityId: string
    _count: MarketPriceCountAggregateOutputType | null
    _avg: MarketPriceAvgAggregateOutputType | null
    _sum: MarketPriceSumAggregateOutputType | null
    _min: MarketPriceMinAggregateOutputType | null
    _max: MarketPriceMaxAggregateOutputType | null
  }

  type GetMarketPriceGroupByPayload<T extends MarketPriceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MarketPriceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MarketPriceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MarketPriceGroupByOutputType[P]>
            : GetScalarType<T[P], MarketPriceGroupByOutputType[P]>
        }
      >
    >


  export type MarketPriceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    commodityType?: boolean
    price?: boolean
    source?: boolean
    createdAt?: boolean
    entityId?: boolean
  }, ExtArgs["result"]["marketPrice"]>

  export type MarketPriceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    commodityType?: boolean
    price?: boolean
    source?: boolean
    createdAt?: boolean
    entityId?: boolean
  }, ExtArgs["result"]["marketPrice"]>

  export type MarketPriceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    commodityType?: boolean
    price?: boolean
    source?: boolean
    createdAt?: boolean
    entityId?: boolean
  }, ExtArgs["result"]["marketPrice"]>

  export type MarketPriceSelectScalar = {
    id?: boolean
    date?: boolean
    commodityType?: boolean
    price?: boolean
    source?: boolean
    createdAt?: boolean
    entityId?: boolean
  }

  export type MarketPriceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "date" | "commodityType" | "price" | "source" | "createdAt" | "entityId", ExtArgs["result"]["marketPrice"]>

  export type $MarketPricePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "MarketPrice"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      date: Date
      commodityType: string
      price: number
      source: string
      createdAt: Date
      entityId: string
    }, ExtArgs["result"]["marketPrice"]>
    composites: {}
  }

  type MarketPriceGetPayload<S extends boolean | null | undefined | MarketPriceDefaultArgs> = $Result.GetResult<Prisma.$MarketPricePayload, S>

  type MarketPriceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MarketPriceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MarketPriceCountAggregateInputType | true
    }

  export interface MarketPriceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['MarketPrice'], meta: { name: 'MarketPrice' } }
    /**
     * Find zero or one MarketPrice that matches the filter.
     * @param {MarketPriceFindUniqueArgs} args - Arguments to find a MarketPrice
     * @example
     * // Get one MarketPrice
     * const marketPrice = await prisma.marketPrice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MarketPriceFindUniqueArgs>(args: SelectSubset<T, MarketPriceFindUniqueArgs<ExtArgs>>): Prisma__MarketPriceClient<$Result.GetResult<Prisma.$MarketPricePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one MarketPrice that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MarketPriceFindUniqueOrThrowArgs} args - Arguments to find a MarketPrice
     * @example
     * // Get one MarketPrice
     * const marketPrice = await prisma.marketPrice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MarketPriceFindUniqueOrThrowArgs>(args: SelectSubset<T, MarketPriceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MarketPriceClient<$Result.GetResult<Prisma.$MarketPricePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MarketPrice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketPriceFindFirstArgs} args - Arguments to find a MarketPrice
     * @example
     * // Get one MarketPrice
     * const marketPrice = await prisma.marketPrice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MarketPriceFindFirstArgs>(args?: SelectSubset<T, MarketPriceFindFirstArgs<ExtArgs>>): Prisma__MarketPriceClient<$Result.GetResult<Prisma.$MarketPricePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first MarketPrice that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketPriceFindFirstOrThrowArgs} args - Arguments to find a MarketPrice
     * @example
     * // Get one MarketPrice
     * const marketPrice = await prisma.marketPrice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MarketPriceFindFirstOrThrowArgs>(args?: SelectSubset<T, MarketPriceFindFirstOrThrowArgs<ExtArgs>>): Prisma__MarketPriceClient<$Result.GetResult<Prisma.$MarketPricePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more MarketPrices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketPriceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all MarketPrices
     * const marketPrices = await prisma.marketPrice.findMany()
     * 
     * // Get first 10 MarketPrices
     * const marketPrices = await prisma.marketPrice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const marketPriceWithIdOnly = await prisma.marketPrice.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MarketPriceFindManyArgs>(args?: SelectSubset<T, MarketPriceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarketPricePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a MarketPrice.
     * @param {MarketPriceCreateArgs} args - Arguments to create a MarketPrice.
     * @example
     * // Create one MarketPrice
     * const MarketPrice = await prisma.marketPrice.create({
     *   data: {
     *     // ... data to create a MarketPrice
     *   }
     * })
     * 
     */
    create<T extends MarketPriceCreateArgs>(args: SelectSubset<T, MarketPriceCreateArgs<ExtArgs>>): Prisma__MarketPriceClient<$Result.GetResult<Prisma.$MarketPricePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many MarketPrices.
     * @param {MarketPriceCreateManyArgs} args - Arguments to create many MarketPrices.
     * @example
     * // Create many MarketPrices
     * const marketPrice = await prisma.marketPrice.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MarketPriceCreateManyArgs>(args?: SelectSubset<T, MarketPriceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many MarketPrices and returns the data saved in the database.
     * @param {MarketPriceCreateManyAndReturnArgs} args - Arguments to create many MarketPrices.
     * @example
     * // Create many MarketPrices
     * const marketPrice = await prisma.marketPrice.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many MarketPrices and only return the `id`
     * const marketPriceWithIdOnly = await prisma.marketPrice.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MarketPriceCreateManyAndReturnArgs>(args?: SelectSubset<T, MarketPriceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarketPricePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a MarketPrice.
     * @param {MarketPriceDeleteArgs} args - Arguments to delete one MarketPrice.
     * @example
     * // Delete one MarketPrice
     * const MarketPrice = await prisma.marketPrice.delete({
     *   where: {
     *     // ... filter to delete one MarketPrice
     *   }
     * })
     * 
     */
    delete<T extends MarketPriceDeleteArgs>(args: SelectSubset<T, MarketPriceDeleteArgs<ExtArgs>>): Prisma__MarketPriceClient<$Result.GetResult<Prisma.$MarketPricePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one MarketPrice.
     * @param {MarketPriceUpdateArgs} args - Arguments to update one MarketPrice.
     * @example
     * // Update one MarketPrice
     * const marketPrice = await prisma.marketPrice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MarketPriceUpdateArgs>(args: SelectSubset<T, MarketPriceUpdateArgs<ExtArgs>>): Prisma__MarketPriceClient<$Result.GetResult<Prisma.$MarketPricePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more MarketPrices.
     * @param {MarketPriceDeleteManyArgs} args - Arguments to filter MarketPrices to delete.
     * @example
     * // Delete a few MarketPrices
     * const { count } = await prisma.marketPrice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MarketPriceDeleteManyArgs>(args?: SelectSubset<T, MarketPriceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MarketPrices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketPriceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many MarketPrices
     * const marketPrice = await prisma.marketPrice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MarketPriceUpdateManyArgs>(args: SelectSubset<T, MarketPriceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more MarketPrices and returns the data updated in the database.
     * @param {MarketPriceUpdateManyAndReturnArgs} args - Arguments to update many MarketPrices.
     * @example
     * // Update many MarketPrices
     * const marketPrice = await prisma.marketPrice.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more MarketPrices and only return the `id`
     * const marketPriceWithIdOnly = await prisma.marketPrice.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MarketPriceUpdateManyAndReturnArgs>(args: SelectSubset<T, MarketPriceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MarketPricePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one MarketPrice.
     * @param {MarketPriceUpsertArgs} args - Arguments to update or create a MarketPrice.
     * @example
     * // Update or create a MarketPrice
     * const marketPrice = await prisma.marketPrice.upsert({
     *   create: {
     *     // ... data to create a MarketPrice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the MarketPrice we want to update
     *   }
     * })
     */
    upsert<T extends MarketPriceUpsertArgs>(args: SelectSubset<T, MarketPriceUpsertArgs<ExtArgs>>): Prisma__MarketPriceClient<$Result.GetResult<Prisma.$MarketPricePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of MarketPrices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketPriceCountArgs} args - Arguments to filter MarketPrices to count.
     * @example
     * // Count the number of MarketPrices
     * const count = await prisma.marketPrice.count({
     *   where: {
     *     // ... the filter for the MarketPrices we want to count
     *   }
     * })
    **/
    count<T extends MarketPriceCountArgs>(
      args?: Subset<T, MarketPriceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MarketPriceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a MarketPrice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketPriceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MarketPriceAggregateArgs>(args: Subset<T, MarketPriceAggregateArgs>): Prisma.PrismaPromise<GetMarketPriceAggregateType<T>>

    /**
     * Group by MarketPrice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MarketPriceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MarketPriceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MarketPriceGroupByArgs['orderBy'] }
        : { orderBy?: MarketPriceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MarketPriceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMarketPriceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the MarketPrice model
   */
  readonly fields: MarketPriceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for MarketPrice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MarketPriceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the MarketPrice model
   */
  interface MarketPriceFieldRefs {
    readonly id: FieldRef<"MarketPrice", 'String'>
    readonly date: FieldRef<"MarketPrice", 'DateTime'>
    readonly commodityType: FieldRef<"MarketPrice", 'String'>
    readonly price: FieldRef<"MarketPrice", 'Float'>
    readonly source: FieldRef<"MarketPrice", 'String'>
    readonly createdAt: FieldRef<"MarketPrice", 'DateTime'>
    readonly entityId: FieldRef<"MarketPrice", 'String'>
  }
    

  // Custom InputTypes
  /**
   * MarketPrice findUnique
   */
  export type MarketPriceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketPrice
     */
    select?: MarketPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketPrice
     */
    omit?: MarketPriceOmit<ExtArgs> | null
    /**
     * Filter, which MarketPrice to fetch.
     */
    where: MarketPriceWhereUniqueInput
  }

  /**
   * MarketPrice findUniqueOrThrow
   */
  export type MarketPriceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketPrice
     */
    select?: MarketPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketPrice
     */
    omit?: MarketPriceOmit<ExtArgs> | null
    /**
     * Filter, which MarketPrice to fetch.
     */
    where: MarketPriceWhereUniqueInput
  }

  /**
   * MarketPrice findFirst
   */
  export type MarketPriceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketPrice
     */
    select?: MarketPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketPrice
     */
    omit?: MarketPriceOmit<ExtArgs> | null
    /**
     * Filter, which MarketPrice to fetch.
     */
    where?: MarketPriceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarketPrices to fetch.
     */
    orderBy?: MarketPriceOrderByWithRelationInput | MarketPriceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MarketPrices.
     */
    cursor?: MarketPriceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarketPrices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarketPrices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MarketPrices.
     */
    distinct?: MarketPriceScalarFieldEnum | MarketPriceScalarFieldEnum[]
  }

  /**
   * MarketPrice findFirstOrThrow
   */
  export type MarketPriceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketPrice
     */
    select?: MarketPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketPrice
     */
    omit?: MarketPriceOmit<ExtArgs> | null
    /**
     * Filter, which MarketPrice to fetch.
     */
    where?: MarketPriceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarketPrices to fetch.
     */
    orderBy?: MarketPriceOrderByWithRelationInput | MarketPriceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for MarketPrices.
     */
    cursor?: MarketPriceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarketPrices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarketPrices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of MarketPrices.
     */
    distinct?: MarketPriceScalarFieldEnum | MarketPriceScalarFieldEnum[]
  }

  /**
   * MarketPrice findMany
   */
  export type MarketPriceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketPrice
     */
    select?: MarketPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketPrice
     */
    omit?: MarketPriceOmit<ExtArgs> | null
    /**
     * Filter, which MarketPrices to fetch.
     */
    where?: MarketPriceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of MarketPrices to fetch.
     */
    orderBy?: MarketPriceOrderByWithRelationInput | MarketPriceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing MarketPrices.
     */
    cursor?: MarketPriceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` MarketPrices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` MarketPrices.
     */
    skip?: number
    distinct?: MarketPriceScalarFieldEnum | MarketPriceScalarFieldEnum[]
  }

  /**
   * MarketPrice create
   */
  export type MarketPriceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketPrice
     */
    select?: MarketPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketPrice
     */
    omit?: MarketPriceOmit<ExtArgs> | null
    /**
     * The data needed to create a MarketPrice.
     */
    data: XOR<MarketPriceCreateInput, MarketPriceUncheckedCreateInput>
  }

  /**
   * MarketPrice createMany
   */
  export type MarketPriceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many MarketPrices.
     */
    data: MarketPriceCreateManyInput | MarketPriceCreateManyInput[]
  }

  /**
   * MarketPrice createManyAndReturn
   */
  export type MarketPriceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketPrice
     */
    select?: MarketPriceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MarketPrice
     */
    omit?: MarketPriceOmit<ExtArgs> | null
    /**
     * The data used to create many MarketPrices.
     */
    data: MarketPriceCreateManyInput | MarketPriceCreateManyInput[]
  }

  /**
   * MarketPrice update
   */
  export type MarketPriceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketPrice
     */
    select?: MarketPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketPrice
     */
    omit?: MarketPriceOmit<ExtArgs> | null
    /**
     * The data needed to update a MarketPrice.
     */
    data: XOR<MarketPriceUpdateInput, MarketPriceUncheckedUpdateInput>
    /**
     * Choose, which MarketPrice to update.
     */
    where: MarketPriceWhereUniqueInput
  }

  /**
   * MarketPrice updateMany
   */
  export type MarketPriceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update MarketPrices.
     */
    data: XOR<MarketPriceUpdateManyMutationInput, MarketPriceUncheckedUpdateManyInput>
    /**
     * Filter which MarketPrices to update
     */
    where?: MarketPriceWhereInput
    /**
     * Limit how many MarketPrices to update.
     */
    limit?: number
  }

  /**
   * MarketPrice updateManyAndReturn
   */
  export type MarketPriceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketPrice
     */
    select?: MarketPriceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the MarketPrice
     */
    omit?: MarketPriceOmit<ExtArgs> | null
    /**
     * The data used to update MarketPrices.
     */
    data: XOR<MarketPriceUpdateManyMutationInput, MarketPriceUncheckedUpdateManyInput>
    /**
     * Filter which MarketPrices to update
     */
    where?: MarketPriceWhereInput
    /**
     * Limit how many MarketPrices to update.
     */
    limit?: number
  }

  /**
   * MarketPrice upsert
   */
  export type MarketPriceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketPrice
     */
    select?: MarketPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketPrice
     */
    omit?: MarketPriceOmit<ExtArgs> | null
    /**
     * The filter to search for the MarketPrice to update in case it exists.
     */
    where: MarketPriceWhereUniqueInput
    /**
     * In case the MarketPrice found by the `where` argument doesn't exist, create a new MarketPrice with this data.
     */
    create: XOR<MarketPriceCreateInput, MarketPriceUncheckedCreateInput>
    /**
     * In case the MarketPrice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MarketPriceUpdateInput, MarketPriceUncheckedUpdateInput>
  }

  /**
   * MarketPrice delete
   */
  export type MarketPriceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketPrice
     */
    select?: MarketPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketPrice
     */
    omit?: MarketPriceOmit<ExtArgs> | null
    /**
     * Filter which MarketPrice to delete.
     */
    where: MarketPriceWhereUniqueInput
  }

  /**
   * MarketPrice deleteMany
   */
  export type MarketPriceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which MarketPrices to delete
     */
    where?: MarketPriceWhereInput
    /**
     * Limit how many MarketPrices to delete.
     */
    limit?: number
  }

  /**
   * MarketPrice without action
   */
  export type MarketPriceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MarketPrice
     */
    select?: MarketPriceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the MarketPrice
     */
    omit?: MarketPriceOmit<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    roles: string | null
    createdAt: Date | null
    updatedAt: Date | null
    entityId: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    roles: string | null
    createdAt: Date | null
    updatedAt: Date | null
    entityId: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    roles: number
    preferences: number
    createdAt: number
    updatedAt: number
    entityId: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    roles?: true
    createdAt?: true
    updatedAt?: true
    entityId?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    roles?: true
    createdAt?: true
    updatedAt?: true
    entityId?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    roles?: true
    preferences?: true
    createdAt?: true
    updatedAt?: true
    entityId?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    roles: string
    preferences: JsonValue | null
    createdAt: Date
    updatedAt: Date
    entityId: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    roles?: boolean
    preferences?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    entityId?: boolean
    batches?: boolean | User$batchesArgs<ExtArgs>
    valuationLogs?: boolean | User$valuationLogsArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    journalEntries?: boolean | User$journalEntriesArgs<ExtArgs>
    reclassRequests?: boolean | User$reclassRequestsArgs<ExtArgs>
    settings?: boolean | User$settingsArgs<ExtArgs>
    xbrlTags?: boolean | User$xbrlTagsArgs<ExtArgs>
    importJobs?: boolean | User$importJobsArgs<ExtArgs>
    entity?: boolean | User$entityArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    roles?: boolean
    preferences?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    entityId?: boolean
    entity?: boolean | User$entityArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    roles?: boolean
    preferences?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    entityId?: boolean
    entity?: boolean | User$entityArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    roles?: boolean
    preferences?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    entityId?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "roles" | "preferences" | "createdAt" | "updatedAt" | "entityId", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    batches?: boolean | User$batchesArgs<ExtArgs>
    valuationLogs?: boolean | User$valuationLogsArgs<ExtArgs>
    auditLogs?: boolean | User$auditLogsArgs<ExtArgs>
    journalEntries?: boolean | User$journalEntriesArgs<ExtArgs>
    reclassRequests?: boolean | User$reclassRequestsArgs<ExtArgs>
    settings?: boolean | User$settingsArgs<ExtArgs>
    xbrlTags?: boolean | User$xbrlTagsArgs<ExtArgs>
    importJobs?: boolean | User$importJobsArgs<ExtArgs>
    entity?: boolean | User$entityArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    entity?: boolean | User$entityArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    entity?: boolean | User$entityArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      batches: Prisma.$ACCUPayload<ExtArgs>[]
      valuationLogs: Prisma.$ValuationLogPayload<ExtArgs>[]
      auditLogs: Prisma.$AuditLogEntryPayload<ExtArgs>[]
      journalEntries: Prisma.$JournalEntryPayload<ExtArgs>[]
      reclassRequests: Prisma.$ReclassificationRequestPayload<ExtArgs>[]
      settings: Prisma.$UserSettingPayload<ExtArgs>[]
      xbrlTags: Prisma.$XbrlTagPayload<ExtArgs>[]
      importJobs: Prisma.$ImportJobPayload<ExtArgs>[]
      entity: Prisma.$EntityPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      roles: string
      preferences: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
      entityId: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    batches<T extends User$batchesArgs<ExtArgs> = {}>(args?: Subset<T, User$batchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ACCUPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    valuationLogs<T extends User$valuationLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$valuationLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ValuationLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    auditLogs<T extends User$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, User$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogEntryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    journalEntries<T extends User$journalEntriesArgs<ExtArgs> = {}>(args?: Subset<T, User$journalEntriesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$JournalEntryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reclassRequests<T extends User$reclassRequestsArgs<ExtArgs> = {}>(args?: Subset<T, User$reclassRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReclassificationRequestPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    settings<T extends User$settingsArgs<ExtArgs> = {}>(args?: Subset<T, User$settingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSettingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    xbrlTags<T extends User$xbrlTagsArgs<ExtArgs> = {}>(args?: Subset<T, User$xbrlTagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$XbrlTagPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    importJobs<T extends User$importJobsArgs<ExtArgs> = {}>(args?: Subset<T, User$importJobsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImportJobPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    entity<T extends User$entityArgs<ExtArgs> = {}>(args?: Subset<T, User$entityArgs<ExtArgs>>): Prisma__EntityClient<$Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly roles: FieldRef<"User", 'String'>
    readonly preferences: FieldRef<"User", 'Json'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly entityId: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.batches
   */
  export type User$batchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ACCU
     */
    select?: ACCUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ACCU
     */
    omit?: ACCUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ACCUInclude<ExtArgs> | null
    where?: ACCUWhereInput
    orderBy?: ACCUOrderByWithRelationInput | ACCUOrderByWithRelationInput[]
    cursor?: ACCUWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ACCUScalarFieldEnum | ACCUScalarFieldEnum[]
  }

  /**
   * User.valuationLogs
   */
  export type User$valuationLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValuationLog
     */
    select?: ValuationLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ValuationLog
     */
    omit?: ValuationLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValuationLogInclude<ExtArgs> | null
    where?: ValuationLogWhereInput
    orderBy?: ValuationLogOrderByWithRelationInput | ValuationLogOrderByWithRelationInput[]
    cursor?: ValuationLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ValuationLogScalarFieldEnum | ValuationLogScalarFieldEnum[]
  }

  /**
   * User.auditLogs
   */
  export type User$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLogEntry
     */
    select?: AuditLogEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the AuditLogEntry
     */
    omit?: AuditLogEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogEntryInclude<ExtArgs> | null
    where?: AuditLogEntryWhereInput
    orderBy?: AuditLogEntryOrderByWithRelationInput | AuditLogEntryOrderByWithRelationInput[]
    cursor?: AuditLogEntryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogEntryScalarFieldEnum | AuditLogEntryScalarFieldEnum[]
  }

  /**
   * User.journalEntries
   */
  export type User$journalEntriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the JournalEntry
     */
    select?: JournalEntrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the JournalEntry
     */
    omit?: JournalEntryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: JournalEntryInclude<ExtArgs> | null
    where?: JournalEntryWhereInput
    orderBy?: JournalEntryOrderByWithRelationInput | JournalEntryOrderByWithRelationInput[]
    cursor?: JournalEntryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: JournalEntryScalarFieldEnum | JournalEntryScalarFieldEnum[]
  }

  /**
   * User.reclassRequests
   */
  export type User$reclassRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReclassificationRequest
     */
    select?: ReclassificationRequestSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReclassificationRequest
     */
    omit?: ReclassificationRequestOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReclassificationRequestInclude<ExtArgs> | null
    where?: ReclassificationRequestWhereInput
    orderBy?: ReclassificationRequestOrderByWithRelationInput | ReclassificationRequestOrderByWithRelationInput[]
    cursor?: ReclassificationRequestWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReclassificationRequestScalarFieldEnum | ReclassificationRequestScalarFieldEnum[]
  }

  /**
   * User.settings
   */
  export type User$settingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSetting
     */
    select?: UserSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSetting
     */
    omit?: UserSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingInclude<ExtArgs> | null
    where?: UserSettingWhereInput
    orderBy?: UserSettingOrderByWithRelationInput | UserSettingOrderByWithRelationInput[]
    cursor?: UserSettingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserSettingScalarFieldEnum | UserSettingScalarFieldEnum[]
  }

  /**
   * User.xbrlTags
   */
  export type User$xbrlTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the XbrlTag
     */
    select?: XbrlTagSelect<ExtArgs> | null
    /**
     * Omit specific fields from the XbrlTag
     */
    omit?: XbrlTagOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: XbrlTagInclude<ExtArgs> | null
    where?: XbrlTagWhereInput
    orderBy?: XbrlTagOrderByWithRelationInput | XbrlTagOrderByWithRelationInput[]
    cursor?: XbrlTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: XbrlTagScalarFieldEnum | XbrlTagScalarFieldEnum[]
  }

  /**
   * User.importJobs
   */
  export type User$importJobsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImportJob
     */
    select?: ImportJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ImportJob
     */
    omit?: ImportJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImportJobInclude<ExtArgs> | null
    where?: ImportJobWhereInput
    orderBy?: ImportJobOrderByWithRelationInput | ImportJobOrderByWithRelationInput[]
    cursor?: ImportJobWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ImportJobScalarFieldEnum | ImportJobScalarFieldEnum[]
  }

  /**
   * User.entity
   */
  export type User$entityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entity
     */
    select?: EntitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Entity
     */
    omit?: EntityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityInclude<ExtArgs> | null
    where?: EntityWhereInput
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model UserSetting
   */

  export type AggregateUserSetting = {
    _count: UserSettingCountAggregateOutputType | null
    _min: UserSettingMinAggregateOutputType | null
    _max: UserSettingMaxAggregateOutputType | null
  }

  export type UserSettingMinAggregateOutputType = {
    id: string | null
    userId: string | null
    roles: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserSettingMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    roles: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserSettingCountAggregateOutputType = {
    id: number
    userId: number
    roles: number
    preferences: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserSettingMinAggregateInputType = {
    id?: true
    userId?: true
    roles?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserSettingMaxAggregateInputType = {
    id?: true
    userId?: true
    roles?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserSettingCountAggregateInputType = {
    id?: true
    userId?: true
    roles?: true
    preferences?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserSettingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSetting to aggregate.
     */
    where?: UserSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSettings to fetch.
     */
    orderBy?: UserSettingOrderByWithRelationInput | UserSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserSettings
    **/
    _count?: true | UserSettingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserSettingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserSettingMaxAggregateInputType
  }

  export type GetUserSettingAggregateType<T extends UserSettingAggregateArgs> = {
        [P in keyof T & keyof AggregateUserSetting]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserSetting[P]>
      : GetScalarType<T[P], AggregateUserSetting[P]>
  }




  export type UserSettingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserSettingWhereInput
    orderBy?: UserSettingOrderByWithAggregationInput | UserSettingOrderByWithAggregationInput[]
    by: UserSettingScalarFieldEnum[] | UserSettingScalarFieldEnum
    having?: UserSettingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserSettingCountAggregateInputType | true
    _min?: UserSettingMinAggregateInputType
    _max?: UserSettingMaxAggregateInputType
  }

  export type UserSettingGroupByOutputType = {
    id: string
    userId: string
    roles: string
    preferences: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: UserSettingCountAggregateOutputType | null
    _min: UserSettingMinAggregateOutputType | null
    _max: UserSettingMaxAggregateOutputType | null
  }

  type GetUserSettingGroupByPayload<T extends UserSettingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserSettingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserSettingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserSettingGroupByOutputType[P]>
            : GetScalarType<T[P], UserSettingGroupByOutputType[P]>
        }
      >
    >


  export type UserSettingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    roles?: boolean
    preferences?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSetting"]>

  export type UserSettingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    roles?: boolean
    preferences?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSetting"]>

  export type UserSettingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    roles?: boolean
    preferences?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userSetting"]>

  export type UserSettingSelectScalar = {
    id?: boolean
    userId?: boolean
    roles?: boolean
    preferences?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserSettingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "roles" | "preferences" | "createdAt" | "updatedAt", ExtArgs["result"]["userSetting"]>
  export type UserSettingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserSettingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UserSettingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UserSettingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserSetting"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      roles: string
      preferences: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["userSetting"]>
    composites: {}
  }

  type UserSettingGetPayload<S extends boolean | null | undefined | UserSettingDefaultArgs> = $Result.GetResult<Prisma.$UserSettingPayload, S>

  type UserSettingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserSettingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserSettingCountAggregateInputType | true
    }

  export interface UserSettingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserSetting'], meta: { name: 'UserSetting' } }
    /**
     * Find zero or one UserSetting that matches the filter.
     * @param {UserSettingFindUniqueArgs} args - Arguments to find a UserSetting
     * @example
     * // Get one UserSetting
     * const userSetting = await prisma.userSetting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserSettingFindUniqueArgs>(args: SelectSubset<T, UserSettingFindUniqueArgs<ExtArgs>>): Prisma__UserSettingClient<$Result.GetResult<Prisma.$UserSettingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserSetting that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserSettingFindUniqueOrThrowArgs} args - Arguments to find a UserSetting
     * @example
     * // Get one UserSetting
     * const userSetting = await prisma.userSetting.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserSettingFindUniqueOrThrowArgs>(args: SelectSubset<T, UserSettingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserSettingClient<$Result.GetResult<Prisma.$UserSettingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserSetting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingFindFirstArgs} args - Arguments to find a UserSetting
     * @example
     * // Get one UserSetting
     * const userSetting = await prisma.userSetting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserSettingFindFirstArgs>(args?: SelectSubset<T, UserSettingFindFirstArgs<ExtArgs>>): Prisma__UserSettingClient<$Result.GetResult<Prisma.$UserSettingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserSetting that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingFindFirstOrThrowArgs} args - Arguments to find a UserSetting
     * @example
     * // Get one UserSetting
     * const userSetting = await prisma.userSetting.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserSettingFindFirstOrThrowArgs>(args?: SelectSubset<T, UserSettingFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserSettingClient<$Result.GetResult<Prisma.$UserSettingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserSettings
     * const userSettings = await prisma.userSetting.findMany()
     * 
     * // Get first 10 UserSettings
     * const userSettings = await prisma.userSetting.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userSettingWithIdOnly = await prisma.userSetting.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserSettingFindManyArgs>(args?: SelectSubset<T, UserSettingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSettingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserSetting.
     * @param {UserSettingCreateArgs} args - Arguments to create a UserSetting.
     * @example
     * // Create one UserSetting
     * const UserSetting = await prisma.userSetting.create({
     *   data: {
     *     // ... data to create a UserSetting
     *   }
     * })
     * 
     */
    create<T extends UserSettingCreateArgs>(args: SelectSubset<T, UserSettingCreateArgs<ExtArgs>>): Prisma__UserSettingClient<$Result.GetResult<Prisma.$UserSettingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserSettings.
     * @param {UserSettingCreateManyArgs} args - Arguments to create many UserSettings.
     * @example
     * // Create many UserSettings
     * const userSetting = await prisma.userSetting.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserSettingCreateManyArgs>(args?: SelectSubset<T, UserSettingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserSettings and returns the data saved in the database.
     * @param {UserSettingCreateManyAndReturnArgs} args - Arguments to create many UserSettings.
     * @example
     * // Create many UserSettings
     * const userSetting = await prisma.userSetting.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserSettings and only return the `id`
     * const userSettingWithIdOnly = await prisma.userSetting.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserSettingCreateManyAndReturnArgs>(args?: SelectSubset<T, UserSettingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSettingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserSetting.
     * @param {UserSettingDeleteArgs} args - Arguments to delete one UserSetting.
     * @example
     * // Delete one UserSetting
     * const UserSetting = await prisma.userSetting.delete({
     *   where: {
     *     // ... filter to delete one UserSetting
     *   }
     * })
     * 
     */
    delete<T extends UserSettingDeleteArgs>(args: SelectSubset<T, UserSettingDeleteArgs<ExtArgs>>): Prisma__UserSettingClient<$Result.GetResult<Prisma.$UserSettingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserSetting.
     * @param {UserSettingUpdateArgs} args - Arguments to update one UserSetting.
     * @example
     * // Update one UserSetting
     * const userSetting = await prisma.userSetting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserSettingUpdateArgs>(args: SelectSubset<T, UserSettingUpdateArgs<ExtArgs>>): Prisma__UserSettingClient<$Result.GetResult<Prisma.$UserSettingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserSettings.
     * @param {UserSettingDeleteManyArgs} args - Arguments to filter UserSettings to delete.
     * @example
     * // Delete a few UserSettings
     * const { count } = await prisma.userSetting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserSettingDeleteManyArgs>(args?: SelectSubset<T, UserSettingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserSettings
     * const userSetting = await prisma.userSetting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserSettingUpdateManyArgs>(args: SelectSubset<T, UserSettingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserSettings and returns the data updated in the database.
     * @param {UserSettingUpdateManyAndReturnArgs} args - Arguments to update many UserSettings.
     * @example
     * // Update many UserSettings
     * const userSetting = await prisma.userSetting.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserSettings and only return the `id`
     * const userSettingWithIdOnly = await prisma.userSetting.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserSettingUpdateManyAndReturnArgs>(args: SelectSubset<T, UserSettingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSettingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserSetting.
     * @param {UserSettingUpsertArgs} args - Arguments to update or create a UserSetting.
     * @example
     * // Update or create a UserSetting
     * const userSetting = await prisma.userSetting.upsert({
     *   create: {
     *     // ... data to create a UserSetting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserSetting we want to update
     *   }
     * })
     */
    upsert<T extends UserSettingUpsertArgs>(args: SelectSubset<T, UserSettingUpsertArgs<ExtArgs>>): Prisma__UserSettingClient<$Result.GetResult<Prisma.$UserSettingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingCountArgs} args - Arguments to filter UserSettings to count.
     * @example
     * // Count the number of UserSettings
     * const count = await prisma.userSetting.count({
     *   where: {
     *     // ... the filter for the UserSettings we want to count
     *   }
     * })
    **/
    count<T extends UserSettingCountArgs>(
      args?: Subset<T, UserSettingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserSettingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserSetting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserSettingAggregateArgs>(args: Subset<T, UserSettingAggregateArgs>): Prisma.PrismaPromise<GetUserSettingAggregateType<T>>

    /**
     * Group by UserSetting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserSettingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserSettingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserSettingGroupByArgs['orderBy'] }
        : { orderBy?: UserSettingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserSettingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserSettingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserSetting model
   */
  readonly fields: UserSettingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserSetting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserSettingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserSetting model
   */
  interface UserSettingFieldRefs {
    readonly id: FieldRef<"UserSetting", 'String'>
    readonly userId: FieldRef<"UserSetting", 'String'>
    readonly roles: FieldRef<"UserSetting", 'String'>
    readonly preferences: FieldRef<"UserSetting", 'Json'>
    readonly createdAt: FieldRef<"UserSetting", 'DateTime'>
    readonly updatedAt: FieldRef<"UserSetting", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UserSetting findUnique
   */
  export type UserSettingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSetting
     */
    select?: UserSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSetting
     */
    omit?: UserSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingInclude<ExtArgs> | null
    /**
     * Filter, which UserSetting to fetch.
     */
    where: UserSettingWhereUniqueInput
  }

  /**
   * UserSetting findUniqueOrThrow
   */
  export type UserSettingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSetting
     */
    select?: UserSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSetting
     */
    omit?: UserSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingInclude<ExtArgs> | null
    /**
     * Filter, which UserSetting to fetch.
     */
    where: UserSettingWhereUniqueInput
  }

  /**
   * UserSetting findFirst
   */
  export type UserSettingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSetting
     */
    select?: UserSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSetting
     */
    omit?: UserSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingInclude<ExtArgs> | null
    /**
     * Filter, which UserSetting to fetch.
     */
    where?: UserSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSettings to fetch.
     */
    orderBy?: UserSettingOrderByWithRelationInput | UserSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSettings.
     */
    cursor?: UserSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSettings.
     */
    distinct?: UserSettingScalarFieldEnum | UserSettingScalarFieldEnum[]
  }

  /**
   * UserSetting findFirstOrThrow
   */
  export type UserSettingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSetting
     */
    select?: UserSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSetting
     */
    omit?: UserSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingInclude<ExtArgs> | null
    /**
     * Filter, which UserSetting to fetch.
     */
    where?: UserSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSettings to fetch.
     */
    orderBy?: UserSettingOrderByWithRelationInput | UserSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserSettings.
     */
    cursor?: UserSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserSettings.
     */
    distinct?: UserSettingScalarFieldEnum | UserSettingScalarFieldEnum[]
  }

  /**
   * UserSetting findMany
   */
  export type UserSettingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSetting
     */
    select?: UserSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSetting
     */
    omit?: UserSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingInclude<ExtArgs> | null
    /**
     * Filter, which UserSettings to fetch.
     */
    where?: UserSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserSettings to fetch.
     */
    orderBy?: UserSettingOrderByWithRelationInput | UserSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserSettings.
     */
    cursor?: UserSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserSettings.
     */
    skip?: number
    distinct?: UserSettingScalarFieldEnum | UserSettingScalarFieldEnum[]
  }

  /**
   * UserSetting create
   */
  export type UserSettingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSetting
     */
    select?: UserSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSetting
     */
    omit?: UserSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingInclude<ExtArgs> | null
    /**
     * The data needed to create a UserSetting.
     */
    data: XOR<UserSettingCreateInput, UserSettingUncheckedCreateInput>
  }

  /**
   * UserSetting createMany
   */
  export type UserSettingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserSettings.
     */
    data: UserSettingCreateManyInput | UserSettingCreateManyInput[]
  }

  /**
   * UserSetting createManyAndReturn
   */
  export type UserSettingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSetting
     */
    select?: UserSettingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserSetting
     */
    omit?: UserSettingOmit<ExtArgs> | null
    /**
     * The data used to create many UserSettings.
     */
    data: UserSettingCreateManyInput | UserSettingCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserSetting update
   */
  export type UserSettingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSetting
     */
    select?: UserSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSetting
     */
    omit?: UserSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingInclude<ExtArgs> | null
    /**
     * The data needed to update a UserSetting.
     */
    data: XOR<UserSettingUpdateInput, UserSettingUncheckedUpdateInput>
    /**
     * Choose, which UserSetting to update.
     */
    where: UserSettingWhereUniqueInput
  }

  /**
   * UserSetting updateMany
   */
  export type UserSettingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserSettings.
     */
    data: XOR<UserSettingUpdateManyMutationInput, UserSettingUncheckedUpdateManyInput>
    /**
     * Filter which UserSettings to update
     */
    where?: UserSettingWhereInput
    /**
     * Limit how many UserSettings to update.
     */
    limit?: number
  }

  /**
   * UserSetting updateManyAndReturn
   */
  export type UserSettingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSetting
     */
    select?: UserSettingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserSetting
     */
    omit?: UserSettingOmit<ExtArgs> | null
    /**
     * The data used to update UserSettings.
     */
    data: XOR<UserSettingUpdateManyMutationInput, UserSettingUncheckedUpdateManyInput>
    /**
     * Filter which UserSettings to update
     */
    where?: UserSettingWhereInput
    /**
     * Limit how many UserSettings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserSetting upsert
   */
  export type UserSettingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSetting
     */
    select?: UserSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSetting
     */
    omit?: UserSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingInclude<ExtArgs> | null
    /**
     * The filter to search for the UserSetting to update in case it exists.
     */
    where: UserSettingWhereUniqueInput
    /**
     * In case the UserSetting found by the `where` argument doesn't exist, create a new UserSetting with this data.
     */
    create: XOR<UserSettingCreateInput, UserSettingUncheckedCreateInput>
    /**
     * In case the UserSetting was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserSettingUpdateInput, UserSettingUncheckedUpdateInput>
  }

  /**
   * UserSetting delete
   */
  export type UserSettingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSetting
     */
    select?: UserSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSetting
     */
    omit?: UserSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingInclude<ExtArgs> | null
    /**
     * Filter which UserSetting to delete.
     */
    where: UserSettingWhereUniqueInput
  }

  /**
   * UserSetting deleteMany
   */
  export type UserSettingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserSettings to delete
     */
    where?: UserSettingWhereInput
    /**
     * Limit how many UserSettings to delete.
     */
    limit?: number
  }

  /**
   * UserSetting without action
   */
  export type UserSettingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserSetting
     */
    select?: UserSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserSetting
     */
    omit?: UserSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserSettingInclude<ExtArgs> | null
  }


  /**
   * Model Entity
   */

  export type AggregateEntity = {
    _count: EntityCountAggregateOutputType | null
    _min: EntityMinAggregateOutputType | null
    _max: EntityMaxAggregateOutputType | null
  }

  export type EntityMinAggregateOutputType = {
    id: string | null
    name: string | null
    legalName: string | null
    createdAt: Date | null
    updatedAt: Date | null
    status: string | null
    parentId: string | null
  }

  export type EntityMaxAggregateOutputType = {
    id: string | null
    name: string | null
    legalName: string | null
    createdAt: Date | null
    updatedAt: Date | null
    status: string | null
    parentId: string | null
  }

  export type EntityCountAggregateOutputType = {
    id: number
    name: number
    legalName: number
    address: number
    contactInfo: number
    createdAt: number
    updatedAt: number
    status: number
    parentId: number
    _all: number
  }


  export type EntityMinAggregateInputType = {
    id?: true
    name?: true
    legalName?: true
    createdAt?: true
    updatedAt?: true
    status?: true
    parentId?: true
  }

  export type EntityMaxAggregateInputType = {
    id?: true
    name?: true
    legalName?: true
    createdAt?: true
    updatedAt?: true
    status?: true
    parentId?: true
  }

  export type EntityCountAggregateInputType = {
    id?: true
    name?: true
    legalName?: true
    address?: true
    contactInfo?: true
    createdAt?: true
    updatedAt?: true
    status?: true
    parentId?: true
    _all?: true
  }

  export type EntityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Entity to aggregate.
     */
    where?: EntityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Entities to fetch.
     */
    orderBy?: EntityOrderByWithRelationInput | EntityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EntityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Entities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Entities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Entities
    **/
    _count?: true | EntityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EntityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EntityMaxAggregateInputType
  }

  export type GetEntityAggregateType<T extends EntityAggregateArgs> = {
        [P in keyof T & keyof AggregateEntity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEntity[P]>
      : GetScalarType<T[P], AggregateEntity[P]>
  }




  export type EntityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EntityWhereInput
    orderBy?: EntityOrderByWithAggregationInput | EntityOrderByWithAggregationInput[]
    by: EntityScalarFieldEnum[] | EntityScalarFieldEnum
    having?: EntityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EntityCountAggregateInputType | true
    _min?: EntityMinAggregateInputType
    _max?: EntityMaxAggregateInputType
  }

  export type EntityGroupByOutputType = {
    id: string
    name: string
    legalName: string | null
    address: JsonValue | null
    contactInfo: JsonValue | null
    createdAt: Date
    updatedAt: Date
    status: string
    parentId: string | null
    _count: EntityCountAggregateOutputType | null
    _min: EntityMinAggregateOutputType | null
    _max: EntityMaxAggregateOutputType | null
  }

  type GetEntityGroupByPayload<T extends EntityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EntityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EntityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EntityGroupByOutputType[P]>
            : GetScalarType<T[P], EntityGroupByOutputType[P]>
        }
      >
    >


  export type EntitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    legalName?: boolean
    address?: boolean
    contactInfo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    status?: boolean
    parentId?: boolean
    batches?: boolean | Entity$batchesArgs<ExtArgs>
    users?: boolean | Entity$usersArgs<ExtArgs>
    loans?: boolean | Entity$loansArgs<ExtArgs>
    _count?: boolean | EntityCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["entity"]>

  export type EntitySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    legalName?: boolean
    address?: boolean
    contactInfo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    status?: boolean
    parentId?: boolean
  }, ExtArgs["result"]["entity"]>

  export type EntitySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    legalName?: boolean
    address?: boolean
    contactInfo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    status?: boolean
    parentId?: boolean
  }, ExtArgs["result"]["entity"]>

  export type EntitySelectScalar = {
    id?: boolean
    name?: boolean
    legalName?: boolean
    address?: boolean
    contactInfo?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    status?: boolean
    parentId?: boolean
  }

  export type EntityOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "legalName" | "address" | "contactInfo" | "createdAt" | "updatedAt" | "status" | "parentId", ExtArgs["result"]["entity"]>
  export type EntityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    batches?: boolean | Entity$batchesArgs<ExtArgs>
    users?: boolean | Entity$usersArgs<ExtArgs>
    loans?: boolean | Entity$loansArgs<ExtArgs>
    _count?: boolean | EntityCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type EntityIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type EntityIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $EntityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Entity"
    objects: {
      batches: Prisma.$ACCUPayload<ExtArgs>[]
      users: Prisma.$UserPayload<ExtArgs>[]
      loans: Prisma.$LoanPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      legalName: string | null
      address: Prisma.JsonValue | null
      contactInfo: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
      status: string
      parentId: string | null
    }, ExtArgs["result"]["entity"]>
    composites: {}
  }

  type EntityGetPayload<S extends boolean | null | undefined | EntityDefaultArgs> = $Result.GetResult<Prisma.$EntityPayload, S>

  type EntityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<EntityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: EntityCountAggregateInputType | true
    }

  export interface EntityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Entity'], meta: { name: 'Entity' } }
    /**
     * Find zero or one Entity that matches the filter.
     * @param {EntityFindUniqueArgs} args - Arguments to find a Entity
     * @example
     * // Get one Entity
     * const entity = await prisma.entity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends EntityFindUniqueArgs>(args: SelectSubset<T, EntityFindUniqueArgs<ExtArgs>>): Prisma__EntityClient<$Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Entity that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {EntityFindUniqueOrThrowArgs} args - Arguments to find a Entity
     * @example
     * // Get one Entity
     * const entity = await prisma.entity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends EntityFindUniqueOrThrowArgs>(args: SelectSubset<T, EntityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__EntityClient<$Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Entity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntityFindFirstArgs} args - Arguments to find a Entity
     * @example
     * // Get one Entity
     * const entity = await prisma.entity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends EntityFindFirstArgs>(args?: SelectSubset<T, EntityFindFirstArgs<ExtArgs>>): Prisma__EntityClient<$Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Entity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntityFindFirstOrThrowArgs} args - Arguments to find a Entity
     * @example
     * // Get one Entity
     * const entity = await prisma.entity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends EntityFindFirstOrThrowArgs>(args?: SelectSubset<T, EntityFindFirstOrThrowArgs<ExtArgs>>): Prisma__EntityClient<$Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Entities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Entities
     * const entities = await prisma.entity.findMany()
     * 
     * // Get first 10 Entities
     * const entities = await prisma.entity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const entityWithIdOnly = await prisma.entity.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends EntityFindManyArgs>(args?: SelectSubset<T, EntityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Entity.
     * @param {EntityCreateArgs} args - Arguments to create a Entity.
     * @example
     * // Create one Entity
     * const Entity = await prisma.entity.create({
     *   data: {
     *     // ... data to create a Entity
     *   }
     * })
     * 
     */
    create<T extends EntityCreateArgs>(args: SelectSubset<T, EntityCreateArgs<ExtArgs>>): Prisma__EntityClient<$Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Entities.
     * @param {EntityCreateManyArgs} args - Arguments to create many Entities.
     * @example
     * // Create many Entities
     * const entity = await prisma.entity.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends EntityCreateManyArgs>(args?: SelectSubset<T, EntityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Entities and returns the data saved in the database.
     * @param {EntityCreateManyAndReturnArgs} args - Arguments to create many Entities.
     * @example
     * // Create many Entities
     * const entity = await prisma.entity.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Entities and only return the `id`
     * const entityWithIdOnly = await prisma.entity.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends EntityCreateManyAndReturnArgs>(args?: SelectSubset<T, EntityCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Entity.
     * @param {EntityDeleteArgs} args - Arguments to delete one Entity.
     * @example
     * // Delete one Entity
     * const Entity = await prisma.entity.delete({
     *   where: {
     *     // ... filter to delete one Entity
     *   }
     * })
     * 
     */
    delete<T extends EntityDeleteArgs>(args: SelectSubset<T, EntityDeleteArgs<ExtArgs>>): Prisma__EntityClient<$Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Entity.
     * @param {EntityUpdateArgs} args - Arguments to update one Entity.
     * @example
     * // Update one Entity
     * const entity = await prisma.entity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends EntityUpdateArgs>(args: SelectSubset<T, EntityUpdateArgs<ExtArgs>>): Prisma__EntityClient<$Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Entities.
     * @param {EntityDeleteManyArgs} args - Arguments to filter Entities to delete.
     * @example
     * // Delete a few Entities
     * const { count } = await prisma.entity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends EntityDeleteManyArgs>(args?: SelectSubset<T, EntityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Entities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Entities
     * const entity = await prisma.entity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends EntityUpdateManyArgs>(args: SelectSubset<T, EntityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Entities and returns the data updated in the database.
     * @param {EntityUpdateManyAndReturnArgs} args - Arguments to update many Entities.
     * @example
     * // Update many Entities
     * const entity = await prisma.entity.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Entities and only return the `id`
     * const entityWithIdOnly = await prisma.entity.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends EntityUpdateManyAndReturnArgs>(args: SelectSubset<T, EntityUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Entity.
     * @param {EntityUpsertArgs} args - Arguments to update or create a Entity.
     * @example
     * // Update or create a Entity
     * const entity = await prisma.entity.upsert({
     *   create: {
     *     // ... data to create a Entity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Entity we want to update
     *   }
     * })
     */
    upsert<T extends EntityUpsertArgs>(args: SelectSubset<T, EntityUpsertArgs<ExtArgs>>): Prisma__EntityClient<$Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Entities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntityCountArgs} args - Arguments to filter Entities to count.
     * @example
     * // Count the number of Entities
     * const count = await prisma.entity.count({
     *   where: {
     *     // ... the filter for the Entities we want to count
     *   }
     * })
    **/
    count<T extends EntityCountArgs>(
      args?: Subset<T, EntityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EntityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Entity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EntityAggregateArgs>(args: Subset<T, EntityAggregateArgs>): Prisma.PrismaPromise<GetEntityAggregateType<T>>

    /**
     * Group by Entity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EntityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EntityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EntityGroupByArgs['orderBy'] }
        : { orderBy?: EntityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EntityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEntityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Entity model
   */
  readonly fields: EntityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Entity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EntityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    batches<T extends Entity$batchesArgs<ExtArgs> = {}>(args?: Subset<T, Entity$batchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ACCUPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    users<T extends Entity$usersArgs<ExtArgs> = {}>(args?: Subset<T, Entity$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    loans<T extends Entity$loansArgs<ExtArgs> = {}>(args?: Subset<T, Entity$loansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Entity model
   */
  interface EntityFieldRefs {
    readonly id: FieldRef<"Entity", 'String'>
    readonly name: FieldRef<"Entity", 'String'>
    readonly legalName: FieldRef<"Entity", 'String'>
    readonly address: FieldRef<"Entity", 'Json'>
    readonly contactInfo: FieldRef<"Entity", 'Json'>
    readonly createdAt: FieldRef<"Entity", 'DateTime'>
    readonly updatedAt: FieldRef<"Entity", 'DateTime'>
    readonly status: FieldRef<"Entity", 'String'>
    readonly parentId: FieldRef<"Entity", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Entity findUnique
   */
  export type EntityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entity
     */
    select?: EntitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Entity
     */
    omit?: EntityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityInclude<ExtArgs> | null
    /**
     * Filter, which Entity to fetch.
     */
    where: EntityWhereUniqueInput
  }

  /**
   * Entity findUniqueOrThrow
   */
  export type EntityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entity
     */
    select?: EntitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Entity
     */
    omit?: EntityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityInclude<ExtArgs> | null
    /**
     * Filter, which Entity to fetch.
     */
    where: EntityWhereUniqueInput
  }

  /**
   * Entity findFirst
   */
  export type EntityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entity
     */
    select?: EntitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Entity
     */
    omit?: EntityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityInclude<ExtArgs> | null
    /**
     * Filter, which Entity to fetch.
     */
    where?: EntityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Entities to fetch.
     */
    orderBy?: EntityOrderByWithRelationInput | EntityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Entities.
     */
    cursor?: EntityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Entities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Entities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Entities.
     */
    distinct?: EntityScalarFieldEnum | EntityScalarFieldEnum[]
  }

  /**
   * Entity findFirstOrThrow
   */
  export type EntityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entity
     */
    select?: EntitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Entity
     */
    omit?: EntityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityInclude<ExtArgs> | null
    /**
     * Filter, which Entity to fetch.
     */
    where?: EntityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Entities to fetch.
     */
    orderBy?: EntityOrderByWithRelationInput | EntityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Entities.
     */
    cursor?: EntityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Entities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Entities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Entities.
     */
    distinct?: EntityScalarFieldEnum | EntityScalarFieldEnum[]
  }

  /**
   * Entity findMany
   */
  export type EntityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entity
     */
    select?: EntitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Entity
     */
    omit?: EntityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityInclude<ExtArgs> | null
    /**
     * Filter, which Entities to fetch.
     */
    where?: EntityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Entities to fetch.
     */
    orderBy?: EntityOrderByWithRelationInput | EntityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Entities.
     */
    cursor?: EntityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Entities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Entities.
     */
    skip?: number
    distinct?: EntityScalarFieldEnum | EntityScalarFieldEnum[]
  }

  /**
   * Entity create
   */
  export type EntityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entity
     */
    select?: EntitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Entity
     */
    omit?: EntityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityInclude<ExtArgs> | null
    /**
     * The data needed to create a Entity.
     */
    data: XOR<EntityCreateInput, EntityUncheckedCreateInput>
  }

  /**
   * Entity createMany
   */
  export type EntityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Entities.
     */
    data: EntityCreateManyInput | EntityCreateManyInput[]
  }

  /**
   * Entity createManyAndReturn
   */
  export type EntityCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entity
     */
    select?: EntitySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Entity
     */
    omit?: EntityOmit<ExtArgs> | null
    /**
     * The data used to create many Entities.
     */
    data: EntityCreateManyInput | EntityCreateManyInput[]
  }

  /**
   * Entity update
   */
  export type EntityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entity
     */
    select?: EntitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Entity
     */
    omit?: EntityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityInclude<ExtArgs> | null
    /**
     * The data needed to update a Entity.
     */
    data: XOR<EntityUpdateInput, EntityUncheckedUpdateInput>
    /**
     * Choose, which Entity to update.
     */
    where: EntityWhereUniqueInput
  }

  /**
   * Entity updateMany
   */
  export type EntityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Entities.
     */
    data: XOR<EntityUpdateManyMutationInput, EntityUncheckedUpdateManyInput>
    /**
     * Filter which Entities to update
     */
    where?: EntityWhereInput
    /**
     * Limit how many Entities to update.
     */
    limit?: number
  }

  /**
   * Entity updateManyAndReturn
   */
  export type EntityUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entity
     */
    select?: EntitySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Entity
     */
    omit?: EntityOmit<ExtArgs> | null
    /**
     * The data used to update Entities.
     */
    data: XOR<EntityUpdateManyMutationInput, EntityUncheckedUpdateManyInput>
    /**
     * Filter which Entities to update
     */
    where?: EntityWhereInput
    /**
     * Limit how many Entities to update.
     */
    limit?: number
  }

  /**
   * Entity upsert
   */
  export type EntityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entity
     */
    select?: EntitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Entity
     */
    omit?: EntityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityInclude<ExtArgs> | null
    /**
     * The filter to search for the Entity to update in case it exists.
     */
    where: EntityWhereUniqueInput
    /**
     * In case the Entity found by the `where` argument doesn't exist, create a new Entity with this data.
     */
    create: XOR<EntityCreateInput, EntityUncheckedCreateInput>
    /**
     * In case the Entity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EntityUpdateInput, EntityUncheckedUpdateInput>
  }

  /**
   * Entity delete
   */
  export type EntityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entity
     */
    select?: EntitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Entity
     */
    omit?: EntityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityInclude<ExtArgs> | null
    /**
     * Filter which Entity to delete.
     */
    where: EntityWhereUniqueInput
  }

  /**
   * Entity deleteMany
   */
  export type EntityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Entities to delete
     */
    where?: EntityWhereInput
    /**
     * Limit how many Entities to delete.
     */
    limit?: number
  }

  /**
   * Entity.batches
   */
  export type Entity$batchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ACCU
     */
    select?: ACCUSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ACCU
     */
    omit?: ACCUOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ACCUInclude<ExtArgs> | null
    where?: ACCUWhereInput
    orderBy?: ACCUOrderByWithRelationInput | ACCUOrderByWithRelationInput[]
    cursor?: ACCUWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ACCUScalarFieldEnum | ACCUScalarFieldEnum[]
  }

  /**
   * Entity.users
   */
  export type Entity$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Entity.loans
   */
  export type Entity$loansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Loan
     */
    omit?: LoanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanInclude<ExtArgs> | null
    where?: LoanWhereInput
    orderBy?: LoanOrderByWithRelationInput | LoanOrderByWithRelationInput[]
    cursor?: LoanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LoanScalarFieldEnum | LoanScalarFieldEnum[]
  }

  /**
   * Entity without action
   */
  export type EntityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Entity
     */
    select?: EntitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Entity
     */
    omit?: EntityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: EntityInclude<ExtArgs> | null
  }


  /**
   * Model Loan
   */

  export type AggregateLoan = {
    _count: LoanCountAggregateOutputType | null
    _avg: LoanAvgAggregateOutputType | null
    _sum: LoanSumAggregateOutputType | null
    _min: LoanMinAggregateOutputType | null
    _max: LoanMaxAggregateOutputType | null
  }

  export type LoanAvgAggregateOutputType = {
    quantity: number | null
    loanAmount: number | null
    buybackRate: number | null
    collateralValue: number | null
  }

  export type LoanSumAggregateOutputType = {
    quantity: number | null
    loanAmount: number | null
    buybackRate: number | null
    collateralValue: number | null
  }

  export type LoanMinAggregateOutputType = {
    id: string | null
    batchId: string | null
    creditorId: string | null
    quantity: number | null
    loanAmount: number | null
    buybackRate: number | null
    buybackDate: Date | null
    loanStatus: $Enums.LoanStatus | null
    collateralValue: number | null
    createdAt: Date | null
    updatedAt: Date | null
    entityId: string | null
  }

  export type LoanMaxAggregateOutputType = {
    id: string | null
    batchId: string | null
    creditorId: string | null
    quantity: number | null
    loanAmount: number | null
    buybackRate: number | null
    buybackDate: Date | null
    loanStatus: $Enums.LoanStatus | null
    collateralValue: number | null
    createdAt: Date | null
    updatedAt: Date | null
    entityId: string | null
  }

  export type LoanCountAggregateOutputType = {
    id: number
    batchId: number
    creditorId: number
    quantity: number
    loanAmount: number
    buybackRate: number
    buybackDate: number
    loanStatus: number
    collateralValue: number
    createdAt: number
    updatedAt: number
    entityId: number
    _all: number
  }


  export type LoanAvgAggregateInputType = {
    quantity?: true
    loanAmount?: true
    buybackRate?: true
    collateralValue?: true
  }

  export type LoanSumAggregateInputType = {
    quantity?: true
    loanAmount?: true
    buybackRate?: true
    collateralValue?: true
  }

  export type LoanMinAggregateInputType = {
    id?: true
    batchId?: true
    creditorId?: true
    quantity?: true
    loanAmount?: true
    buybackRate?: true
    buybackDate?: true
    loanStatus?: true
    collateralValue?: true
    createdAt?: true
    updatedAt?: true
    entityId?: true
  }

  export type LoanMaxAggregateInputType = {
    id?: true
    batchId?: true
    creditorId?: true
    quantity?: true
    loanAmount?: true
    buybackRate?: true
    buybackDate?: true
    loanStatus?: true
    collateralValue?: true
    createdAt?: true
    updatedAt?: true
    entityId?: true
  }

  export type LoanCountAggregateInputType = {
    id?: true
    batchId?: true
    creditorId?: true
    quantity?: true
    loanAmount?: true
    buybackRate?: true
    buybackDate?: true
    loanStatus?: true
    collateralValue?: true
    createdAt?: true
    updatedAt?: true
    entityId?: true
    _all?: true
  }

  export type LoanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Loan to aggregate.
     */
    where?: LoanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Loans to fetch.
     */
    orderBy?: LoanOrderByWithRelationInput | LoanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LoanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Loans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Loans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Loans
    **/
    _count?: true | LoanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LoanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LoanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LoanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LoanMaxAggregateInputType
  }

  export type GetLoanAggregateType<T extends LoanAggregateArgs> = {
        [P in keyof T & keyof AggregateLoan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLoan[P]>
      : GetScalarType<T[P], AggregateLoan[P]>
  }




  export type LoanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LoanWhereInput
    orderBy?: LoanOrderByWithAggregationInput | LoanOrderByWithAggregationInput[]
    by: LoanScalarFieldEnum[] | LoanScalarFieldEnum
    having?: LoanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LoanCountAggregateInputType | true
    _avg?: LoanAvgAggregateInputType
    _sum?: LoanSumAggregateInputType
    _min?: LoanMinAggregateInputType
    _max?: LoanMaxAggregateInputType
  }

  export type LoanGroupByOutputType = {
    id: string
    batchId: string
    creditorId: string
    quantity: number
    loanAmount: number
    buybackRate: number | null
    buybackDate: Date | null
    loanStatus: $Enums.LoanStatus
    collateralValue: number | null
    createdAt: Date
    updatedAt: Date
    entityId: string
    _count: LoanCountAggregateOutputType | null
    _avg: LoanAvgAggregateOutputType | null
    _sum: LoanSumAggregateOutputType | null
    _min: LoanMinAggregateOutputType | null
    _max: LoanMaxAggregateOutputType | null
  }

  type GetLoanGroupByPayload<T extends LoanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LoanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LoanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LoanGroupByOutputType[P]>
            : GetScalarType<T[P], LoanGroupByOutputType[P]>
        }
      >
    >


  export type LoanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    batchId?: boolean
    creditorId?: boolean
    quantity?: boolean
    loanAmount?: boolean
    buybackRate?: boolean
    buybackDate?: boolean
    loanStatus?: boolean
    collateralValue?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    entityId?: boolean
    batch?: boolean | ACCUDefaultArgs<ExtArgs>
    creditor?: boolean | CreditorDefaultArgs<ExtArgs>
    entity?: boolean | EntityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["loan"]>

  export type LoanSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    batchId?: boolean
    creditorId?: boolean
    quantity?: boolean
    loanAmount?: boolean
    buybackRate?: boolean
    buybackDate?: boolean
    loanStatus?: boolean
    collateralValue?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    entityId?: boolean
    batch?: boolean | ACCUDefaultArgs<ExtArgs>
    creditor?: boolean | CreditorDefaultArgs<ExtArgs>
    entity?: boolean | EntityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["loan"]>

  export type LoanSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    batchId?: boolean
    creditorId?: boolean
    quantity?: boolean
    loanAmount?: boolean
    buybackRate?: boolean
    buybackDate?: boolean
    loanStatus?: boolean
    collateralValue?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    entityId?: boolean
    batch?: boolean | ACCUDefaultArgs<ExtArgs>
    creditor?: boolean | CreditorDefaultArgs<ExtArgs>
    entity?: boolean | EntityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["loan"]>

  export type LoanSelectScalar = {
    id?: boolean
    batchId?: boolean
    creditorId?: boolean
    quantity?: boolean
    loanAmount?: boolean
    buybackRate?: boolean
    buybackDate?: boolean
    loanStatus?: boolean
    collateralValue?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    entityId?: boolean
  }

  export type LoanOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "batchId" | "creditorId" | "quantity" | "loanAmount" | "buybackRate" | "buybackDate" | "loanStatus" | "collateralValue" | "createdAt" | "updatedAt" | "entityId", ExtArgs["result"]["loan"]>
  export type LoanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    batch?: boolean | ACCUDefaultArgs<ExtArgs>
    creditor?: boolean | CreditorDefaultArgs<ExtArgs>
    entity?: boolean | EntityDefaultArgs<ExtArgs>
  }
  export type LoanIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    batch?: boolean | ACCUDefaultArgs<ExtArgs>
    creditor?: boolean | CreditorDefaultArgs<ExtArgs>
    entity?: boolean | EntityDefaultArgs<ExtArgs>
  }
  export type LoanIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    batch?: boolean | ACCUDefaultArgs<ExtArgs>
    creditor?: boolean | CreditorDefaultArgs<ExtArgs>
    entity?: boolean | EntityDefaultArgs<ExtArgs>
  }

  export type $LoanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Loan"
    objects: {
      batch: Prisma.$ACCUPayload<ExtArgs>
      creditor: Prisma.$CreditorPayload<ExtArgs>
      entity: Prisma.$EntityPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      batchId: string
      creditorId: string
      quantity: number
      loanAmount: number
      buybackRate: number | null
      buybackDate: Date | null
      loanStatus: $Enums.LoanStatus
      collateralValue: number | null
      createdAt: Date
      updatedAt: Date
      entityId: string
    }, ExtArgs["result"]["loan"]>
    composites: {}
  }

  type LoanGetPayload<S extends boolean | null | undefined | LoanDefaultArgs> = $Result.GetResult<Prisma.$LoanPayload, S>

  type LoanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LoanFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LoanCountAggregateInputType | true
    }

  export interface LoanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Loan'], meta: { name: 'Loan' } }
    /**
     * Find zero or one Loan that matches the filter.
     * @param {LoanFindUniqueArgs} args - Arguments to find a Loan
     * @example
     * // Get one Loan
     * const loan = await prisma.loan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LoanFindUniqueArgs>(args: SelectSubset<T, LoanFindUniqueArgs<ExtArgs>>): Prisma__LoanClient<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Loan that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LoanFindUniqueOrThrowArgs} args - Arguments to find a Loan
     * @example
     * // Get one Loan
     * const loan = await prisma.loan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LoanFindUniqueOrThrowArgs>(args: SelectSubset<T, LoanFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LoanClient<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Loan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanFindFirstArgs} args - Arguments to find a Loan
     * @example
     * // Get one Loan
     * const loan = await prisma.loan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LoanFindFirstArgs>(args?: SelectSubset<T, LoanFindFirstArgs<ExtArgs>>): Prisma__LoanClient<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Loan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanFindFirstOrThrowArgs} args - Arguments to find a Loan
     * @example
     * // Get one Loan
     * const loan = await prisma.loan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LoanFindFirstOrThrowArgs>(args?: SelectSubset<T, LoanFindFirstOrThrowArgs<ExtArgs>>): Prisma__LoanClient<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Loans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Loans
     * const loans = await prisma.loan.findMany()
     * 
     * // Get first 10 Loans
     * const loans = await prisma.loan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const loanWithIdOnly = await prisma.loan.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LoanFindManyArgs>(args?: SelectSubset<T, LoanFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Loan.
     * @param {LoanCreateArgs} args - Arguments to create a Loan.
     * @example
     * // Create one Loan
     * const Loan = await prisma.loan.create({
     *   data: {
     *     // ... data to create a Loan
     *   }
     * })
     * 
     */
    create<T extends LoanCreateArgs>(args: SelectSubset<T, LoanCreateArgs<ExtArgs>>): Prisma__LoanClient<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Loans.
     * @param {LoanCreateManyArgs} args - Arguments to create many Loans.
     * @example
     * // Create many Loans
     * const loan = await prisma.loan.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LoanCreateManyArgs>(args?: SelectSubset<T, LoanCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Loans and returns the data saved in the database.
     * @param {LoanCreateManyAndReturnArgs} args - Arguments to create many Loans.
     * @example
     * // Create many Loans
     * const loan = await prisma.loan.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Loans and only return the `id`
     * const loanWithIdOnly = await prisma.loan.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LoanCreateManyAndReturnArgs>(args?: SelectSubset<T, LoanCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Loan.
     * @param {LoanDeleteArgs} args - Arguments to delete one Loan.
     * @example
     * // Delete one Loan
     * const Loan = await prisma.loan.delete({
     *   where: {
     *     // ... filter to delete one Loan
     *   }
     * })
     * 
     */
    delete<T extends LoanDeleteArgs>(args: SelectSubset<T, LoanDeleteArgs<ExtArgs>>): Prisma__LoanClient<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Loan.
     * @param {LoanUpdateArgs} args - Arguments to update one Loan.
     * @example
     * // Update one Loan
     * const loan = await prisma.loan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LoanUpdateArgs>(args: SelectSubset<T, LoanUpdateArgs<ExtArgs>>): Prisma__LoanClient<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Loans.
     * @param {LoanDeleteManyArgs} args - Arguments to filter Loans to delete.
     * @example
     * // Delete a few Loans
     * const { count } = await prisma.loan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LoanDeleteManyArgs>(args?: SelectSubset<T, LoanDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Loans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Loans
     * const loan = await prisma.loan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LoanUpdateManyArgs>(args: SelectSubset<T, LoanUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Loans and returns the data updated in the database.
     * @param {LoanUpdateManyAndReturnArgs} args - Arguments to update many Loans.
     * @example
     * // Update many Loans
     * const loan = await prisma.loan.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Loans and only return the `id`
     * const loanWithIdOnly = await prisma.loan.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LoanUpdateManyAndReturnArgs>(args: SelectSubset<T, LoanUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Loan.
     * @param {LoanUpsertArgs} args - Arguments to update or create a Loan.
     * @example
     * // Update or create a Loan
     * const loan = await prisma.loan.upsert({
     *   create: {
     *     // ... data to create a Loan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Loan we want to update
     *   }
     * })
     */
    upsert<T extends LoanUpsertArgs>(args: SelectSubset<T, LoanUpsertArgs<ExtArgs>>): Prisma__LoanClient<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Loans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanCountArgs} args - Arguments to filter Loans to count.
     * @example
     * // Count the number of Loans
     * const count = await prisma.loan.count({
     *   where: {
     *     // ... the filter for the Loans we want to count
     *   }
     * })
    **/
    count<T extends LoanCountArgs>(
      args?: Subset<T, LoanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LoanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Loan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LoanAggregateArgs>(args: Subset<T, LoanAggregateArgs>): Prisma.PrismaPromise<GetLoanAggregateType<T>>

    /**
     * Group by Loan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LoanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LoanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LoanGroupByArgs['orderBy'] }
        : { orderBy?: LoanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LoanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLoanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Loan model
   */
  readonly fields: LoanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Loan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LoanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    batch<T extends ACCUDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ACCUDefaultArgs<ExtArgs>>): Prisma__ACCUClient<$Result.GetResult<Prisma.$ACCUPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    creditor<T extends CreditorDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CreditorDefaultArgs<ExtArgs>>): Prisma__CreditorClient<$Result.GetResult<Prisma.$CreditorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    entity<T extends EntityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, EntityDefaultArgs<ExtArgs>>): Prisma__EntityClient<$Result.GetResult<Prisma.$EntityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Loan model
   */
  interface LoanFieldRefs {
    readonly id: FieldRef<"Loan", 'String'>
    readonly batchId: FieldRef<"Loan", 'String'>
    readonly creditorId: FieldRef<"Loan", 'String'>
    readonly quantity: FieldRef<"Loan", 'Int'>
    readonly loanAmount: FieldRef<"Loan", 'Float'>
    readonly buybackRate: FieldRef<"Loan", 'Float'>
    readonly buybackDate: FieldRef<"Loan", 'DateTime'>
    readonly loanStatus: FieldRef<"Loan", 'LoanStatus'>
    readonly collateralValue: FieldRef<"Loan", 'Float'>
    readonly createdAt: FieldRef<"Loan", 'DateTime'>
    readonly updatedAt: FieldRef<"Loan", 'DateTime'>
    readonly entityId: FieldRef<"Loan", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Loan findUnique
   */
  export type LoanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Loan
     */
    omit?: LoanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanInclude<ExtArgs> | null
    /**
     * Filter, which Loan to fetch.
     */
    where: LoanWhereUniqueInput
  }

  /**
   * Loan findUniqueOrThrow
   */
  export type LoanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Loan
     */
    omit?: LoanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanInclude<ExtArgs> | null
    /**
     * Filter, which Loan to fetch.
     */
    where: LoanWhereUniqueInput
  }

  /**
   * Loan findFirst
   */
  export type LoanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Loan
     */
    omit?: LoanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanInclude<ExtArgs> | null
    /**
     * Filter, which Loan to fetch.
     */
    where?: LoanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Loans to fetch.
     */
    orderBy?: LoanOrderByWithRelationInput | LoanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Loans.
     */
    cursor?: LoanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Loans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Loans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Loans.
     */
    distinct?: LoanScalarFieldEnum | LoanScalarFieldEnum[]
  }

  /**
   * Loan findFirstOrThrow
   */
  export type LoanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Loan
     */
    omit?: LoanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanInclude<ExtArgs> | null
    /**
     * Filter, which Loan to fetch.
     */
    where?: LoanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Loans to fetch.
     */
    orderBy?: LoanOrderByWithRelationInput | LoanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Loans.
     */
    cursor?: LoanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Loans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Loans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Loans.
     */
    distinct?: LoanScalarFieldEnum | LoanScalarFieldEnum[]
  }

  /**
   * Loan findMany
   */
  export type LoanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Loan
     */
    omit?: LoanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanInclude<ExtArgs> | null
    /**
     * Filter, which Loans to fetch.
     */
    where?: LoanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Loans to fetch.
     */
    orderBy?: LoanOrderByWithRelationInput | LoanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Loans.
     */
    cursor?: LoanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Loans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Loans.
     */
    skip?: number
    distinct?: LoanScalarFieldEnum | LoanScalarFieldEnum[]
  }

  /**
   * Loan create
   */
  export type LoanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Loan
     */
    omit?: LoanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanInclude<ExtArgs> | null
    /**
     * The data needed to create a Loan.
     */
    data: XOR<LoanCreateInput, LoanUncheckedCreateInput>
  }

  /**
   * Loan createMany
   */
  export type LoanCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Loans.
     */
    data: LoanCreateManyInput | LoanCreateManyInput[]
  }

  /**
   * Loan createManyAndReturn
   */
  export type LoanCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Loan
     */
    omit?: LoanOmit<ExtArgs> | null
    /**
     * The data used to create many Loans.
     */
    data: LoanCreateManyInput | LoanCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Loan update
   */
  export type LoanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Loan
     */
    omit?: LoanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanInclude<ExtArgs> | null
    /**
     * The data needed to update a Loan.
     */
    data: XOR<LoanUpdateInput, LoanUncheckedUpdateInput>
    /**
     * Choose, which Loan to update.
     */
    where: LoanWhereUniqueInput
  }

  /**
   * Loan updateMany
   */
  export type LoanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Loans.
     */
    data: XOR<LoanUpdateManyMutationInput, LoanUncheckedUpdateManyInput>
    /**
     * Filter which Loans to update
     */
    where?: LoanWhereInput
    /**
     * Limit how many Loans to update.
     */
    limit?: number
  }

  /**
   * Loan updateManyAndReturn
   */
  export type LoanUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Loan
     */
    omit?: LoanOmit<ExtArgs> | null
    /**
     * The data used to update Loans.
     */
    data: XOR<LoanUpdateManyMutationInput, LoanUncheckedUpdateManyInput>
    /**
     * Filter which Loans to update
     */
    where?: LoanWhereInput
    /**
     * Limit how many Loans to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Loan upsert
   */
  export type LoanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Loan
     */
    omit?: LoanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanInclude<ExtArgs> | null
    /**
     * The filter to search for the Loan to update in case it exists.
     */
    where: LoanWhereUniqueInput
    /**
     * In case the Loan found by the `where` argument doesn't exist, create a new Loan with this data.
     */
    create: XOR<LoanCreateInput, LoanUncheckedCreateInput>
    /**
     * In case the Loan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LoanUpdateInput, LoanUncheckedUpdateInput>
  }

  /**
   * Loan delete
   */
  export type LoanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Loan
     */
    omit?: LoanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanInclude<ExtArgs> | null
    /**
     * Filter which Loan to delete.
     */
    where: LoanWhereUniqueInput
  }

  /**
   * Loan deleteMany
   */
  export type LoanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Loans to delete
     */
    where?: LoanWhereInput
    /**
     * Limit how many Loans to delete.
     */
    limit?: number
  }

  /**
   * Loan without action
   */
  export type LoanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Loan
     */
    omit?: LoanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanInclude<ExtArgs> | null
  }


  /**
   * Model Creditor
   */

  export type AggregateCreditor = {
    _count: CreditorCountAggregateOutputType | null
    _min: CreditorMinAggregateOutputType | null
    _max: CreditorMaxAggregateOutputType | null
  }

  export type CreditorMinAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CreditorMaxAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CreditorCountAggregateOutputType = {
    id: number
    name: number
    contactInfo: number
    terms: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CreditorMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CreditorMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CreditorCountAggregateInputType = {
    id?: true
    name?: true
    contactInfo?: true
    terms?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CreditorAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Creditor to aggregate.
     */
    where?: CreditorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Creditors to fetch.
     */
    orderBy?: CreditorOrderByWithRelationInput | CreditorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CreditorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Creditors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Creditors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Creditors
    **/
    _count?: true | CreditorCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CreditorMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CreditorMaxAggregateInputType
  }

  export type GetCreditorAggregateType<T extends CreditorAggregateArgs> = {
        [P in keyof T & keyof AggregateCreditor]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCreditor[P]>
      : GetScalarType<T[P], AggregateCreditor[P]>
  }




  export type CreditorGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CreditorWhereInput
    orderBy?: CreditorOrderByWithAggregationInput | CreditorOrderByWithAggregationInput[]
    by: CreditorScalarFieldEnum[] | CreditorScalarFieldEnum
    having?: CreditorScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CreditorCountAggregateInputType | true
    _min?: CreditorMinAggregateInputType
    _max?: CreditorMaxAggregateInputType
  }

  export type CreditorGroupByOutputType = {
    id: string
    name: string
    contactInfo: JsonValue | null
    terms: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: CreditorCountAggregateOutputType | null
    _min: CreditorMinAggregateOutputType | null
    _max: CreditorMaxAggregateOutputType | null
  }

  type GetCreditorGroupByPayload<T extends CreditorGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CreditorGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CreditorGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CreditorGroupByOutputType[P]>
            : GetScalarType<T[P], CreditorGroupByOutputType[P]>
        }
      >
    >


  export type CreditorSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    contactInfo?: boolean
    terms?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    loans?: boolean | Creditor$loansArgs<ExtArgs>
    _count?: boolean | CreditorCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["creditor"]>

  export type CreditorSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    contactInfo?: boolean
    terms?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["creditor"]>

  export type CreditorSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    contactInfo?: boolean
    terms?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["creditor"]>

  export type CreditorSelectScalar = {
    id?: boolean
    name?: boolean
    contactInfo?: boolean
    terms?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CreditorOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "contactInfo" | "terms" | "createdAt" | "updatedAt", ExtArgs["result"]["creditor"]>
  export type CreditorInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    loans?: boolean | Creditor$loansArgs<ExtArgs>
    _count?: boolean | CreditorCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CreditorIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CreditorIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CreditorPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Creditor"
    objects: {
      loans: Prisma.$LoanPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      contactInfo: Prisma.JsonValue | null
      terms: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["creditor"]>
    composites: {}
  }

  type CreditorGetPayload<S extends boolean | null | undefined | CreditorDefaultArgs> = $Result.GetResult<Prisma.$CreditorPayload, S>

  type CreditorCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CreditorFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CreditorCountAggregateInputType | true
    }

  export interface CreditorDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Creditor'], meta: { name: 'Creditor' } }
    /**
     * Find zero or one Creditor that matches the filter.
     * @param {CreditorFindUniqueArgs} args - Arguments to find a Creditor
     * @example
     * // Get one Creditor
     * const creditor = await prisma.creditor.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CreditorFindUniqueArgs>(args: SelectSubset<T, CreditorFindUniqueArgs<ExtArgs>>): Prisma__CreditorClient<$Result.GetResult<Prisma.$CreditorPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Creditor that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CreditorFindUniqueOrThrowArgs} args - Arguments to find a Creditor
     * @example
     * // Get one Creditor
     * const creditor = await prisma.creditor.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CreditorFindUniqueOrThrowArgs>(args: SelectSubset<T, CreditorFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CreditorClient<$Result.GetResult<Prisma.$CreditorPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Creditor that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditorFindFirstArgs} args - Arguments to find a Creditor
     * @example
     * // Get one Creditor
     * const creditor = await prisma.creditor.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CreditorFindFirstArgs>(args?: SelectSubset<T, CreditorFindFirstArgs<ExtArgs>>): Prisma__CreditorClient<$Result.GetResult<Prisma.$CreditorPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Creditor that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditorFindFirstOrThrowArgs} args - Arguments to find a Creditor
     * @example
     * // Get one Creditor
     * const creditor = await prisma.creditor.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CreditorFindFirstOrThrowArgs>(args?: SelectSubset<T, CreditorFindFirstOrThrowArgs<ExtArgs>>): Prisma__CreditorClient<$Result.GetResult<Prisma.$CreditorPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Creditors that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditorFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Creditors
     * const creditors = await prisma.creditor.findMany()
     * 
     * // Get first 10 Creditors
     * const creditors = await prisma.creditor.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const creditorWithIdOnly = await prisma.creditor.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CreditorFindManyArgs>(args?: SelectSubset<T, CreditorFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CreditorPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Creditor.
     * @param {CreditorCreateArgs} args - Arguments to create a Creditor.
     * @example
     * // Create one Creditor
     * const Creditor = await prisma.creditor.create({
     *   data: {
     *     // ... data to create a Creditor
     *   }
     * })
     * 
     */
    create<T extends CreditorCreateArgs>(args: SelectSubset<T, CreditorCreateArgs<ExtArgs>>): Prisma__CreditorClient<$Result.GetResult<Prisma.$CreditorPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Creditors.
     * @param {CreditorCreateManyArgs} args - Arguments to create many Creditors.
     * @example
     * // Create many Creditors
     * const creditor = await prisma.creditor.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CreditorCreateManyArgs>(args?: SelectSubset<T, CreditorCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Creditors and returns the data saved in the database.
     * @param {CreditorCreateManyAndReturnArgs} args - Arguments to create many Creditors.
     * @example
     * // Create many Creditors
     * const creditor = await prisma.creditor.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Creditors and only return the `id`
     * const creditorWithIdOnly = await prisma.creditor.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CreditorCreateManyAndReturnArgs>(args?: SelectSubset<T, CreditorCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CreditorPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Creditor.
     * @param {CreditorDeleteArgs} args - Arguments to delete one Creditor.
     * @example
     * // Delete one Creditor
     * const Creditor = await prisma.creditor.delete({
     *   where: {
     *     // ... filter to delete one Creditor
     *   }
     * })
     * 
     */
    delete<T extends CreditorDeleteArgs>(args: SelectSubset<T, CreditorDeleteArgs<ExtArgs>>): Prisma__CreditorClient<$Result.GetResult<Prisma.$CreditorPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Creditor.
     * @param {CreditorUpdateArgs} args - Arguments to update one Creditor.
     * @example
     * // Update one Creditor
     * const creditor = await prisma.creditor.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CreditorUpdateArgs>(args: SelectSubset<T, CreditorUpdateArgs<ExtArgs>>): Prisma__CreditorClient<$Result.GetResult<Prisma.$CreditorPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Creditors.
     * @param {CreditorDeleteManyArgs} args - Arguments to filter Creditors to delete.
     * @example
     * // Delete a few Creditors
     * const { count } = await prisma.creditor.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CreditorDeleteManyArgs>(args?: SelectSubset<T, CreditorDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Creditors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditorUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Creditors
     * const creditor = await prisma.creditor.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CreditorUpdateManyArgs>(args: SelectSubset<T, CreditorUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Creditors and returns the data updated in the database.
     * @param {CreditorUpdateManyAndReturnArgs} args - Arguments to update many Creditors.
     * @example
     * // Update many Creditors
     * const creditor = await prisma.creditor.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Creditors and only return the `id`
     * const creditorWithIdOnly = await prisma.creditor.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CreditorUpdateManyAndReturnArgs>(args: SelectSubset<T, CreditorUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CreditorPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Creditor.
     * @param {CreditorUpsertArgs} args - Arguments to update or create a Creditor.
     * @example
     * // Update or create a Creditor
     * const creditor = await prisma.creditor.upsert({
     *   create: {
     *     // ... data to create a Creditor
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Creditor we want to update
     *   }
     * })
     */
    upsert<T extends CreditorUpsertArgs>(args: SelectSubset<T, CreditorUpsertArgs<ExtArgs>>): Prisma__CreditorClient<$Result.GetResult<Prisma.$CreditorPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Creditors.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditorCountArgs} args - Arguments to filter Creditors to count.
     * @example
     * // Count the number of Creditors
     * const count = await prisma.creditor.count({
     *   where: {
     *     // ... the filter for the Creditors we want to count
     *   }
     * })
    **/
    count<T extends CreditorCountArgs>(
      args?: Subset<T, CreditorCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CreditorCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Creditor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditorAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CreditorAggregateArgs>(args: Subset<T, CreditorAggregateArgs>): Prisma.PrismaPromise<GetCreditorAggregateType<T>>

    /**
     * Group by Creditor.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CreditorGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CreditorGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CreditorGroupByArgs['orderBy'] }
        : { orderBy?: CreditorGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CreditorGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCreditorGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Creditor model
   */
  readonly fields: CreditorFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Creditor.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CreditorClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    loans<T extends Creditor$loansArgs<ExtArgs> = {}>(args?: Subset<T, Creditor$loansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LoanPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Creditor model
   */
  interface CreditorFieldRefs {
    readonly id: FieldRef<"Creditor", 'String'>
    readonly name: FieldRef<"Creditor", 'String'>
    readonly contactInfo: FieldRef<"Creditor", 'Json'>
    readonly terms: FieldRef<"Creditor", 'Json'>
    readonly createdAt: FieldRef<"Creditor", 'DateTime'>
    readonly updatedAt: FieldRef<"Creditor", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Creditor findUnique
   */
  export type CreditorFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Creditor
     */
    select?: CreditorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Creditor
     */
    omit?: CreditorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditorInclude<ExtArgs> | null
    /**
     * Filter, which Creditor to fetch.
     */
    where: CreditorWhereUniqueInput
  }

  /**
   * Creditor findUniqueOrThrow
   */
  export type CreditorFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Creditor
     */
    select?: CreditorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Creditor
     */
    omit?: CreditorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditorInclude<ExtArgs> | null
    /**
     * Filter, which Creditor to fetch.
     */
    where: CreditorWhereUniqueInput
  }

  /**
   * Creditor findFirst
   */
  export type CreditorFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Creditor
     */
    select?: CreditorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Creditor
     */
    omit?: CreditorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditorInclude<ExtArgs> | null
    /**
     * Filter, which Creditor to fetch.
     */
    where?: CreditorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Creditors to fetch.
     */
    orderBy?: CreditorOrderByWithRelationInput | CreditorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Creditors.
     */
    cursor?: CreditorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Creditors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Creditors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Creditors.
     */
    distinct?: CreditorScalarFieldEnum | CreditorScalarFieldEnum[]
  }

  /**
   * Creditor findFirstOrThrow
   */
  export type CreditorFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Creditor
     */
    select?: CreditorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Creditor
     */
    omit?: CreditorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditorInclude<ExtArgs> | null
    /**
     * Filter, which Creditor to fetch.
     */
    where?: CreditorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Creditors to fetch.
     */
    orderBy?: CreditorOrderByWithRelationInput | CreditorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Creditors.
     */
    cursor?: CreditorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Creditors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Creditors.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Creditors.
     */
    distinct?: CreditorScalarFieldEnum | CreditorScalarFieldEnum[]
  }

  /**
   * Creditor findMany
   */
  export type CreditorFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Creditor
     */
    select?: CreditorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Creditor
     */
    omit?: CreditorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditorInclude<ExtArgs> | null
    /**
     * Filter, which Creditors to fetch.
     */
    where?: CreditorWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Creditors to fetch.
     */
    orderBy?: CreditorOrderByWithRelationInput | CreditorOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Creditors.
     */
    cursor?: CreditorWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Creditors from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Creditors.
     */
    skip?: number
    distinct?: CreditorScalarFieldEnum | CreditorScalarFieldEnum[]
  }

  /**
   * Creditor create
   */
  export type CreditorCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Creditor
     */
    select?: CreditorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Creditor
     */
    omit?: CreditorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditorInclude<ExtArgs> | null
    /**
     * The data needed to create a Creditor.
     */
    data: XOR<CreditorCreateInput, CreditorUncheckedCreateInput>
  }

  /**
   * Creditor createMany
   */
  export type CreditorCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Creditors.
     */
    data: CreditorCreateManyInput | CreditorCreateManyInput[]
  }

  /**
   * Creditor createManyAndReturn
   */
  export type CreditorCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Creditor
     */
    select?: CreditorSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Creditor
     */
    omit?: CreditorOmit<ExtArgs> | null
    /**
     * The data used to create many Creditors.
     */
    data: CreditorCreateManyInput | CreditorCreateManyInput[]
  }

  /**
   * Creditor update
   */
  export type CreditorUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Creditor
     */
    select?: CreditorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Creditor
     */
    omit?: CreditorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditorInclude<ExtArgs> | null
    /**
     * The data needed to update a Creditor.
     */
    data: XOR<CreditorUpdateInput, CreditorUncheckedUpdateInput>
    /**
     * Choose, which Creditor to update.
     */
    where: CreditorWhereUniqueInput
  }

  /**
   * Creditor updateMany
   */
  export type CreditorUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Creditors.
     */
    data: XOR<CreditorUpdateManyMutationInput, CreditorUncheckedUpdateManyInput>
    /**
     * Filter which Creditors to update
     */
    where?: CreditorWhereInput
    /**
     * Limit how many Creditors to update.
     */
    limit?: number
  }

  /**
   * Creditor updateManyAndReturn
   */
  export type CreditorUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Creditor
     */
    select?: CreditorSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Creditor
     */
    omit?: CreditorOmit<ExtArgs> | null
    /**
     * The data used to update Creditors.
     */
    data: XOR<CreditorUpdateManyMutationInput, CreditorUncheckedUpdateManyInput>
    /**
     * Filter which Creditors to update
     */
    where?: CreditorWhereInput
    /**
     * Limit how many Creditors to update.
     */
    limit?: number
  }

  /**
   * Creditor upsert
   */
  export type CreditorUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Creditor
     */
    select?: CreditorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Creditor
     */
    omit?: CreditorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditorInclude<ExtArgs> | null
    /**
     * The filter to search for the Creditor to update in case it exists.
     */
    where: CreditorWhereUniqueInput
    /**
     * In case the Creditor found by the `where` argument doesn't exist, create a new Creditor with this data.
     */
    create: XOR<CreditorCreateInput, CreditorUncheckedCreateInput>
    /**
     * In case the Creditor was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CreditorUpdateInput, CreditorUncheckedUpdateInput>
  }

  /**
   * Creditor delete
   */
  export type CreditorDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Creditor
     */
    select?: CreditorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Creditor
     */
    omit?: CreditorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditorInclude<ExtArgs> | null
    /**
     * Filter which Creditor to delete.
     */
    where: CreditorWhereUniqueInput
  }

  /**
   * Creditor deleteMany
   */
  export type CreditorDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Creditors to delete
     */
    where?: CreditorWhereInput
    /**
     * Limit how many Creditors to delete.
     */
    limit?: number
  }

  /**
   * Creditor.loans
   */
  export type Creditor$loansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Loan
     */
    select?: LoanSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Loan
     */
    omit?: LoanOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LoanInclude<ExtArgs> | null
    where?: LoanWhereInput
    orderBy?: LoanOrderByWithRelationInput | LoanOrderByWithRelationInput[]
    cursor?: LoanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LoanScalarFieldEnum | LoanScalarFieldEnum[]
  }

  /**
   * Creditor without action
   */
  export type CreditorDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Creditor
     */
    select?: CreditorSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Creditor
     */
    omit?: CreditorOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CreditorInclude<ExtArgs> | null
  }


  /**
   * Model ImportJob
   */

  export type AggregateImportJob = {
    _count: ImportJobCountAggregateOutputType | null
    _avg: ImportJobAvgAggregateOutputType | null
    _sum: ImportJobSumAggregateOutputType | null
    _min: ImportJobMinAggregateOutputType | null
    _max: ImportJobMaxAggregateOutputType | null
  }

  export type ImportJobAvgAggregateOutputType = {
    processedRows: number | null
    errorCount: number | null
  }

  export type ImportJobSumAggregateOutputType = {
    processedRows: number | null
    errorCount: number | null
  }

  export type ImportJobMinAggregateOutputType = {
    id: string | null
    fileName: string | null
    status: string | null
    processedRows: number | null
    errorCount: number | null
    createdAt: Date | null
    completedAt: Date | null
    userId: string | null
    entityId: string | null
  }

  export type ImportJobMaxAggregateOutputType = {
    id: string | null
    fileName: string | null
    status: string | null
    processedRows: number | null
    errorCount: number | null
    createdAt: Date | null
    completedAt: Date | null
    userId: string | null
    entityId: string | null
  }

  export type ImportJobCountAggregateOutputType = {
    id: number
    fileName: number
    status: number
    processedRows: number
    errorCount: number
    createdAt: number
    completedAt: number
    userId: number
    entityId: number
    _all: number
  }


  export type ImportJobAvgAggregateInputType = {
    processedRows?: true
    errorCount?: true
  }

  export type ImportJobSumAggregateInputType = {
    processedRows?: true
    errorCount?: true
  }

  export type ImportJobMinAggregateInputType = {
    id?: true
    fileName?: true
    status?: true
    processedRows?: true
    errorCount?: true
    createdAt?: true
    completedAt?: true
    userId?: true
    entityId?: true
  }

  export type ImportJobMaxAggregateInputType = {
    id?: true
    fileName?: true
    status?: true
    processedRows?: true
    errorCount?: true
    createdAt?: true
    completedAt?: true
    userId?: true
    entityId?: true
  }

  export type ImportJobCountAggregateInputType = {
    id?: true
    fileName?: true
    status?: true
    processedRows?: true
    errorCount?: true
    createdAt?: true
    completedAt?: true
    userId?: true
    entityId?: true
    _all?: true
  }

  export type ImportJobAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ImportJob to aggregate.
     */
    where?: ImportJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ImportJobs to fetch.
     */
    orderBy?: ImportJobOrderByWithRelationInput | ImportJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ImportJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ImportJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ImportJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ImportJobs
    **/
    _count?: true | ImportJobCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ImportJobAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ImportJobSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImportJobMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImportJobMaxAggregateInputType
  }

  export type GetImportJobAggregateType<T extends ImportJobAggregateArgs> = {
        [P in keyof T & keyof AggregateImportJob]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImportJob[P]>
      : GetScalarType<T[P], AggregateImportJob[P]>
  }




  export type ImportJobGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImportJobWhereInput
    orderBy?: ImportJobOrderByWithAggregationInput | ImportJobOrderByWithAggregationInput[]
    by: ImportJobScalarFieldEnum[] | ImportJobScalarFieldEnum
    having?: ImportJobScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImportJobCountAggregateInputType | true
    _avg?: ImportJobAvgAggregateInputType
    _sum?: ImportJobSumAggregateInputType
    _min?: ImportJobMinAggregateInputType
    _max?: ImportJobMaxAggregateInputType
  }

  export type ImportJobGroupByOutputType = {
    id: string
    fileName: string
    status: string
    processedRows: number
    errorCount: number
    createdAt: Date
    completedAt: Date | null
    userId: string
    entityId: string
    _count: ImportJobCountAggregateOutputType | null
    _avg: ImportJobAvgAggregateOutputType | null
    _sum: ImportJobSumAggregateOutputType | null
    _min: ImportJobMinAggregateOutputType | null
    _max: ImportJobMaxAggregateOutputType | null
  }

  type GetImportJobGroupByPayload<T extends ImportJobGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ImportJobGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImportJobGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImportJobGroupByOutputType[P]>
            : GetScalarType<T[P], ImportJobGroupByOutputType[P]>
        }
      >
    >


  export type ImportJobSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fileName?: boolean
    status?: boolean
    processedRows?: boolean
    errorCount?: boolean
    createdAt?: boolean
    completedAt?: boolean
    userId?: boolean
    entityId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["importJob"]>

  export type ImportJobSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fileName?: boolean
    status?: boolean
    processedRows?: boolean
    errorCount?: boolean
    createdAt?: boolean
    completedAt?: boolean
    userId?: boolean
    entityId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["importJob"]>

  export type ImportJobSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fileName?: boolean
    status?: boolean
    processedRows?: boolean
    errorCount?: boolean
    createdAt?: boolean
    completedAt?: boolean
    userId?: boolean
    entityId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["importJob"]>

  export type ImportJobSelectScalar = {
    id?: boolean
    fileName?: boolean
    status?: boolean
    processedRows?: boolean
    errorCount?: boolean
    createdAt?: boolean
    completedAt?: boolean
    userId?: boolean
    entityId?: boolean
  }

  export type ImportJobOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "fileName" | "status" | "processedRows" | "errorCount" | "createdAt" | "completedAt" | "userId" | "entityId", ExtArgs["result"]["importJob"]>
  export type ImportJobInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ImportJobIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ImportJobIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ImportJobPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ImportJob"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fileName: string
      status: string
      processedRows: number
      errorCount: number
      createdAt: Date
      completedAt: Date | null
      userId: string
      entityId: string
    }, ExtArgs["result"]["importJob"]>
    composites: {}
  }

  type ImportJobGetPayload<S extends boolean | null | undefined | ImportJobDefaultArgs> = $Result.GetResult<Prisma.$ImportJobPayload, S>

  type ImportJobCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ImportJobFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ImportJobCountAggregateInputType | true
    }

  export interface ImportJobDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ImportJob'], meta: { name: 'ImportJob' } }
    /**
     * Find zero or one ImportJob that matches the filter.
     * @param {ImportJobFindUniqueArgs} args - Arguments to find a ImportJob
     * @example
     * // Get one ImportJob
     * const importJob = await prisma.importJob.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ImportJobFindUniqueArgs>(args: SelectSubset<T, ImportJobFindUniqueArgs<ExtArgs>>): Prisma__ImportJobClient<$Result.GetResult<Prisma.$ImportJobPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ImportJob that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ImportJobFindUniqueOrThrowArgs} args - Arguments to find a ImportJob
     * @example
     * // Get one ImportJob
     * const importJob = await prisma.importJob.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ImportJobFindUniqueOrThrowArgs>(args: SelectSubset<T, ImportJobFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ImportJobClient<$Result.GetResult<Prisma.$ImportJobPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ImportJob that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImportJobFindFirstArgs} args - Arguments to find a ImportJob
     * @example
     * // Get one ImportJob
     * const importJob = await prisma.importJob.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ImportJobFindFirstArgs>(args?: SelectSubset<T, ImportJobFindFirstArgs<ExtArgs>>): Prisma__ImportJobClient<$Result.GetResult<Prisma.$ImportJobPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ImportJob that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImportJobFindFirstOrThrowArgs} args - Arguments to find a ImportJob
     * @example
     * // Get one ImportJob
     * const importJob = await prisma.importJob.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ImportJobFindFirstOrThrowArgs>(args?: SelectSubset<T, ImportJobFindFirstOrThrowArgs<ExtArgs>>): Prisma__ImportJobClient<$Result.GetResult<Prisma.$ImportJobPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ImportJobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImportJobFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ImportJobs
     * const importJobs = await prisma.importJob.findMany()
     * 
     * // Get first 10 ImportJobs
     * const importJobs = await prisma.importJob.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const importJobWithIdOnly = await prisma.importJob.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ImportJobFindManyArgs>(args?: SelectSubset<T, ImportJobFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImportJobPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ImportJob.
     * @param {ImportJobCreateArgs} args - Arguments to create a ImportJob.
     * @example
     * // Create one ImportJob
     * const ImportJob = await prisma.importJob.create({
     *   data: {
     *     // ... data to create a ImportJob
     *   }
     * })
     * 
     */
    create<T extends ImportJobCreateArgs>(args: SelectSubset<T, ImportJobCreateArgs<ExtArgs>>): Prisma__ImportJobClient<$Result.GetResult<Prisma.$ImportJobPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ImportJobs.
     * @param {ImportJobCreateManyArgs} args - Arguments to create many ImportJobs.
     * @example
     * // Create many ImportJobs
     * const importJob = await prisma.importJob.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ImportJobCreateManyArgs>(args?: SelectSubset<T, ImportJobCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ImportJobs and returns the data saved in the database.
     * @param {ImportJobCreateManyAndReturnArgs} args - Arguments to create many ImportJobs.
     * @example
     * // Create many ImportJobs
     * const importJob = await prisma.importJob.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ImportJobs and only return the `id`
     * const importJobWithIdOnly = await prisma.importJob.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ImportJobCreateManyAndReturnArgs>(args?: SelectSubset<T, ImportJobCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImportJobPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ImportJob.
     * @param {ImportJobDeleteArgs} args - Arguments to delete one ImportJob.
     * @example
     * // Delete one ImportJob
     * const ImportJob = await prisma.importJob.delete({
     *   where: {
     *     // ... filter to delete one ImportJob
     *   }
     * })
     * 
     */
    delete<T extends ImportJobDeleteArgs>(args: SelectSubset<T, ImportJobDeleteArgs<ExtArgs>>): Prisma__ImportJobClient<$Result.GetResult<Prisma.$ImportJobPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ImportJob.
     * @param {ImportJobUpdateArgs} args - Arguments to update one ImportJob.
     * @example
     * // Update one ImportJob
     * const importJob = await prisma.importJob.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ImportJobUpdateArgs>(args: SelectSubset<T, ImportJobUpdateArgs<ExtArgs>>): Prisma__ImportJobClient<$Result.GetResult<Prisma.$ImportJobPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ImportJobs.
     * @param {ImportJobDeleteManyArgs} args - Arguments to filter ImportJobs to delete.
     * @example
     * // Delete a few ImportJobs
     * const { count } = await prisma.importJob.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ImportJobDeleteManyArgs>(args?: SelectSubset<T, ImportJobDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ImportJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImportJobUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ImportJobs
     * const importJob = await prisma.importJob.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ImportJobUpdateManyArgs>(args: SelectSubset<T, ImportJobUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ImportJobs and returns the data updated in the database.
     * @param {ImportJobUpdateManyAndReturnArgs} args - Arguments to update many ImportJobs.
     * @example
     * // Update many ImportJobs
     * const importJob = await prisma.importJob.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ImportJobs and only return the `id`
     * const importJobWithIdOnly = await prisma.importJob.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ImportJobUpdateManyAndReturnArgs>(args: SelectSubset<T, ImportJobUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImportJobPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ImportJob.
     * @param {ImportJobUpsertArgs} args - Arguments to update or create a ImportJob.
     * @example
     * // Update or create a ImportJob
     * const importJob = await prisma.importJob.upsert({
     *   create: {
     *     // ... data to create a ImportJob
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ImportJob we want to update
     *   }
     * })
     */
    upsert<T extends ImportJobUpsertArgs>(args: SelectSubset<T, ImportJobUpsertArgs<ExtArgs>>): Prisma__ImportJobClient<$Result.GetResult<Prisma.$ImportJobPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ImportJobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImportJobCountArgs} args - Arguments to filter ImportJobs to count.
     * @example
     * // Count the number of ImportJobs
     * const count = await prisma.importJob.count({
     *   where: {
     *     // ... the filter for the ImportJobs we want to count
     *   }
     * })
    **/
    count<T extends ImportJobCountArgs>(
      args?: Subset<T, ImportJobCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImportJobCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ImportJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImportJobAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImportJobAggregateArgs>(args: Subset<T, ImportJobAggregateArgs>): Prisma.PrismaPromise<GetImportJobAggregateType<T>>

    /**
     * Group by ImportJob.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImportJobGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ImportJobGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ImportJobGroupByArgs['orderBy'] }
        : { orderBy?: ImportJobGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ImportJobGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImportJobGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ImportJob model
   */
  readonly fields: ImportJobFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ImportJob.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ImportJobClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ImportJob model
   */
  interface ImportJobFieldRefs {
    readonly id: FieldRef<"ImportJob", 'String'>
    readonly fileName: FieldRef<"ImportJob", 'String'>
    readonly status: FieldRef<"ImportJob", 'String'>
    readonly processedRows: FieldRef<"ImportJob", 'Int'>
    readonly errorCount: FieldRef<"ImportJob", 'Int'>
    readonly createdAt: FieldRef<"ImportJob", 'DateTime'>
    readonly completedAt: FieldRef<"ImportJob", 'DateTime'>
    readonly userId: FieldRef<"ImportJob", 'String'>
    readonly entityId: FieldRef<"ImportJob", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ImportJob findUnique
   */
  export type ImportJobFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImportJob
     */
    select?: ImportJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ImportJob
     */
    omit?: ImportJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImportJobInclude<ExtArgs> | null
    /**
     * Filter, which ImportJob to fetch.
     */
    where: ImportJobWhereUniqueInput
  }

  /**
   * ImportJob findUniqueOrThrow
   */
  export type ImportJobFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImportJob
     */
    select?: ImportJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ImportJob
     */
    omit?: ImportJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImportJobInclude<ExtArgs> | null
    /**
     * Filter, which ImportJob to fetch.
     */
    where: ImportJobWhereUniqueInput
  }

  /**
   * ImportJob findFirst
   */
  export type ImportJobFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImportJob
     */
    select?: ImportJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ImportJob
     */
    omit?: ImportJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImportJobInclude<ExtArgs> | null
    /**
     * Filter, which ImportJob to fetch.
     */
    where?: ImportJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ImportJobs to fetch.
     */
    orderBy?: ImportJobOrderByWithRelationInput | ImportJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ImportJobs.
     */
    cursor?: ImportJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ImportJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ImportJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ImportJobs.
     */
    distinct?: ImportJobScalarFieldEnum | ImportJobScalarFieldEnum[]
  }

  /**
   * ImportJob findFirstOrThrow
   */
  export type ImportJobFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImportJob
     */
    select?: ImportJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ImportJob
     */
    omit?: ImportJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImportJobInclude<ExtArgs> | null
    /**
     * Filter, which ImportJob to fetch.
     */
    where?: ImportJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ImportJobs to fetch.
     */
    orderBy?: ImportJobOrderByWithRelationInput | ImportJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ImportJobs.
     */
    cursor?: ImportJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ImportJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ImportJobs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ImportJobs.
     */
    distinct?: ImportJobScalarFieldEnum | ImportJobScalarFieldEnum[]
  }

  /**
   * ImportJob findMany
   */
  export type ImportJobFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImportJob
     */
    select?: ImportJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ImportJob
     */
    omit?: ImportJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImportJobInclude<ExtArgs> | null
    /**
     * Filter, which ImportJobs to fetch.
     */
    where?: ImportJobWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ImportJobs to fetch.
     */
    orderBy?: ImportJobOrderByWithRelationInput | ImportJobOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ImportJobs.
     */
    cursor?: ImportJobWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ImportJobs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ImportJobs.
     */
    skip?: number
    distinct?: ImportJobScalarFieldEnum | ImportJobScalarFieldEnum[]
  }

  /**
   * ImportJob create
   */
  export type ImportJobCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImportJob
     */
    select?: ImportJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ImportJob
     */
    omit?: ImportJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImportJobInclude<ExtArgs> | null
    /**
     * The data needed to create a ImportJob.
     */
    data: XOR<ImportJobCreateInput, ImportJobUncheckedCreateInput>
  }

  /**
   * ImportJob createMany
   */
  export type ImportJobCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ImportJobs.
     */
    data: ImportJobCreateManyInput | ImportJobCreateManyInput[]
  }

  /**
   * ImportJob createManyAndReturn
   */
  export type ImportJobCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImportJob
     */
    select?: ImportJobSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ImportJob
     */
    omit?: ImportJobOmit<ExtArgs> | null
    /**
     * The data used to create many ImportJobs.
     */
    data: ImportJobCreateManyInput | ImportJobCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImportJobIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ImportJob update
   */
  export type ImportJobUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImportJob
     */
    select?: ImportJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ImportJob
     */
    omit?: ImportJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImportJobInclude<ExtArgs> | null
    /**
     * The data needed to update a ImportJob.
     */
    data: XOR<ImportJobUpdateInput, ImportJobUncheckedUpdateInput>
    /**
     * Choose, which ImportJob to update.
     */
    where: ImportJobWhereUniqueInput
  }

  /**
   * ImportJob updateMany
   */
  export type ImportJobUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ImportJobs.
     */
    data: XOR<ImportJobUpdateManyMutationInput, ImportJobUncheckedUpdateManyInput>
    /**
     * Filter which ImportJobs to update
     */
    where?: ImportJobWhereInput
    /**
     * Limit how many ImportJobs to update.
     */
    limit?: number
  }

  /**
   * ImportJob updateManyAndReturn
   */
  export type ImportJobUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImportJob
     */
    select?: ImportJobSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ImportJob
     */
    omit?: ImportJobOmit<ExtArgs> | null
    /**
     * The data used to update ImportJobs.
     */
    data: XOR<ImportJobUpdateManyMutationInput, ImportJobUncheckedUpdateManyInput>
    /**
     * Filter which ImportJobs to update
     */
    where?: ImportJobWhereInput
    /**
     * Limit how many ImportJobs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImportJobIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ImportJob upsert
   */
  export type ImportJobUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImportJob
     */
    select?: ImportJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ImportJob
     */
    omit?: ImportJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImportJobInclude<ExtArgs> | null
    /**
     * The filter to search for the ImportJob to update in case it exists.
     */
    where: ImportJobWhereUniqueInput
    /**
     * In case the ImportJob found by the `where` argument doesn't exist, create a new ImportJob with this data.
     */
    create: XOR<ImportJobCreateInput, ImportJobUncheckedCreateInput>
    /**
     * In case the ImportJob was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ImportJobUpdateInput, ImportJobUncheckedUpdateInput>
  }

  /**
   * ImportJob delete
   */
  export type ImportJobDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImportJob
     */
    select?: ImportJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ImportJob
     */
    omit?: ImportJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImportJobInclude<ExtArgs> | null
    /**
     * Filter which ImportJob to delete.
     */
    where: ImportJobWhereUniqueInput
  }

  /**
   * ImportJob deleteMany
   */
  export type ImportJobDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ImportJobs to delete
     */
    where?: ImportJobWhereInput
    /**
     * Limit how many ImportJobs to delete.
     */
    limit?: number
  }

  /**
   * ImportJob without action
   */
  export type ImportJobDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImportJob
     */
    select?: ImportJobSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ImportJob
     */
    omit?: ImportJobOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImportJobInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ACCUScalarFieldEnum: {
    id: 'id',
    projectId: 'projectId',
    vintage: 'vintage',
    location: 'location',
    issuanceDate: 'issuanceDate',
    serialRangeStart: 'serialRangeStart',
    serialRangeEnd: 'serialRangeEnd',
    category: 'category',
    quantity: 'quantity',
    acquisitionCost: 'acquisitionCost',
    classification: 'classification',
    acquisitionDate: 'acquisitionDate',
    entityId: 'entityId',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    status: 'status',
    loanStatus: 'loanStatus',
    loanDetails: 'loanDetails'
  };

  export type ACCUScalarFieldEnum = (typeof ACCUScalarFieldEnum)[keyof typeof ACCUScalarFieldEnum]


  export const ProjectScalarFieldEnum: {
    id: 'id',
    name: 'name',
    methodType: 'methodType',
    method: 'method'
  };

  export type ProjectScalarFieldEnum = (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum]


  export const ValuationLogScalarFieldEnum: {
    id: 'id',
    batchId: 'batchId',
    date: 'date',
    marketPrice: 'marketPrice',
    nrv: 'nrv',
    impairment: 'impairment',
    userId: 'userId',
    createdAt: 'createdAt',
    entityId: 'entityId'
  };

  export type ValuationLogScalarFieldEnum = (typeof ValuationLogScalarFieldEnum)[keyof typeof ValuationLogScalarFieldEnum]


  export const AuditLogEntryScalarFieldEnum: {
    id: 'id',
    action: 'action',
    tableName: 'tableName',
    recordId: 'recordId',
    oldValues: 'oldValues',
    newValues: 'newValues',
    userId: 'userId',
    timestamp: 'timestamp',
    ipAddress: 'ipAddress',
    entityId: 'entityId'
  };

  export type AuditLogEntryScalarFieldEnum = (typeof AuditLogEntryScalarFieldEnum)[keyof typeof AuditLogEntryScalarFieldEnum]


  export const JournalEntryScalarFieldEnum: {
    id: 'id',
    description: 'description',
    date: 'date',
    userId: 'userId',
    createdAt: 'createdAt',
    entityId: 'entityId'
  };

  export type JournalEntryScalarFieldEnum = (typeof JournalEntryScalarFieldEnum)[keyof typeof JournalEntryScalarFieldEnum]


  export const JournalLineScalarFieldEnum: {
    id: 'id',
    entryId: 'entryId',
    accountCode: 'accountCode',
    debit: 'debit',
    credit: 'credit',
    description: 'description',
    createdAt: 'createdAt',
    entityId: 'entityId'
  };

  export type JournalLineScalarFieldEnum = (typeof JournalLineScalarFieldEnum)[keyof typeof JournalLineScalarFieldEnum]


  export const XbrlTagScalarFieldEnum: {
    id: 'id',
    tagName: 'tagName',
    value: 'value',
    context: 'context',
    periodStart: 'periodStart',
    periodEnd: 'periodEnd',
    userId: 'userId',
    createdAt: 'createdAt',
    entityId: 'entityId'
  };

  export type XbrlTagScalarFieldEnum = (typeof XbrlTagScalarFieldEnum)[keyof typeof XbrlTagScalarFieldEnum]


  export const ReclassificationRequestScalarFieldEnum: {
    id: 'id',
    batchId: 'batchId',
    fromClass: 'fromClass',
    toClass: 'toClass',
    reason: 'reason',
    status: 'status',
    submittedBy: 'submittedBy',
    approvedBy: 'approvedBy',
    timestamp: 'timestamp',
    approvedAt: 'approvedAt',
    entityId: 'entityId'
  };

  export type ReclassificationRequestScalarFieldEnum = (typeof ReclassificationRequestScalarFieldEnum)[keyof typeof ReclassificationRequestScalarFieldEnum]


  export const MarketPriceScalarFieldEnum: {
    id: 'id',
    date: 'date',
    commodityType: 'commodityType',
    price: 'price',
    source: 'source',
    createdAt: 'createdAt',
    entityId: 'entityId'
  };

  export type MarketPriceScalarFieldEnum = (typeof MarketPriceScalarFieldEnum)[keyof typeof MarketPriceScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    roles: 'roles',
    preferences: 'preferences',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    entityId: 'entityId'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const UserSettingScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    roles: 'roles',
    preferences: 'preferences',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserSettingScalarFieldEnum = (typeof UserSettingScalarFieldEnum)[keyof typeof UserSettingScalarFieldEnum]


  export const EntityScalarFieldEnum: {
    id: 'id',
    name: 'name',
    legalName: 'legalName',
    address: 'address',
    contactInfo: 'contactInfo',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    status: 'status',
    parentId: 'parentId'
  };

  export type EntityScalarFieldEnum = (typeof EntityScalarFieldEnum)[keyof typeof EntityScalarFieldEnum]


  export const LoanScalarFieldEnum: {
    id: 'id',
    batchId: 'batchId',
    creditorId: 'creditorId',
    quantity: 'quantity',
    loanAmount: 'loanAmount',
    buybackRate: 'buybackRate',
    buybackDate: 'buybackDate',
    loanStatus: 'loanStatus',
    collateralValue: 'collateralValue',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    entityId: 'entityId'
  };

  export type LoanScalarFieldEnum = (typeof LoanScalarFieldEnum)[keyof typeof LoanScalarFieldEnum]


  export const CreditorScalarFieldEnum: {
    id: 'id',
    name: 'name',
    contactInfo: 'contactInfo',
    terms: 'terms',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CreditorScalarFieldEnum = (typeof CreditorScalarFieldEnum)[keyof typeof CreditorScalarFieldEnum]


  export const ImportJobScalarFieldEnum: {
    id: 'id',
    fileName: 'fileName',
    status: 'status',
    processedRows: 'processedRows',
    errorCount: 'errorCount',
    createdAt: 'createdAt',
    completedAt: 'completedAt',
    userId: 'userId',
    entityId: 'entityId'
  };

  export type ImportJobScalarFieldEnum = (typeof ImportJobScalarFieldEnum)[keyof typeof ImportJobScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Classification'
   */
  export type EnumClassificationFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Classification'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'ReclassificationStatus'
   */
  export type EnumReclassificationStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReclassificationStatus'>
    


  /**
   * Reference to a field of type 'LoanStatus'
   */
  export type EnumLoanStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'LoanStatus'>
    
  /**
   * Deep Input Types
   */


  export type ACCUWhereInput = {
    AND?: ACCUWhereInput | ACCUWhereInput[]
    OR?: ACCUWhereInput[]
    NOT?: ACCUWhereInput | ACCUWhereInput[]
    id?: StringFilter<"ACCU"> | string
    projectId?: StringFilter<"ACCU"> | string
    vintage?: IntFilter<"ACCU"> | number
    location?: StringFilter<"ACCU"> | string
    issuanceDate?: DateTimeFilter<"ACCU"> | Date | string
    serialRangeStart?: StringFilter<"ACCU"> | string
    serialRangeEnd?: StringFilter<"ACCU"> | string
    category?: StringFilter<"ACCU"> | string
    quantity?: IntFilter<"ACCU"> | number
    acquisitionCost?: FloatFilter<"ACCU"> | number
    classification?: EnumClassificationFilter<"ACCU"> | $Enums.Classification
    acquisitionDate?: DateTimeFilter<"ACCU"> | Date | string
    entityId?: StringFilter<"ACCU"> | string
    userId?: StringFilter<"ACCU"> | string
    createdAt?: DateTimeFilter<"ACCU"> | Date | string
    updatedAt?: DateTimeFilter<"ACCU"> | Date | string
    status?: StringFilter<"ACCU"> | string
    loanStatus?: BoolFilter<"ACCU"> | boolean
    loanDetails?: JsonNullableFilter<"ACCU">
    valuationLogs?: ValuationLogListRelationFilter
    reclassificationRequests?: ReclassificationRequestListRelationFilter
    loans?: LoanListRelationFilter
    auditLogEntries?: AuditLogEntryListRelationFilter
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    entity?: XOR<EntityScalarRelationFilter, EntityWhereInput>
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
  }

  export type ACCUOrderByWithRelationInput = {
    id?: SortOrder
    projectId?: SortOrder
    vintage?: SortOrder
    location?: SortOrder
    issuanceDate?: SortOrder
    serialRangeStart?: SortOrder
    serialRangeEnd?: SortOrder
    category?: SortOrder
    quantity?: SortOrder
    acquisitionCost?: SortOrder
    classification?: SortOrder
    acquisitionDate?: SortOrder
    entityId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    loanStatus?: SortOrder
    loanDetails?: SortOrderInput | SortOrder
    valuationLogs?: ValuationLogOrderByRelationAggregateInput
    reclassificationRequests?: ReclassificationRequestOrderByRelationAggregateInput
    loans?: LoanOrderByRelationAggregateInput
    auditLogEntries?: AuditLogEntryOrderByRelationAggregateInput
    createdBy?: UserOrderByWithRelationInput
    entity?: EntityOrderByWithRelationInput
    project?: ProjectOrderByWithRelationInput
  }

  export type ACCUWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ACCUWhereInput | ACCUWhereInput[]
    OR?: ACCUWhereInput[]
    NOT?: ACCUWhereInput | ACCUWhereInput[]
    projectId?: StringFilter<"ACCU"> | string
    vintage?: IntFilter<"ACCU"> | number
    location?: StringFilter<"ACCU"> | string
    issuanceDate?: DateTimeFilter<"ACCU"> | Date | string
    serialRangeStart?: StringFilter<"ACCU"> | string
    serialRangeEnd?: StringFilter<"ACCU"> | string
    category?: StringFilter<"ACCU"> | string
    quantity?: IntFilter<"ACCU"> | number
    acquisitionCost?: FloatFilter<"ACCU"> | number
    classification?: EnumClassificationFilter<"ACCU"> | $Enums.Classification
    acquisitionDate?: DateTimeFilter<"ACCU"> | Date | string
    entityId?: StringFilter<"ACCU"> | string
    userId?: StringFilter<"ACCU"> | string
    createdAt?: DateTimeFilter<"ACCU"> | Date | string
    updatedAt?: DateTimeFilter<"ACCU"> | Date | string
    status?: StringFilter<"ACCU"> | string
    loanStatus?: BoolFilter<"ACCU"> | boolean
    loanDetails?: JsonNullableFilter<"ACCU">
    valuationLogs?: ValuationLogListRelationFilter
    reclassificationRequests?: ReclassificationRequestListRelationFilter
    loans?: LoanListRelationFilter
    auditLogEntries?: AuditLogEntryListRelationFilter
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    entity?: XOR<EntityScalarRelationFilter, EntityWhereInput>
    project?: XOR<ProjectScalarRelationFilter, ProjectWhereInput>
  }, "id">

  export type ACCUOrderByWithAggregationInput = {
    id?: SortOrder
    projectId?: SortOrder
    vintage?: SortOrder
    location?: SortOrder
    issuanceDate?: SortOrder
    serialRangeStart?: SortOrder
    serialRangeEnd?: SortOrder
    category?: SortOrder
    quantity?: SortOrder
    acquisitionCost?: SortOrder
    classification?: SortOrder
    acquisitionDate?: SortOrder
    entityId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    loanStatus?: SortOrder
    loanDetails?: SortOrderInput | SortOrder
    _count?: ACCUCountOrderByAggregateInput
    _avg?: ACCUAvgOrderByAggregateInput
    _max?: ACCUMaxOrderByAggregateInput
    _min?: ACCUMinOrderByAggregateInput
    _sum?: ACCUSumOrderByAggregateInput
  }

  export type ACCUScalarWhereWithAggregatesInput = {
    AND?: ACCUScalarWhereWithAggregatesInput | ACCUScalarWhereWithAggregatesInput[]
    OR?: ACCUScalarWhereWithAggregatesInput[]
    NOT?: ACCUScalarWhereWithAggregatesInput | ACCUScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ACCU"> | string
    projectId?: StringWithAggregatesFilter<"ACCU"> | string
    vintage?: IntWithAggregatesFilter<"ACCU"> | number
    location?: StringWithAggregatesFilter<"ACCU"> | string
    issuanceDate?: DateTimeWithAggregatesFilter<"ACCU"> | Date | string
    serialRangeStart?: StringWithAggregatesFilter<"ACCU"> | string
    serialRangeEnd?: StringWithAggregatesFilter<"ACCU"> | string
    category?: StringWithAggregatesFilter<"ACCU"> | string
    quantity?: IntWithAggregatesFilter<"ACCU"> | number
    acquisitionCost?: FloatWithAggregatesFilter<"ACCU"> | number
    classification?: EnumClassificationWithAggregatesFilter<"ACCU"> | $Enums.Classification
    acquisitionDate?: DateTimeWithAggregatesFilter<"ACCU"> | Date | string
    entityId?: StringWithAggregatesFilter<"ACCU"> | string
    userId?: StringWithAggregatesFilter<"ACCU"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ACCU"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ACCU"> | Date | string
    status?: StringWithAggregatesFilter<"ACCU"> | string
    loanStatus?: BoolWithAggregatesFilter<"ACCU"> | boolean
    loanDetails?: JsonNullableWithAggregatesFilter<"ACCU">
  }

  export type ProjectWhereInput = {
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    id?: StringFilter<"Project"> | string
    name?: StringFilter<"Project"> | string
    methodType?: StringFilter<"Project"> | string
    method?: StringFilter<"Project"> | string
    accus?: ACCUListRelationFilter
  }

  export type ProjectOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    methodType?: SortOrder
    method?: SortOrder
    accus?: ACCUOrderByRelationAggregateInput
  }

  export type ProjectWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    name?: StringFilter<"Project"> | string
    methodType?: StringFilter<"Project"> | string
    method?: StringFilter<"Project"> | string
    accus?: ACCUListRelationFilter
  }, "id">

  export type ProjectOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    methodType?: SortOrder
    method?: SortOrder
    _count?: ProjectCountOrderByAggregateInput
    _max?: ProjectMaxOrderByAggregateInput
    _min?: ProjectMinOrderByAggregateInput
  }

  export type ProjectScalarWhereWithAggregatesInput = {
    AND?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    OR?: ProjectScalarWhereWithAggregatesInput[]
    NOT?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Project"> | string
    name?: StringWithAggregatesFilter<"Project"> | string
    methodType?: StringWithAggregatesFilter<"Project"> | string
    method?: StringWithAggregatesFilter<"Project"> | string
  }

  export type ValuationLogWhereInput = {
    AND?: ValuationLogWhereInput | ValuationLogWhereInput[]
    OR?: ValuationLogWhereInput[]
    NOT?: ValuationLogWhereInput | ValuationLogWhereInput[]
    id?: StringFilter<"ValuationLog"> | string
    batchId?: StringFilter<"ValuationLog"> | string
    date?: DateTimeFilter<"ValuationLog"> | Date | string
    marketPrice?: FloatFilter<"ValuationLog"> | number
    nrv?: FloatFilter<"ValuationLog"> | number
    impairment?: FloatNullableFilter<"ValuationLog"> | number | null
    userId?: StringFilter<"ValuationLog"> | string
    createdAt?: DateTimeFilter<"ValuationLog"> | Date | string
    entityId?: StringFilter<"ValuationLog"> | string
    batch?: XOR<ACCUScalarRelationFilter, ACCUWhereInput>
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ValuationLogOrderByWithRelationInput = {
    id?: SortOrder
    batchId?: SortOrder
    date?: SortOrder
    marketPrice?: SortOrder
    nrv?: SortOrder
    impairment?: SortOrderInput | SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    entityId?: SortOrder
    batch?: ACCUOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
  }

  export type ValuationLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ValuationLogWhereInput | ValuationLogWhereInput[]
    OR?: ValuationLogWhereInput[]
    NOT?: ValuationLogWhereInput | ValuationLogWhereInput[]
    batchId?: StringFilter<"ValuationLog"> | string
    date?: DateTimeFilter<"ValuationLog"> | Date | string
    marketPrice?: FloatFilter<"ValuationLog"> | number
    nrv?: FloatFilter<"ValuationLog"> | number
    impairment?: FloatNullableFilter<"ValuationLog"> | number | null
    userId?: StringFilter<"ValuationLog"> | string
    createdAt?: DateTimeFilter<"ValuationLog"> | Date | string
    entityId?: StringFilter<"ValuationLog"> | string
    batch?: XOR<ACCUScalarRelationFilter, ACCUWhereInput>
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ValuationLogOrderByWithAggregationInput = {
    id?: SortOrder
    batchId?: SortOrder
    date?: SortOrder
    marketPrice?: SortOrder
    nrv?: SortOrder
    impairment?: SortOrderInput | SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    entityId?: SortOrder
    _count?: ValuationLogCountOrderByAggregateInput
    _avg?: ValuationLogAvgOrderByAggregateInput
    _max?: ValuationLogMaxOrderByAggregateInput
    _min?: ValuationLogMinOrderByAggregateInput
    _sum?: ValuationLogSumOrderByAggregateInput
  }

  export type ValuationLogScalarWhereWithAggregatesInput = {
    AND?: ValuationLogScalarWhereWithAggregatesInput | ValuationLogScalarWhereWithAggregatesInput[]
    OR?: ValuationLogScalarWhereWithAggregatesInput[]
    NOT?: ValuationLogScalarWhereWithAggregatesInput | ValuationLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ValuationLog"> | string
    batchId?: StringWithAggregatesFilter<"ValuationLog"> | string
    date?: DateTimeWithAggregatesFilter<"ValuationLog"> | Date | string
    marketPrice?: FloatWithAggregatesFilter<"ValuationLog"> | number
    nrv?: FloatWithAggregatesFilter<"ValuationLog"> | number
    impairment?: FloatNullableWithAggregatesFilter<"ValuationLog"> | number | null
    userId?: StringWithAggregatesFilter<"ValuationLog"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ValuationLog"> | Date | string
    entityId?: StringWithAggregatesFilter<"ValuationLog"> | string
  }

  export type AuditLogEntryWhereInput = {
    AND?: AuditLogEntryWhereInput | AuditLogEntryWhereInput[]
    OR?: AuditLogEntryWhereInput[]
    NOT?: AuditLogEntryWhereInput | AuditLogEntryWhereInput[]
    id?: StringFilter<"AuditLogEntry"> | string
    action?: StringFilter<"AuditLogEntry"> | string
    tableName?: StringFilter<"AuditLogEntry"> | string
    recordId?: StringFilter<"AuditLogEntry"> | string
    oldValues?: JsonNullableFilter<"AuditLogEntry">
    newValues?: JsonNullableFilter<"AuditLogEntry">
    userId?: StringFilter<"AuditLogEntry"> | string
    timestamp?: DateTimeFilter<"AuditLogEntry"> | Date | string
    ipAddress?: StringNullableFilter<"AuditLogEntry"> | string | null
    entityId?: StringFilter<"AuditLogEntry"> | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    batch?: XOR<ACCUNullableScalarRelationFilter, ACCUWhereInput> | null
  }

  export type AuditLogEntryOrderByWithRelationInput = {
    id?: SortOrder
    action?: SortOrder
    tableName?: SortOrder
    recordId?: SortOrder
    oldValues?: SortOrderInput | SortOrder
    newValues?: SortOrderInput | SortOrder
    userId?: SortOrder
    timestamp?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    entityId?: SortOrder
    user?: UserOrderByWithRelationInput
    batch?: ACCUOrderByWithRelationInput
  }

  export type AuditLogEntryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuditLogEntryWhereInput | AuditLogEntryWhereInput[]
    OR?: AuditLogEntryWhereInput[]
    NOT?: AuditLogEntryWhereInput | AuditLogEntryWhereInput[]
    action?: StringFilter<"AuditLogEntry"> | string
    tableName?: StringFilter<"AuditLogEntry"> | string
    recordId?: StringFilter<"AuditLogEntry"> | string
    oldValues?: JsonNullableFilter<"AuditLogEntry">
    newValues?: JsonNullableFilter<"AuditLogEntry">
    userId?: StringFilter<"AuditLogEntry"> | string
    timestamp?: DateTimeFilter<"AuditLogEntry"> | Date | string
    ipAddress?: StringNullableFilter<"AuditLogEntry"> | string | null
    entityId?: StringFilter<"AuditLogEntry"> | string
    user?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    batch?: XOR<ACCUNullableScalarRelationFilter, ACCUWhereInput> | null
  }, "id">

  export type AuditLogEntryOrderByWithAggregationInput = {
    id?: SortOrder
    action?: SortOrder
    tableName?: SortOrder
    recordId?: SortOrder
    oldValues?: SortOrderInput | SortOrder
    newValues?: SortOrderInput | SortOrder
    userId?: SortOrder
    timestamp?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    entityId?: SortOrder
    _count?: AuditLogEntryCountOrderByAggregateInput
    _max?: AuditLogEntryMaxOrderByAggregateInput
    _min?: AuditLogEntryMinOrderByAggregateInput
  }

  export type AuditLogEntryScalarWhereWithAggregatesInput = {
    AND?: AuditLogEntryScalarWhereWithAggregatesInput | AuditLogEntryScalarWhereWithAggregatesInput[]
    OR?: AuditLogEntryScalarWhereWithAggregatesInput[]
    NOT?: AuditLogEntryScalarWhereWithAggregatesInput | AuditLogEntryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuditLogEntry"> | string
    action?: StringWithAggregatesFilter<"AuditLogEntry"> | string
    tableName?: StringWithAggregatesFilter<"AuditLogEntry"> | string
    recordId?: StringWithAggregatesFilter<"AuditLogEntry"> | string
    oldValues?: JsonNullableWithAggregatesFilter<"AuditLogEntry">
    newValues?: JsonNullableWithAggregatesFilter<"AuditLogEntry">
    userId?: StringWithAggregatesFilter<"AuditLogEntry"> | string
    timestamp?: DateTimeWithAggregatesFilter<"AuditLogEntry"> | Date | string
    ipAddress?: StringNullableWithAggregatesFilter<"AuditLogEntry"> | string | null
    entityId?: StringWithAggregatesFilter<"AuditLogEntry"> | string
  }

  export type JournalEntryWhereInput = {
    AND?: JournalEntryWhereInput | JournalEntryWhereInput[]
    OR?: JournalEntryWhereInput[]
    NOT?: JournalEntryWhereInput | JournalEntryWhereInput[]
    id?: StringFilter<"JournalEntry"> | string
    description?: StringFilter<"JournalEntry"> | string
    date?: DateTimeFilter<"JournalEntry"> | Date | string
    userId?: StringFilter<"JournalEntry"> | string
    createdAt?: DateTimeFilter<"JournalEntry"> | Date | string
    entityId?: StringFilter<"JournalEntry"> | string
    lines?: JournalLineListRelationFilter
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type JournalEntryOrderByWithRelationInput = {
    id?: SortOrder
    description?: SortOrder
    date?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    entityId?: SortOrder
    lines?: JournalLineOrderByRelationAggregateInput
    createdBy?: UserOrderByWithRelationInput
  }

  export type JournalEntryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: JournalEntryWhereInput | JournalEntryWhereInput[]
    OR?: JournalEntryWhereInput[]
    NOT?: JournalEntryWhereInput | JournalEntryWhereInput[]
    description?: StringFilter<"JournalEntry"> | string
    date?: DateTimeFilter<"JournalEntry"> | Date | string
    userId?: StringFilter<"JournalEntry"> | string
    createdAt?: DateTimeFilter<"JournalEntry"> | Date | string
    entityId?: StringFilter<"JournalEntry"> | string
    lines?: JournalLineListRelationFilter
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type JournalEntryOrderByWithAggregationInput = {
    id?: SortOrder
    description?: SortOrder
    date?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    entityId?: SortOrder
    _count?: JournalEntryCountOrderByAggregateInput
    _max?: JournalEntryMaxOrderByAggregateInput
    _min?: JournalEntryMinOrderByAggregateInput
  }

  export type JournalEntryScalarWhereWithAggregatesInput = {
    AND?: JournalEntryScalarWhereWithAggregatesInput | JournalEntryScalarWhereWithAggregatesInput[]
    OR?: JournalEntryScalarWhereWithAggregatesInput[]
    NOT?: JournalEntryScalarWhereWithAggregatesInput | JournalEntryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"JournalEntry"> | string
    description?: StringWithAggregatesFilter<"JournalEntry"> | string
    date?: DateTimeWithAggregatesFilter<"JournalEntry"> | Date | string
    userId?: StringWithAggregatesFilter<"JournalEntry"> | string
    createdAt?: DateTimeWithAggregatesFilter<"JournalEntry"> | Date | string
    entityId?: StringWithAggregatesFilter<"JournalEntry"> | string
  }

  export type JournalLineWhereInput = {
    AND?: JournalLineWhereInput | JournalLineWhereInput[]
    OR?: JournalLineWhereInput[]
    NOT?: JournalLineWhereInput | JournalLineWhereInput[]
    id?: StringFilter<"JournalLine"> | string
    entryId?: StringFilter<"JournalLine"> | string
    accountCode?: StringFilter<"JournalLine"> | string
    debit?: FloatFilter<"JournalLine"> | number
    credit?: FloatFilter<"JournalLine"> | number
    description?: StringNullableFilter<"JournalLine"> | string | null
    createdAt?: DateTimeFilter<"JournalLine"> | Date | string
    entityId?: StringFilter<"JournalLine"> | string
    entry?: XOR<JournalEntryScalarRelationFilter, JournalEntryWhereInput>
  }

  export type JournalLineOrderByWithRelationInput = {
    id?: SortOrder
    entryId?: SortOrder
    accountCode?: SortOrder
    debit?: SortOrder
    credit?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    entityId?: SortOrder
    entry?: JournalEntryOrderByWithRelationInput
  }

  export type JournalLineWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: JournalLineWhereInput | JournalLineWhereInput[]
    OR?: JournalLineWhereInput[]
    NOT?: JournalLineWhereInput | JournalLineWhereInput[]
    entryId?: StringFilter<"JournalLine"> | string
    accountCode?: StringFilter<"JournalLine"> | string
    debit?: FloatFilter<"JournalLine"> | number
    credit?: FloatFilter<"JournalLine"> | number
    description?: StringNullableFilter<"JournalLine"> | string | null
    createdAt?: DateTimeFilter<"JournalLine"> | Date | string
    entityId?: StringFilter<"JournalLine"> | string
    entry?: XOR<JournalEntryScalarRelationFilter, JournalEntryWhereInput>
  }, "id">

  export type JournalLineOrderByWithAggregationInput = {
    id?: SortOrder
    entryId?: SortOrder
    accountCode?: SortOrder
    debit?: SortOrder
    credit?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    entityId?: SortOrder
    _count?: JournalLineCountOrderByAggregateInput
    _avg?: JournalLineAvgOrderByAggregateInput
    _max?: JournalLineMaxOrderByAggregateInput
    _min?: JournalLineMinOrderByAggregateInput
    _sum?: JournalLineSumOrderByAggregateInput
  }

  export type JournalLineScalarWhereWithAggregatesInput = {
    AND?: JournalLineScalarWhereWithAggregatesInput | JournalLineScalarWhereWithAggregatesInput[]
    OR?: JournalLineScalarWhereWithAggregatesInput[]
    NOT?: JournalLineScalarWhereWithAggregatesInput | JournalLineScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"JournalLine"> | string
    entryId?: StringWithAggregatesFilter<"JournalLine"> | string
    accountCode?: StringWithAggregatesFilter<"JournalLine"> | string
    debit?: FloatWithAggregatesFilter<"JournalLine"> | number
    credit?: FloatWithAggregatesFilter<"JournalLine"> | number
    description?: StringNullableWithAggregatesFilter<"JournalLine"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"JournalLine"> | Date | string
    entityId?: StringWithAggregatesFilter<"JournalLine"> | string
  }

  export type XbrlTagWhereInput = {
    AND?: XbrlTagWhereInput | XbrlTagWhereInput[]
    OR?: XbrlTagWhereInput[]
    NOT?: XbrlTagWhereInput | XbrlTagWhereInput[]
    id?: StringFilter<"XbrlTag"> | string
    tagName?: StringFilter<"XbrlTag"> | string
    value?: StringFilter<"XbrlTag"> | string
    context?: StringFilter<"XbrlTag"> | string
    periodStart?: DateTimeNullableFilter<"XbrlTag"> | Date | string | null
    periodEnd?: DateTimeNullableFilter<"XbrlTag"> | Date | string | null
    userId?: StringFilter<"XbrlTag"> | string
    createdAt?: DateTimeFilter<"XbrlTag"> | Date | string
    entityId?: StringFilter<"XbrlTag"> | string
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type XbrlTagOrderByWithRelationInput = {
    id?: SortOrder
    tagName?: SortOrder
    value?: SortOrder
    context?: SortOrder
    periodStart?: SortOrderInput | SortOrder
    periodEnd?: SortOrderInput | SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    entityId?: SortOrder
    createdBy?: UserOrderByWithRelationInput
  }

  export type XbrlTagWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: XbrlTagWhereInput | XbrlTagWhereInput[]
    OR?: XbrlTagWhereInput[]
    NOT?: XbrlTagWhereInput | XbrlTagWhereInput[]
    tagName?: StringFilter<"XbrlTag"> | string
    value?: StringFilter<"XbrlTag"> | string
    context?: StringFilter<"XbrlTag"> | string
    periodStart?: DateTimeNullableFilter<"XbrlTag"> | Date | string | null
    periodEnd?: DateTimeNullableFilter<"XbrlTag"> | Date | string | null
    userId?: StringFilter<"XbrlTag"> | string
    createdAt?: DateTimeFilter<"XbrlTag"> | Date | string
    entityId?: StringFilter<"XbrlTag"> | string
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type XbrlTagOrderByWithAggregationInput = {
    id?: SortOrder
    tagName?: SortOrder
    value?: SortOrder
    context?: SortOrder
    periodStart?: SortOrderInput | SortOrder
    periodEnd?: SortOrderInput | SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    entityId?: SortOrder
    _count?: XbrlTagCountOrderByAggregateInput
    _max?: XbrlTagMaxOrderByAggregateInput
    _min?: XbrlTagMinOrderByAggregateInput
  }

  export type XbrlTagScalarWhereWithAggregatesInput = {
    AND?: XbrlTagScalarWhereWithAggregatesInput | XbrlTagScalarWhereWithAggregatesInput[]
    OR?: XbrlTagScalarWhereWithAggregatesInput[]
    NOT?: XbrlTagScalarWhereWithAggregatesInput | XbrlTagScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"XbrlTag"> | string
    tagName?: StringWithAggregatesFilter<"XbrlTag"> | string
    value?: StringWithAggregatesFilter<"XbrlTag"> | string
    context?: StringWithAggregatesFilter<"XbrlTag"> | string
    periodStart?: DateTimeNullableWithAggregatesFilter<"XbrlTag"> | Date | string | null
    periodEnd?: DateTimeNullableWithAggregatesFilter<"XbrlTag"> | Date | string | null
    userId?: StringWithAggregatesFilter<"XbrlTag"> | string
    createdAt?: DateTimeWithAggregatesFilter<"XbrlTag"> | Date | string
    entityId?: StringWithAggregatesFilter<"XbrlTag"> | string
  }

  export type ReclassificationRequestWhereInput = {
    AND?: ReclassificationRequestWhereInput | ReclassificationRequestWhereInput[]
    OR?: ReclassificationRequestWhereInput[]
    NOT?: ReclassificationRequestWhereInput | ReclassificationRequestWhereInput[]
    id?: StringFilter<"ReclassificationRequest"> | string
    batchId?: StringFilter<"ReclassificationRequest"> | string
    fromClass?: EnumClassificationFilter<"ReclassificationRequest"> | $Enums.Classification
    toClass?: EnumClassificationFilter<"ReclassificationRequest"> | $Enums.Classification
    reason?: StringNullableFilter<"ReclassificationRequest"> | string | null
    status?: EnumReclassificationStatusFilter<"ReclassificationRequest"> | $Enums.ReclassificationStatus
    submittedBy?: StringFilter<"ReclassificationRequest"> | string
    approvedBy?: StringNullableFilter<"ReclassificationRequest"> | string | null
    timestamp?: DateTimeFilter<"ReclassificationRequest"> | Date | string
    approvedAt?: DateTimeNullableFilter<"ReclassificationRequest"> | Date | string | null
    entityId?: StringFilter<"ReclassificationRequest"> | string
    batch?: XOR<ACCUScalarRelationFilter, ACCUWhereInput>
    submittedByUser?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ReclassificationRequestOrderByWithRelationInput = {
    id?: SortOrder
    batchId?: SortOrder
    fromClass?: SortOrder
    toClass?: SortOrder
    reason?: SortOrderInput | SortOrder
    status?: SortOrder
    submittedBy?: SortOrder
    approvedBy?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    approvedAt?: SortOrderInput | SortOrder
    entityId?: SortOrder
    batch?: ACCUOrderByWithRelationInput
    submittedByUser?: UserOrderByWithRelationInput
  }

  export type ReclassificationRequestWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReclassificationRequestWhereInput | ReclassificationRequestWhereInput[]
    OR?: ReclassificationRequestWhereInput[]
    NOT?: ReclassificationRequestWhereInput | ReclassificationRequestWhereInput[]
    batchId?: StringFilter<"ReclassificationRequest"> | string
    fromClass?: EnumClassificationFilter<"ReclassificationRequest"> | $Enums.Classification
    toClass?: EnumClassificationFilter<"ReclassificationRequest"> | $Enums.Classification
    reason?: StringNullableFilter<"ReclassificationRequest"> | string | null
    status?: EnumReclassificationStatusFilter<"ReclassificationRequest"> | $Enums.ReclassificationStatus
    submittedBy?: StringFilter<"ReclassificationRequest"> | string
    approvedBy?: StringNullableFilter<"ReclassificationRequest"> | string | null
    timestamp?: DateTimeFilter<"ReclassificationRequest"> | Date | string
    approvedAt?: DateTimeNullableFilter<"ReclassificationRequest"> | Date | string | null
    entityId?: StringFilter<"ReclassificationRequest"> | string
    batch?: XOR<ACCUScalarRelationFilter, ACCUWhereInput>
    submittedByUser?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ReclassificationRequestOrderByWithAggregationInput = {
    id?: SortOrder
    batchId?: SortOrder
    fromClass?: SortOrder
    toClass?: SortOrder
    reason?: SortOrderInput | SortOrder
    status?: SortOrder
    submittedBy?: SortOrder
    approvedBy?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    approvedAt?: SortOrderInput | SortOrder
    entityId?: SortOrder
    _count?: ReclassificationRequestCountOrderByAggregateInput
    _max?: ReclassificationRequestMaxOrderByAggregateInput
    _min?: ReclassificationRequestMinOrderByAggregateInput
  }

  export type ReclassificationRequestScalarWhereWithAggregatesInput = {
    AND?: ReclassificationRequestScalarWhereWithAggregatesInput | ReclassificationRequestScalarWhereWithAggregatesInput[]
    OR?: ReclassificationRequestScalarWhereWithAggregatesInput[]
    NOT?: ReclassificationRequestScalarWhereWithAggregatesInput | ReclassificationRequestScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ReclassificationRequest"> | string
    batchId?: StringWithAggregatesFilter<"ReclassificationRequest"> | string
    fromClass?: EnumClassificationWithAggregatesFilter<"ReclassificationRequest"> | $Enums.Classification
    toClass?: EnumClassificationWithAggregatesFilter<"ReclassificationRequest"> | $Enums.Classification
    reason?: StringNullableWithAggregatesFilter<"ReclassificationRequest"> | string | null
    status?: EnumReclassificationStatusWithAggregatesFilter<"ReclassificationRequest"> | $Enums.ReclassificationStatus
    submittedBy?: StringWithAggregatesFilter<"ReclassificationRequest"> | string
    approvedBy?: StringNullableWithAggregatesFilter<"ReclassificationRequest"> | string | null
    timestamp?: DateTimeWithAggregatesFilter<"ReclassificationRequest"> | Date | string
    approvedAt?: DateTimeNullableWithAggregatesFilter<"ReclassificationRequest"> | Date | string | null
    entityId?: StringWithAggregatesFilter<"ReclassificationRequest"> | string
  }

  export type MarketPriceWhereInput = {
    AND?: MarketPriceWhereInput | MarketPriceWhereInput[]
    OR?: MarketPriceWhereInput[]
    NOT?: MarketPriceWhereInput | MarketPriceWhereInput[]
    id?: StringFilter<"MarketPrice"> | string
    date?: DateTimeFilter<"MarketPrice"> | Date | string
    commodityType?: StringFilter<"MarketPrice"> | string
    price?: FloatFilter<"MarketPrice"> | number
    source?: StringFilter<"MarketPrice"> | string
    createdAt?: DateTimeFilter<"MarketPrice"> | Date | string
    entityId?: StringFilter<"MarketPrice"> | string
  }

  export type MarketPriceOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    commodityType?: SortOrder
    price?: SortOrder
    source?: SortOrder
    createdAt?: SortOrder
    entityId?: SortOrder
  }

  export type MarketPriceWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MarketPriceWhereInput | MarketPriceWhereInput[]
    OR?: MarketPriceWhereInput[]
    NOT?: MarketPriceWhereInput | MarketPriceWhereInput[]
    date?: DateTimeFilter<"MarketPrice"> | Date | string
    commodityType?: StringFilter<"MarketPrice"> | string
    price?: FloatFilter<"MarketPrice"> | number
    source?: StringFilter<"MarketPrice"> | string
    createdAt?: DateTimeFilter<"MarketPrice"> | Date | string
    entityId?: StringFilter<"MarketPrice"> | string
  }, "id">

  export type MarketPriceOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    commodityType?: SortOrder
    price?: SortOrder
    source?: SortOrder
    createdAt?: SortOrder
    entityId?: SortOrder
    _count?: MarketPriceCountOrderByAggregateInput
    _avg?: MarketPriceAvgOrderByAggregateInput
    _max?: MarketPriceMaxOrderByAggregateInput
    _min?: MarketPriceMinOrderByAggregateInput
    _sum?: MarketPriceSumOrderByAggregateInput
  }

  export type MarketPriceScalarWhereWithAggregatesInput = {
    AND?: MarketPriceScalarWhereWithAggregatesInput | MarketPriceScalarWhereWithAggregatesInput[]
    OR?: MarketPriceScalarWhereWithAggregatesInput[]
    NOT?: MarketPriceScalarWhereWithAggregatesInput | MarketPriceScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"MarketPrice"> | string
    date?: DateTimeWithAggregatesFilter<"MarketPrice"> | Date | string
    commodityType?: StringWithAggregatesFilter<"MarketPrice"> | string
    price?: FloatWithAggregatesFilter<"MarketPrice"> | number
    source?: StringWithAggregatesFilter<"MarketPrice"> | string
    createdAt?: DateTimeWithAggregatesFilter<"MarketPrice"> | Date | string
    entityId?: StringWithAggregatesFilter<"MarketPrice"> | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    roles?: StringFilter<"User"> | string
    preferences?: JsonNullableFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    entityId?: StringNullableFilter<"User"> | string | null
    batches?: ACCUListRelationFilter
    valuationLogs?: ValuationLogListRelationFilter
    auditLogs?: AuditLogEntryListRelationFilter
    journalEntries?: JournalEntryListRelationFilter
    reclassRequests?: ReclassificationRequestListRelationFilter
    settings?: UserSettingListRelationFilter
    xbrlTags?: XbrlTagListRelationFilter
    importJobs?: ImportJobListRelationFilter
    entity?: XOR<EntityNullableScalarRelationFilter, EntityWhereInput> | null
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    roles?: SortOrder
    preferences?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    entityId?: SortOrderInput | SortOrder
    batches?: ACCUOrderByRelationAggregateInput
    valuationLogs?: ValuationLogOrderByRelationAggregateInput
    auditLogs?: AuditLogEntryOrderByRelationAggregateInput
    journalEntries?: JournalEntryOrderByRelationAggregateInput
    reclassRequests?: ReclassificationRequestOrderByRelationAggregateInput
    settings?: UserSettingOrderByRelationAggregateInput
    xbrlTags?: XbrlTagOrderByRelationAggregateInput
    importJobs?: ImportJobOrderByRelationAggregateInput
    entity?: EntityOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    roles?: StringFilter<"User"> | string
    preferences?: JsonNullableFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    entityId?: StringNullableFilter<"User"> | string | null
    batches?: ACCUListRelationFilter
    valuationLogs?: ValuationLogListRelationFilter
    auditLogs?: AuditLogEntryListRelationFilter
    journalEntries?: JournalEntryListRelationFilter
    reclassRequests?: ReclassificationRequestListRelationFilter
    settings?: UserSettingListRelationFilter
    xbrlTags?: XbrlTagListRelationFilter
    importJobs?: ImportJobListRelationFilter
    entity?: XOR<EntityNullableScalarRelationFilter, EntityWhereInput> | null
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    roles?: SortOrder
    preferences?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    entityId?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    roles?: StringWithAggregatesFilter<"User"> | string
    preferences?: JsonNullableWithAggregatesFilter<"User">
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    entityId?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type UserSettingWhereInput = {
    AND?: UserSettingWhereInput | UserSettingWhereInput[]
    OR?: UserSettingWhereInput[]
    NOT?: UserSettingWhereInput | UserSettingWhereInput[]
    id?: StringFilter<"UserSetting"> | string
    userId?: StringFilter<"UserSetting"> | string
    roles?: StringFilter<"UserSetting"> | string
    preferences?: JsonNullableFilter<"UserSetting">
    createdAt?: DateTimeFilter<"UserSetting"> | Date | string
    updatedAt?: DateTimeFilter<"UserSetting"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type UserSettingOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    roles?: SortOrder
    preferences?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type UserSettingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: UserSettingWhereInput | UserSettingWhereInput[]
    OR?: UserSettingWhereInput[]
    NOT?: UserSettingWhereInput | UserSettingWhereInput[]
    roles?: StringFilter<"UserSetting"> | string
    preferences?: JsonNullableFilter<"UserSetting">
    createdAt?: DateTimeFilter<"UserSetting"> | Date | string
    updatedAt?: DateTimeFilter<"UserSetting"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type UserSettingOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    roles?: SortOrder
    preferences?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserSettingCountOrderByAggregateInput
    _max?: UserSettingMaxOrderByAggregateInput
    _min?: UserSettingMinOrderByAggregateInput
  }

  export type UserSettingScalarWhereWithAggregatesInput = {
    AND?: UserSettingScalarWhereWithAggregatesInput | UserSettingScalarWhereWithAggregatesInput[]
    OR?: UserSettingScalarWhereWithAggregatesInput[]
    NOT?: UserSettingScalarWhereWithAggregatesInput | UserSettingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserSetting"> | string
    userId?: StringWithAggregatesFilter<"UserSetting"> | string
    roles?: StringWithAggregatesFilter<"UserSetting"> | string
    preferences?: JsonNullableWithAggregatesFilter<"UserSetting">
    createdAt?: DateTimeWithAggregatesFilter<"UserSetting"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UserSetting"> | Date | string
  }

  export type EntityWhereInput = {
    AND?: EntityWhereInput | EntityWhereInput[]
    OR?: EntityWhereInput[]
    NOT?: EntityWhereInput | EntityWhereInput[]
    id?: StringFilter<"Entity"> | string
    name?: StringFilter<"Entity"> | string
    legalName?: StringNullableFilter<"Entity"> | string | null
    address?: JsonNullableFilter<"Entity">
    contactInfo?: JsonNullableFilter<"Entity">
    createdAt?: DateTimeFilter<"Entity"> | Date | string
    updatedAt?: DateTimeFilter<"Entity"> | Date | string
    status?: StringFilter<"Entity"> | string
    parentId?: StringNullableFilter<"Entity"> | string | null
    batches?: ACCUListRelationFilter
    users?: UserListRelationFilter
    loans?: LoanListRelationFilter
  }

  export type EntityOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    legalName?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    contactInfo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    parentId?: SortOrderInput | SortOrder
    batches?: ACCUOrderByRelationAggregateInput
    users?: UserOrderByRelationAggregateInput
    loans?: LoanOrderByRelationAggregateInput
  }

  export type EntityWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: EntityWhereInput | EntityWhereInput[]
    OR?: EntityWhereInput[]
    NOT?: EntityWhereInput | EntityWhereInput[]
    name?: StringFilter<"Entity"> | string
    legalName?: StringNullableFilter<"Entity"> | string | null
    address?: JsonNullableFilter<"Entity">
    contactInfo?: JsonNullableFilter<"Entity">
    createdAt?: DateTimeFilter<"Entity"> | Date | string
    updatedAt?: DateTimeFilter<"Entity"> | Date | string
    status?: StringFilter<"Entity"> | string
    parentId?: StringNullableFilter<"Entity"> | string | null
    batches?: ACCUListRelationFilter
    users?: UserListRelationFilter
    loans?: LoanListRelationFilter
  }, "id">

  export type EntityOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    legalName?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    contactInfo?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    parentId?: SortOrderInput | SortOrder
    _count?: EntityCountOrderByAggregateInput
    _max?: EntityMaxOrderByAggregateInput
    _min?: EntityMinOrderByAggregateInput
  }

  export type EntityScalarWhereWithAggregatesInput = {
    AND?: EntityScalarWhereWithAggregatesInput | EntityScalarWhereWithAggregatesInput[]
    OR?: EntityScalarWhereWithAggregatesInput[]
    NOT?: EntityScalarWhereWithAggregatesInput | EntityScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Entity"> | string
    name?: StringWithAggregatesFilter<"Entity"> | string
    legalName?: StringNullableWithAggregatesFilter<"Entity"> | string | null
    address?: JsonNullableWithAggregatesFilter<"Entity">
    contactInfo?: JsonNullableWithAggregatesFilter<"Entity">
    createdAt?: DateTimeWithAggregatesFilter<"Entity"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Entity"> | Date | string
    status?: StringWithAggregatesFilter<"Entity"> | string
    parentId?: StringNullableWithAggregatesFilter<"Entity"> | string | null
  }

  export type LoanWhereInput = {
    AND?: LoanWhereInput | LoanWhereInput[]
    OR?: LoanWhereInput[]
    NOT?: LoanWhereInput | LoanWhereInput[]
    id?: StringFilter<"Loan"> | string
    batchId?: StringFilter<"Loan"> | string
    creditorId?: StringFilter<"Loan"> | string
    quantity?: IntFilter<"Loan"> | number
    loanAmount?: FloatFilter<"Loan"> | number
    buybackRate?: FloatNullableFilter<"Loan"> | number | null
    buybackDate?: DateTimeNullableFilter<"Loan"> | Date | string | null
    loanStatus?: EnumLoanStatusFilter<"Loan"> | $Enums.LoanStatus
    collateralValue?: FloatNullableFilter<"Loan"> | number | null
    createdAt?: DateTimeFilter<"Loan"> | Date | string
    updatedAt?: DateTimeFilter<"Loan"> | Date | string
    entityId?: StringFilter<"Loan"> | string
    batch?: XOR<ACCUScalarRelationFilter, ACCUWhereInput>
    creditor?: XOR<CreditorScalarRelationFilter, CreditorWhereInput>
    entity?: XOR<EntityScalarRelationFilter, EntityWhereInput>
  }

  export type LoanOrderByWithRelationInput = {
    id?: SortOrder
    batchId?: SortOrder
    creditorId?: SortOrder
    quantity?: SortOrder
    loanAmount?: SortOrder
    buybackRate?: SortOrderInput | SortOrder
    buybackDate?: SortOrderInput | SortOrder
    loanStatus?: SortOrder
    collateralValue?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    entityId?: SortOrder
    batch?: ACCUOrderByWithRelationInput
    creditor?: CreditorOrderByWithRelationInput
    entity?: EntityOrderByWithRelationInput
  }

  export type LoanWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LoanWhereInput | LoanWhereInput[]
    OR?: LoanWhereInput[]
    NOT?: LoanWhereInput | LoanWhereInput[]
    batchId?: StringFilter<"Loan"> | string
    creditorId?: StringFilter<"Loan"> | string
    quantity?: IntFilter<"Loan"> | number
    loanAmount?: FloatFilter<"Loan"> | number
    buybackRate?: FloatNullableFilter<"Loan"> | number | null
    buybackDate?: DateTimeNullableFilter<"Loan"> | Date | string | null
    loanStatus?: EnumLoanStatusFilter<"Loan"> | $Enums.LoanStatus
    collateralValue?: FloatNullableFilter<"Loan"> | number | null
    createdAt?: DateTimeFilter<"Loan"> | Date | string
    updatedAt?: DateTimeFilter<"Loan"> | Date | string
    entityId?: StringFilter<"Loan"> | string
    batch?: XOR<ACCUScalarRelationFilter, ACCUWhereInput>
    creditor?: XOR<CreditorScalarRelationFilter, CreditorWhereInput>
    entity?: XOR<EntityScalarRelationFilter, EntityWhereInput>
  }, "id">

  export type LoanOrderByWithAggregationInput = {
    id?: SortOrder
    batchId?: SortOrder
    creditorId?: SortOrder
    quantity?: SortOrder
    loanAmount?: SortOrder
    buybackRate?: SortOrderInput | SortOrder
    buybackDate?: SortOrderInput | SortOrder
    loanStatus?: SortOrder
    collateralValue?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    entityId?: SortOrder
    _count?: LoanCountOrderByAggregateInput
    _avg?: LoanAvgOrderByAggregateInput
    _max?: LoanMaxOrderByAggregateInput
    _min?: LoanMinOrderByAggregateInput
    _sum?: LoanSumOrderByAggregateInput
  }

  export type LoanScalarWhereWithAggregatesInput = {
    AND?: LoanScalarWhereWithAggregatesInput | LoanScalarWhereWithAggregatesInput[]
    OR?: LoanScalarWhereWithAggregatesInput[]
    NOT?: LoanScalarWhereWithAggregatesInput | LoanScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Loan"> | string
    batchId?: StringWithAggregatesFilter<"Loan"> | string
    creditorId?: StringWithAggregatesFilter<"Loan"> | string
    quantity?: IntWithAggregatesFilter<"Loan"> | number
    loanAmount?: FloatWithAggregatesFilter<"Loan"> | number
    buybackRate?: FloatNullableWithAggregatesFilter<"Loan"> | number | null
    buybackDate?: DateTimeNullableWithAggregatesFilter<"Loan"> | Date | string | null
    loanStatus?: EnumLoanStatusWithAggregatesFilter<"Loan"> | $Enums.LoanStatus
    collateralValue?: FloatNullableWithAggregatesFilter<"Loan"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"Loan"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Loan"> | Date | string
    entityId?: StringWithAggregatesFilter<"Loan"> | string
  }

  export type CreditorWhereInput = {
    AND?: CreditorWhereInput | CreditorWhereInput[]
    OR?: CreditorWhereInput[]
    NOT?: CreditorWhereInput | CreditorWhereInput[]
    id?: StringFilter<"Creditor"> | string
    name?: StringFilter<"Creditor"> | string
    contactInfo?: JsonNullableFilter<"Creditor">
    terms?: JsonNullableFilter<"Creditor">
    createdAt?: DateTimeFilter<"Creditor"> | Date | string
    updatedAt?: DateTimeFilter<"Creditor"> | Date | string
    loans?: LoanListRelationFilter
  }

  export type CreditorOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    contactInfo?: SortOrderInput | SortOrder
    terms?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    loans?: LoanOrderByRelationAggregateInput
  }

  export type CreditorWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CreditorWhereInput | CreditorWhereInput[]
    OR?: CreditorWhereInput[]
    NOT?: CreditorWhereInput | CreditorWhereInput[]
    name?: StringFilter<"Creditor"> | string
    contactInfo?: JsonNullableFilter<"Creditor">
    terms?: JsonNullableFilter<"Creditor">
    createdAt?: DateTimeFilter<"Creditor"> | Date | string
    updatedAt?: DateTimeFilter<"Creditor"> | Date | string
    loans?: LoanListRelationFilter
  }, "id">

  export type CreditorOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    contactInfo?: SortOrderInput | SortOrder
    terms?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CreditorCountOrderByAggregateInput
    _max?: CreditorMaxOrderByAggregateInput
    _min?: CreditorMinOrderByAggregateInput
  }

  export type CreditorScalarWhereWithAggregatesInput = {
    AND?: CreditorScalarWhereWithAggregatesInput | CreditorScalarWhereWithAggregatesInput[]
    OR?: CreditorScalarWhereWithAggregatesInput[]
    NOT?: CreditorScalarWhereWithAggregatesInput | CreditorScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Creditor"> | string
    name?: StringWithAggregatesFilter<"Creditor"> | string
    contactInfo?: JsonNullableWithAggregatesFilter<"Creditor">
    terms?: JsonNullableWithAggregatesFilter<"Creditor">
    createdAt?: DateTimeWithAggregatesFilter<"Creditor"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Creditor"> | Date | string
  }

  export type ImportJobWhereInput = {
    AND?: ImportJobWhereInput | ImportJobWhereInput[]
    OR?: ImportJobWhereInput[]
    NOT?: ImportJobWhereInput | ImportJobWhereInput[]
    id?: StringFilter<"ImportJob"> | string
    fileName?: StringFilter<"ImportJob"> | string
    status?: StringFilter<"ImportJob"> | string
    processedRows?: IntFilter<"ImportJob"> | number
    errorCount?: IntFilter<"ImportJob"> | number
    createdAt?: DateTimeFilter<"ImportJob"> | Date | string
    completedAt?: DateTimeNullableFilter<"ImportJob"> | Date | string | null
    userId?: StringFilter<"ImportJob"> | string
    entityId?: StringFilter<"ImportJob"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ImportJobOrderByWithRelationInput = {
    id?: SortOrder
    fileName?: SortOrder
    status?: SortOrder
    processedRows?: SortOrder
    errorCount?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    userId?: SortOrder
    entityId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ImportJobWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ImportJobWhereInput | ImportJobWhereInput[]
    OR?: ImportJobWhereInput[]
    NOT?: ImportJobWhereInput | ImportJobWhereInput[]
    fileName?: StringFilter<"ImportJob"> | string
    status?: StringFilter<"ImportJob"> | string
    processedRows?: IntFilter<"ImportJob"> | number
    errorCount?: IntFilter<"ImportJob"> | number
    createdAt?: DateTimeFilter<"ImportJob"> | Date | string
    completedAt?: DateTimeNullableFilter<"ImportJob"> | Date | string | null
    userId?: StringFilter<"ImportJob"> | string
    entityId?: StringFilter<"ImportJob"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ImportJobOrderByWithAggregationInput = {
    id?: SortOrder
    fileName?: SortOrder
    status?: SortOrder
    processedRows?: SortOrder
    errorCount?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    userId?: SortOrder
    entityId?: SortOrder
    _count?: ImportJobCountOrderByAggregateInput
    _avg?: ImportJobAvgOrderByAggregateInput
    _max?: ImportJobMaxOrderByAggregateInput
    _min?: ImportJobMinOrderByAggregateInput
    _sum?: ImportJobSumOrderByAggregateInput
  }

  export type ImportJobScalarWhereWithAggregatesInput = {
    AND?: ImportJobScalarWhereWithAggregatesInput | ImportJobScalarWhereWithAggregatesInput[]
    OR?: ImportJobScalarWhereWithAggregatesInput[]
    NOT?: ImportJobScalarWhereWithAggregatesInput | ImportJobScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ImportJob"> | string
    fileName?: StringWithAggregatesFilter<"ImportJob"> | string
    status?: StringWithAggregatesFilter<"ImportJob"> | string
    processedRows?: IntWithAggregatesFilter<"ImportJob"> | number
    errorCount?: IntWithAggregatesFilter<"ImportJob"> | number
    createdAt?: DateTimeWithAggregatesFilter<"ImportJob"> | Date | string
    completedAt?: DateTimeNullableWithAggregatesFilter<"ImportJob"> | Date | string | null
    userId?: StringWithAggregatesFilter<"ImportJob"> | string
    entityId?: StringWithAggregatesFilter<"ImportJob"> | string
  }

  export type ACCUCreateInput = {
    id?: string
    vintage: number
    location: string
    issuanceDate: Date | string
    serialRangeStart: string
    serialRangeEnd: string
    category: string
    quantity: number
    acquisitionCost: number
    classification: $Enums.Classification
    acquisitionDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    loanStatus?: boolean
    loanDetails?: NullableJsonNullValueInput | InputJsonValue
    valuationLogs?: ValuationLogCreateNestedManyWithoutBatchInput
    reclassificationRequests?: ReclassificationRequestCreateNestedManyWithoutBatchInput
    loans?: LoanCreateNestedManyWithoutBatchInput
    auditLogEntries?: AuditLogEntryCreateNestedManyWithoutBatchInput
    createdBy?: UserCreateNestedOneWithoutBatchesInput
    entity: EntityCreateNestedOneWithoutBatchesInput
    project: ProjectCreateNestedOneWithoutAccusInput
  }

  export type ACCUUncheckedCreateInput = {
    id?: string
    projectId: string
    vintage: number
    location: string
    issuanceDate: Date | string
    serialRangeStart: string
    serialRangeEnd: string
    category: string
    quantity: number
    acquisitionCost: number
    classification: $Enums.Classification
    acquisitionDate: Date | string
    entityId: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    loanStatus?: boolean
    loanDetails?: NullableJsonNullValueInput | InputJsonValue
    valuationLogs?: ValuationLogUncheckedCreateNestedManyWithoutBatchInput
    reclassificationRequests?: ReclassificationRequestUncheckedCreateNestedManyWithoutBatchInput
    loans?: LoanUncheckedCreateNestedManyWithoutBatchInput
    auditLogEntries?: AuditLogEntryUncheckedCreateNestedManyWithoutBatchInput
  }

  export type ACCUUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    vintage?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    issuanceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    serialRangeStart?: StringFieldUpdateOperationsInput | string
    serialRangeEnd?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    acquisitionCost?: FloatFieldUpdateOperationsInput | number
    classification?: EnumClassificationFieldUpdateOperationsInput | $Enums.Classification
    acquisitionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    loanStatus?: BoolFieldUpdateOperationsInput | boolean
    loanDetails?: NullableJsonNullValueInput | InputJsonValue
    valuationLogs?: ValuationLogUpdateManyWithoutBatchNestedInput
    reclassificationRequests?: ReclassificationRequestUpdateManyWithoutBatchNestedInput
    loans?: LoanUpdateManyWithoutBatchNestedInput
    auditLogEntries?: AuditLogEntryUpdateManyWithoutBatchNestedInput
    createdBy?: UserUpdateOneWithoutBatchesNestedInput
    entity?: EntityUpdateOneRequiredWithoutBatchesNestedInput
    project?: ProjectUpdateOneRequiredWithoutAccusNestedInput
  }

  export type ACCUUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    vintage?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    issuanceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    serialRangeStart?: StringFieldUpdateOperationsInput | string
    serialRangeEnd?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    acquisitionCost?: FloatFieldUpdateOperationsInput | number
    classification?: EnumClassificationFieldUpdateOperationsInput | $Enums.Classification
    acquisitionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    loanStatus?: BoolFieldUpdateOperationsInput | boolean
    loanDetails?: NullableJsonNullValueInput | InputJsonValue
    valuationLogs?: ValuationLogUncheckedUpdateManyWithoutBatchNestedInput
    reclassificationRequests?: ReclassificationRequestUncheckedUpdateManyWithoutBatchNestedInput
    loans?: LoanUncheckedUpdateManyWithoutBatchNestedInput
    auditLogEntries?: AuditLogEntryUncheckedUpdateManyWithoutBatchNestedInput
  }

  export type ACCUCreateManyInput = {
    id?: string
    projectId: string
    vintage: number
    location: string
    issuanceDate: Date | string
    serialRangeStart: string
    serialRangeEnd: string
    category: string
    quantity: number
    acquisitionCost: number
    classification: $Enums.Classification
    acquisitionDate: Date | string
    entityId: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    loanStatus?: boolean
    loanDetails?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ACCUUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    vintage?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    issuanceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    serialRangeStart?: StringFieldUpdateOperationsInput | string
    serialRangeEnd?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    acquisitionCost?: FloatFieldUpdateOperationsInput | number
    classification?: EnumClassificationFieldUpdateOperationsInput | $Enums.Classification
    acquisitionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    loanStatus?: BoolFieldUpdateOperationsInput | boolean
    loanDetails?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ACCUUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    vintage?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    issuanceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    serialRangeStart?: StringFieldUpdateOperationsInput | string
    serialRangeEnd?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    acquisitionCost?: FloatFieldUpdateOperationsInput | number
    classification?: EnumClassificationFieldUpdateOperationsInput | $Enums.Classification
    acquisitionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    loanStatus?: BoolFieldUpdateOperationsInput | boolean
    loanDetails?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ProjectCreateInput = {
    id?: string
    name: string
    methodType: string
    method: string
    accus?: ACCUCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateInput = {
    id?: string
    name: string
    methodType: string
    method: string
    accus?: ACCUUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    methodType?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    accus?: ACCUUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    methodType?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
    accus?: ACCUUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateManyInput = {
    id?: string
    name: string
    methodType: string
    method: string
  }

  export type ProjectUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    methodType?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    methodType?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
  }

  export type ValuationLogCreateInput = {
    id?: string
    date: Date | string
    marketPrice: number
    nrv: number
    impairment?: number | null
    createdAt?: Date | string
    entityId: string
    batch: ACCUCreateNestedOneWithoutValuationLogsInput
    createdBy: UserCreateNestedOneWithoutValuationLogsInput
  }

  export type ValuationLogUncheckedCreateInput = {
    id?: string
    batchId: string
    date: Date | string
    marketPrice: number
    nrv: number
    impairment?: number | null
    userId: string
    createdAt?: Date | string
    entityId: string
  }

  export type ValuationLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    marketPrice?: FloatFieldUpdateOperationsInput | number
    nrv?: FloatFieldUpdateOperationsInput | number
    impairment?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
    batch?: ACCUUpdateOneRequiredWithoutValuationLogsNestedInput
    createdBy?: UserUpdateOneRequiredWithoutValuationLogsNestedInput
  }

  export type ValuationLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    batchId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    marketPrice?: FloatFieldUpdateOperationsInput | number
    nrv?: FloatFieldUpdateOperationsInput | number
    impairment?: NullableFloatFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type ValuationLogCreateManyInput = {
    id?: string
    batchId: string
    date: Date | string
    marketPrice: number
    nrv: number
    impairment?: number | null
    userId: string
    createdAt?: Date | string
    entityId: string
  }

  export type ValuationLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    marketPrice?: FloatFieldUpdateOperationsInput | number
    nrv?: FloatFieldUpdateOperationsInput | number
    impairment?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type ValuationLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    batchId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    marketPrice?: FloatFieldUpdateOperationsInput | number
    nrv?: FloatFieldUpdateOperationsInput | number
    impairment?: NullableFloatFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type AuditLogEntryCreateInput = {
    id?: string
    action: string
    tableName: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
    ipAddress?: string | null
    entityId: string
    user?: UserCreateNestedOneWithoutAuditLogsInput
    batch?: ACCUCreateNestedOneWithoutAuditLogEntriesInput
  }

  export type AuditLogEntryUncheckedCreateInput = {
    id?: string
    action: string
    tableName: string
    recordId: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    userId: string
    timestamp?: Date | string
    ipAddress?: string | null
    entityId: string
  }

  export type AuditLogEntryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    tableName?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneWithoutAuditLogsNestedInput
    batch?: ACCUUpdateOneWithoutAuditLogEntriesNestedInput
  }

  export type AuditLogEntryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    tableName?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    userId?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type AuditLogEntryCreateManyInput = {
    id?: string
    action: string
    tableName: string
    recordId: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    userId: string
    timestamp?: Date | string
    ipAddress?: string | null
    entityId: string
  }

  export type AuditLogEntryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    tableName?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type AuditLogEntryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    tableName?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    userId?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type JournalEntryCreateInput = {
    id?: string
    description: string
    date: Date | string
    createdAt?: Date | string
    entityId: string
    lines?: JournalLineCreateNestedManyWithoutEntryInput
    createdBy: UserCreateNestedOneWithoutJournalEntriesInput
  }

  export type JournalEntryUncheckedCreateInput = {
    id?: string
    description: string
    date: Date | string
    userId: string
    createdAt?: Date | string
    entityId: string
    lines?: JournalLineUncheckedCreateNestedManyWithoutEntryInput
  }

  export type JournalEntryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
    lines?: JournalLineUpdateManyWithoutEntryNestedInput
    createdBy?: UserUpdateOneRequiredWithoutJournalEntriesNestedInput
  }

  export type JournalEntryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
    lines?: JournalLineUncheckedUpdateManyWithoutEntryNestedInput
  }

  export type JournalEntryCreateManyInput = {
    id?: string
    description: string
    date: Date | string
    userId: string
    createdAt?: Date | string
    entityId: string
  }

  export type JournalEntryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type JournalEntryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type JournalLineCreateInput = {
    id?: string
    accountCode: string
    debit: number
    credit: number
    description?: string | null
    createdAt?: Date | string
    entityId: string
    entry: JournalEntryCreateNestedOneWithoutLinesInput
  }

  export type JournalLineUncheckedCreateInput = {
    id?: string
    entryId: string
    accountCode: string
    debit: number
    credit: number
    description?: string | null
    createdAt?: Date | string
    entityId: string
  }

  export type JournalLineUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountCode?: StringFieldUpdateOperationsInput | string
    debit?: FloatFieldUpdateOperationsInput | number
    credit?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
    entry?: JournalEntryUpdateOneRequiredWithoutLinesNestedInput
  }

  export type JournalLineUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    entryId?: StringFieldUpdateOperationsInput | string
    accountCode?: StringFieldUpdateOperationsInput | string
    debit?: FloatFieldUpdateOperationsInput | number
    credit?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type JournalLineCreateManyInput = {
    id?: string
    entryId: string
    accountCode: string
    debit: number
    credit: number
    description?: string | null
    createdAt?: Date | string
    entityId: string
  }

  export type JournalLineUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountCode?: StringFieldUpdateOperationsInput | string
    debit?: FloatFieldUpdateOperationsInput | number
    credit?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type JournalLineUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    entryId?: StringFieldUpdateOperationsInput | string
    accountCode?: StringFieldUpdateOperationsInput | string
    debit?: FloatFieldUpdateOperationsInput | number
    credit?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type XbrlTagCreateInput = {
    id?: string
    tagName: string
    value: string
    context: string
    periodStart?: Date | string | null
    periodEnd?: Date | string | null
    createdAt?: Date | string
    entityId: string
    createdBy: UserCreateNestedOneWithoutXbrlTagsInput
  }

  export type XbrlTagUncheckedCreateInput = {
    id?: string
    tagName: string
    value: string
    context: string
    periodStart?: Date | string | null
    periodEnd?: Date | string | null
    userId: string
    createdAt?: Date | string
    entityId: string
  }

  export type XbrlTagUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagName?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    context?: StringFieldUpdateOperationsInput | string
    periodStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
    createdBy?: UserUpdateOneRequiredWithoutXbrlTagsNestedInput
  }

  export type XbrlTagUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagName?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    context?: StringFieldUpdateOperationsInput | string
    periodStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type XbrlTagCreateManyInput = {
    id?: string
    tagName: string
    value: string
    context: string
    periodStart?: Date | string | null
    periodEnd?: Date | string | null
    userId: string
    createdAt?: Date | string
    entityId: string
  }

  export type XbrlTagUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagName?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    context?: StringFieldUpdateOperationsInput | string
    periodStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type XbrlTagUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagName?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    context?: StringFieldUpdateOperationsInput | string
    periodStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type ReclassificationRequestCreateInput = {
    id?: string
    fromClass: $Enums.Classification
    toClass: $Enums.Classification
    reason?: string | null
    status?: $Enums.ReclassificationStatus
    approvedBy?: string | null
    timestamp?: Date | string
    approvedAt?: Date | string | null
    entityId: string
    batch: ACCUCreateNestedOneWithoutReclassificationRequestsInput
    submittedByUser: UserCreateNestedOneWithoutReclassRequestsInput
  }

  export type ReclassificationRequestUncheckedCreateInput = {
    id?: string
    batchId: string
    fromClass: $Enums.Classification
    toClass: $Enums.Classification
    reason?: string | null
    status?: $Enums.ReclassificationStatus
    submittedBy: string
    approvedBy?: string | null
    timestamp?: Date | string
    approvedAt?: Date | string | null
    entityId: string
  }

  export type ReclassificationRequestUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromClass?: EnumClassificationFieldUpdateOperationsInput | $Enums.Classification
    toClass?: EnumClassificationFieldUpdateOperationsInput | $Enums.Classification
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumReclassificationStatusFieldUpdateOperationsInput | $Enums.ReclassificationStatus
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    entityId?: StringFieldUpdateOperationsInput | string
    batch?: ACCUUpdateOneRequiredWithoutReclassificationRequestsNestedInput
    submittedByUser?: UserUpdateOneRequiredWithoutReclassRequestsNestedInput
  }

  export type ReclassificationRequestUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    batchId?: StringFieldUpdateOperationsInput | string
    fromClass?: EnumClassificationFieldUpdateOperationsInput | $Enums.Classification
    toClass?: EnumClassificationFieldUpdateOperationsInput | $Enums.Classification
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumReclassificationStatusFieldUpdateOperationsInput | $Enums.ReclassificationStatus
    submittedBy?: StringFieldUpdateOperationsInput | string
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type ReclassificationRequestCreateManyInput = {
    id?: string
    batchId: string
    fromClass: $Enums.Classification
    toClass: $Enums.Classification
    reason?: string | null
    status?: $Enums.ReclassificationStatus
    submittedBy: string
    approvedBy?: string | null
    timestamp?: Date | string
    approvedAt?: Date | string | null
    entityId: string
  }

  export type ReclassificationRequestUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromClass?: EnumClassificationFieldUpdateOperationsInput | $Enums.Classification
    toClass?: EnumClassificationFieldUpdateOperationsInput | $Enums.Classification
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumReclassificationStatusFieldUpdateOperationsInput | $Enums.ReclassificationStatus
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type ReclassificationRequestUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    batchId?: StringFieldUpdateOperationsInput | string
    fromClass?: EnumClassificationFieldUpdateOperationsInput | $Enums.Classification
    toClass?: EnumClassificationFieldUpdateOperationsInput | $Enums.Classification
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumReclassificationStatusFieldUpdateOperationsInput | $Enums.ReclassificationStatus
    submittedBy?: StringFieldUpdateOperationsInput | string
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type MarketPriceCreateInput = {
    id?: string
    date: Date | string
    commodityType: string
    price: number
    source: string
    createdAt?: Date | string
    entityId: string
  }

  export type MarketPriceUncheckedCreateInput = {
    id?: string
    date: Date | string
    commodityType: string
    price: number
    source: string
    createdAt?: Date | string
    entityId: string
  }

  export type MarketPriceUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    commodityType?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    source?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type MarketPriceUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    commodityType?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    source?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type MarketPriceCreateManyInput = {
    id?: string
    date: Date | string
    commodityType: string
    price: number
    source: string
    createdAt?: Date | string
    entityId: string
  }

  export type MarketPriceUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    commodityType?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    source?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type MarketPriceUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    commodityType?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    source?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    roles: string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    batches?: ACCUCreateNestedManyWithoutCreatedByInput
    valuationLogs?: ValuationLogCreateNestedManyWithoutCreatedByInput
    auditLogs?: AuditLogEntryCreateNestedManyWithoutUserInput
    journalEntries?: JournalEntryCreateNestedManyWithoutCreatedByInput
    reclassRequests?: ReclassificationRequestCreateNestedManyWithoutSubmittedByUserInput
    settings?: UserSettingCreateNestedManyWithoutUserInput
    xbrlTags?: XbrlTagCreateNestedManyWithoutCreatedByInput
    importJobs?: ImportJobCreateNestedManyWithoutUserInput
    entity?: EntityCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    roles: string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    entityId?: string | null
    batches?: ACCUUncheckedCreateNestedManyWithoutCreatedByInput
    valuationLogs?: ValuationLogUncheckedCreateNestedManyWithoutCreatedByInput
    auditLogs?: AuditLogEntryUncheckedCreateNestedManyWithoutUserInput
    journalEntries?: JournalEntryUncheckedCreateNestedManyWithoutCreatedByInput
    reclassRequests?: ReclassificationRequestUncheckedCreateNestedManyWithoutSubmittedByUserInput
    settings?: UserSettingUncheckedCreateNestedManyWithoutUserInput
    xbrlTags?: XbrlTagUncheckedCreateNestedManyWithoutCreatedByInput
    importJobs?: ImportJobUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    roles?: StringFieldUpdateOperationsInput | string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    batches?: ACCUUpdateManyWithoutCreatedByNestedInput
    valuationLogs?: ValuationLogUpdateManyWithoutCreatedByNestedInput
    auditLogs?: AuditLogEntryUpdateManyWithoutUserNestedInput
    journalEntries?: JournalEntryUpdateManyWithoutCreatedByNestedInput
    reclassRequests?: ReclassificationRequestUpdateManyWithoutSubmittedByUserNestedInput
    settings?: UserSettingUpdateManyWithoutUserNestedInput
    xbrlTags?: XbrlTagUpdateManyWithoutCreatedByNestedInput
    importJobs?: ImportJobUpdateManyWithoutUserNestedInput
    entity?: EntityUpdateOneWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    roles?: StringFieldUpdateOperationsInput | string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    batches?: ACCUUncheckedUpdateManyWithoutCreatedByNestedInput
    valuationLogs?: ValuationLogUncheckedUpdateManyWithoutCreatedByNestedInput
    auditLogs?: AuditLogEntryUncheckedUpdateManyWithoutUserNestedInput
    journalEntries?: JournalEntryUncheckedUpdateManyWithoutCreatedByNestedInput
    reclassRequests?: ReclassificationRequestUncheckedUpdateManyWithoutSubmittedByUserNestedInput
    settings?: UserSettingUncheckedUpdateManyWithoutUserNestedInput
    xbrlTags?: XbrlTagUncheckedUpdateManyWithoutCreatedByNestedInput
    importJobs?: ImportJobUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    roles: string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    entityId?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    roles?: StringFieldUpdateOperationsInput | string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    roles?: StringFieldUpdateOperationsInput | string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserSettingCreateInput = {
    id?: string
    roles: string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutSettingsInput
  }

  export type UserSettingUncheckedCreateInput = {
    id?: string
    userId: string
    roles: string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSettingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    roles?: StringFieldUpdateOperationsInput | string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSettingsNestedInput
  }

  export type UserSettingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    roles?: StringFieldUpdateOperationsInput | string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSettingCreateManyInput = {
    id?: string
    userId: string
    roles: string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSettingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    roles?: StringFieldUpdateOperationsInput | string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSettingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    roles?: StringFieldUpdateOperationsInput | string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EntityCreateInput = {
    id?: string
    name: string
    legalName?: string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    parentId?: string | null
    batches?: ACCUCreateNestedManyWithoutEntityInput
    users?: UserCreateNestedManyWithoutEntityInput
    loans?: LoanCreateNestedManyWithoutEntityInput
  }

  export type EntityUncheckedCreateInput = {
    id?: string
    name: string
    legalName?: string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    parentId?: string | null
    batches?: ACCUUncheckedCreateNestedManyWithoutEntityInput
    users?: UserUncheckedCreateNestedManyWithoutEntityInput
    loans?: LoanUncheckedCreateNestedManyWithoutEntityInput
  }

  export type EntityUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    legalName?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    batches?: ACCUUpdateManyWithoutEntityNestedInput
    users?: UserUpdateManyWithoutEntityNestedInput
    loans?: LoanUpdateManyWithoutEntityNestedInput
  }

  export type EntityUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    legalName?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    batches?: ACCUUncheckedUpdateManyWithoutEntityNestedInput
    users?: UserUncheckedUpdateManyWithoutEntityNestedInput
    loans?: LoanUncheckedUpdateManyWithoutEntityNestedInput
  }

  export type EntityCreateManyInput = {
    id?: string
    name: string
    legalName?: string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    parentId?: string | null
  }

  export type EntityUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    legalName?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type EntityUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    legalName?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type LoanCreateInput = {
    id?: string
    quantity: number
    loanAmount: number
    buybackRate?: number | null
    buybackDate?: Date | string | null
    loanStatus?: $Enums.LoanStatus
    collateralValue?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    batch: ACCUCreateNestedOneWithoutLoansInput
    creditor: CreditorCreateNestedOneWithoutLoansInput
    entity: EntityCreateNestedOneWithoutLoansInput
  }

  export type LoanUncheckedCreateInput = {
    id?: string
    batchId: string
    creditorId: string
    quantity: number
    loanAmount: number
    buybackRate?: number | null
    buybackDate?: Date | string | null
    loanStatus?: $Enums.LoanStatus
    collateralValue?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    entityId: string
  }

  export type LoanUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    loanAmount?: FloatFieldUpdateOperationsInput | number
    buybackRate?: NullableFloatFieldUpdateOperationsInput | number | null
    buybackDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loanStatus?: EnumLoanStatusFieldUpdateOperationsInput | $Enums.LoanStatus
    collateralValue?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    batch?: ACCUUpdateOneRequiredWithoutLoansNestedInput
    creditor?: CreditorUpdateOneRequiredWithoutLoansNestedInput
    entity?: EntityUpdateOneRequiredWithoutLoansNestedInput
  }

  export type LoanUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    batchId?: StringFieldUpdateOperationsInput | string
    creditorId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    loanAmount?: FloatFieldUpdateOperationsInput | number
    buybackRate?: NullableFloatFieldUpdateOperationsInput | number | null
    buybackDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loanStatus?: EnumLoanStatusFieldUpdateOperationsInput | $Enums.LoanStatus
    collateralValue?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type LoanCreateManyInput = {
    id?: string
    batchId: string
    creditorId: string
    quantity: number
    loanAmount: number
    buybackRate?: number | null
    buybackDate?: Date | string | null
    loanStatus?: $Enums.LoanStatus
    collateralValue?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    entityId: string
  }

  export type LoanUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    loanAmount?: FloatFieldUpdateOperationsInput | number
    buybackRate?: NullableFloatFieldUpdateOperationsInput | number | null
    buybackDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loanStatus?: EnumLoanStatusFieldUpdateOperationsInput | $Enums.LoanStatus
    collateralValue?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LoanUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    batchId?: StringFieldUpdateOperationsInput | string
    creditorId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    loanAmount?: FloatFieldUpdateOperationsInput | number
    buybackRate?: NullableFloatFieldUpdateOperationsInput | number | null
    buybackDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loanStatus?: EnumLoanStatusFieldUpdateOperationsInput | $Enums.LoanStatus
    collateralValue?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type CreditorCreateInput = {
    id?: string
    name: string
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    terms?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    loans?: LoanCreateNestedManyWithoutCreditorInput
  }

  export type CreditorUncheckedCreateInput = {
    id?: string
    name: string
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    terms?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    loans?: LoanUncheckedCreateNestedManyWithoutCreditorInput
  }

  export type CreditorUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    terms?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loans?: LoanUpdateManyWithoutCreditorNestedInput
  }

  export type CreditorUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    terms?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    loans?: LoanUncheckedUpdateManyWithoutCreditorNestedInput
  }

  export type CreditorCreateManyInput = {
    id?: string
    name: string
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    terms?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CreditorUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    terms?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CreditorUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    terms?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImportJobCreateInput = {
    id?: string
    fileName: string
    status?: string
    processedRows?: number
    errorCount?: number
    createdAt?: Date | string
    completedAt?: Date | string | null
    entityId: string
    user: UserCreateNestedOneWithoutImportJobsInput
  }

  export type ImportJobUncheckedCreateInput = {
    id?: string
    fileName: string
    status?: string
    processedRows?: number
    errorCount?: number
    createdAt?: Date | string
    completedAt?: Date | string | null
    userId: string
    entityId: string
  }

  export type ImportJobUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    processedRows?: IntFieldUpdateOperationsInput | number
    errorCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    entityId?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutImportJobsNestedInput
  }

  export type ImportJobUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    processedRows?: IntFieldUpdateOperationsInput | number
    errorCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type ImportJobCreateManyInput = {
    id?: string
    fileName: string
    status?: string
    processedRows?: number
    errorCount?: number
    createdAt?: Date | string
    completedAt?: Date | string | null
    userId: string
    entityId: string
  }

  export type ImportJobUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    processedRows?: IntFieldUpdateOperationsInput | number
    errorCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type ImportJobUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    processedRows?: IntFieldUpdateOperationsInput | number
    errorCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    userId?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type EnumClassificationFilter<$PrismaModel = never> = {
    equals?: $Enums.Classification | EnumClassificationFieldRefInput<$PrismaModel>
    in?: $Enums.Classification[]
    notIn?: $Enums.Classification[]
    not?: NestedEnumClassificationFilter<$PrismaModel> | $Enums.Classification
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ValuationLogListRelationFilter = {
    every?: ValuationLogWhereInput
    some?: ValuationLogWhereInput
    none?: ValuationLogWhereInput
  }

  export type ReclassificationRequestListRelationFilter = {
    every?: ReclassificationRequestWhereInput
    some?: ReclassificationRequestWhereInput
    none?: ReclassificationRequestWhereInput
  }

  export type LoanListRelationFilter = {
    every?: LoanWhereInput
    some?: LoanWhereInput
    none?: LoanWhereInput
  }

  export type AuditLogEntryListRelationFilter = {
    every?: AuditLogEntryWhereInput
    some?: AuditLogEntryWhereInput
    none?: AuditLogEntryWhereInput
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type EntityScalarRelationFilter = {
    is?: EntityWhereInput
    isNot?: EntityWhereInput
  }

  export type ProjectScalarRelationFilter = {
    is?: ProjectWhereInput
    isNot?: ProjectWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ValuationLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReclassificationRequestOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LoanOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuditLogEntryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ACCUCountOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    vintage?: SortOrder
    location?: SortOrder
    issuanceDate?: SortOrder
    serialRangeStart?: SortOrder
    serialRangeEnd?: SortOrder
    category?: SortOrder
    quantity?: SortOrder
    acquisitionCost?: SortOrder
    classification?: SortOrder
    acquisitionDate?: SortOrder
    entityId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    loanStatus?: SortOrder
    loanDetails?: SortOrder
  }

  export type ACCUAvgOrderByAggregateInput = {
    vintage?: SortOrder
    quantity?: SortOrder
    acquisitionCost?: SortOrder
  }

  export type ACCUMaxOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    vintage?: SortOrder
    location?: SortOrder
    issuanceDate?: SortOrder
    serialRangeStart?: SortOrder
    serialRangeEnd?: SortOrder
    category?: SortOrder
    quantity?: SortOrder
    acquisitionCost?: SortOrder
    classification?: SortOrder
    acquisitionDate?: SortOrder
    entityId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    loanStatus?: SortOrder
  }

  export type ACCUMinOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    vintage?: SortOrder
    location?: SortOrder
    issuanceDate?: SortOrder
    serialRangeStart?: SortOrder
    serialRangeEnd?: SortOrder
    category?: SortOrder
    quantity?: SortOrder
    acquisitionCost?: SortOrder
    classification?: SortOrder
    acquisitionDate?: SortOrder
    entityId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    loanStatus?: SortOrder
  }

  export type ACCUSumOrderByAggregateInput = {
    vintage?: SortOrder
    quantity?: SortOrder
    acquisitionCost?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumClassificationWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Classification | EnumClassificationFieldRefInput<$PrismaModel>
    in?: $Enums.Classification[]
    notIn?: $Enums.Classification[]
    not?: NestedEnumClassificationWithAggregatesFilter<$PrismaModel> | $Enums.Classification
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumClassificationFilter<$PrismaModel>
    _max?: NestedEnumClassificationFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type ACCUListRelationFilter = {
    every?: ACCUWhereInput
    some?: ACCUWhereInput
    none?: ACCUWhereInput
  }

  export type ACCUOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    methodType?: SortOrder
    method?: SortOrder
  }

  export type ProjectMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    methodType?: SortOrder
    method?: SortOrder
  }

  export type ProjectMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    methodType?: SortOrder
    method?: SortOrder
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type ACCUScalarRelationFilter = {
    is?: ACCUWhereInput
    isNot?: ACCUWhereInput
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ValuationLogCountOrderByAggregateInput = {
    id?: SortOrder
    batchId?: SortOrder
    date?: SortOrder
    marketPrice?: SortOrder
    nrv?: SortOrder
    impairment?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    entityId?: SortOrder
  }

  export type ValuationLogAvgOrderByAggregateInput = {
    marketPrice?: SortOrder
    nrv?: SortOrder
    impairment?: SortOrder
  }

  export type ValuationLogMaxOrderByAggregateInput = {
    id?: SortOrder
    batchId?: SortOrder
    date?: SortOrder
    marketPrice?: SortOrder
    nrv?: SortOrder
    impairment?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    entityId?: SortOrder
  }

  export type ValuationLogMinOrderByAggregateInput = {
    id?: SortOrder
    batchId?: SortOrder
    date?: SortOrder
    marketPrice?: SortOrder
    nrv?: SortOrder
    impairment?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    entityId?: SortOrder
  }

  export type ValuationLogSumOrderByAggregateInput = {
    marketPrice?: SortOrder
    nrv?: SortOrder
    impairment?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type ACCUNullableScalarRelationFilter = {
    is?: ACCUWhereInput | null
    isNot?: ACCUWhereInput | null
  }

  export type AuditLogEntryCountOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    tableName?: SortOrder
    recordId?: SortOrder
    oldValues?: SortOrder
    newValues?: SortOrder
    userId?: SortOrder
    timestamp?: SortOrder
    ipAddress?: SortOrder
    entityId?: SortOrder
  }

  export type AuditLogEntryMaxOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    tableName?: SortOrder
    recordId?: SortOrder
    userId?: SortOrder
    timestamp?: SortOrder
    ipAddress?: SortOrder
    entityId?: SortOrder
  }

  export type AuditLogEntryMinOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    tableName?: SortOrder
    recordId?: SortOrder
    userId?: SortOrder
    timestamp?: SortOrder
    ipAddress?: SortOrder
    entityId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type JournalLineListRelationFilter = {
    every?: JournalLineWhereInput
    some?: JournalLineWhereInput
    none?: JournalLineWhereInput
  }

  export type JournalLineOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type JournalEntryCountOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    date?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    entityId?: SortOrder
  }

  export type JournalEntryMaxOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    date?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    entityId?: SortOrder
  }

  export type JournalEntryMinOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    date?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    entityId?: SortOrder
  }

  export type JournalEntryScalarRelationFilter = {
    is?: JournalEntryWhereInput
    isNot?: JournalEntryWhereInput
  }

  export type JournalLineCountOrderByAggregateInput = {
    id?: SortOrder
    entryId?: SortOrder
    accountCode?: SortOrder
    debit?: SortOrder
    credit?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    entityId?: SortOrder
  }

  export type JournalLineAvgOrderByAggregateInput = {
    debit?: SortOrder
    credit?: SortOrder
  }

  export type JournalLineMaxOrderByAggregateInput = {
    id?: SortOrder
    entryId?: SortOrder
    accountCode?: SortOrder
    debit?: SortOrder
    credit?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    entityId?: SortOrder
  }

  export type JournalLineMinOrderByAggregateInput = {
    id?: SortOrder
    entryId?: SortOrder
    accountCode?: SortOrder
    debit?: SortOrder
    credit?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    entityId?: SortOrder
  }

  export type JournalLineSumOrderByAggregateInput = {
    debit?: SortOrder
    credit?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type XbrlTagCountOrderByAggregateInput = {
    id?: SortOrder
    tagName?: SortOrder
    value?: SortOrder
    context?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    entityId?: SortOrder
  }

  export type XbrlTagMaxOrderByAggregateInput = {
    id?: SortOrder
    tagName?: SortOrder
    value?: SortOrder
    context?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    entityId?: SortOrder
  }

  export type XbrlTagMinOrderByAggregateInput = {
    id?: SortOrder
    tagName?: SortOrder
    value?: SortOrder
    context?: SortOrder
    periodStart?: SortOrder
    periodEnd?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    entityId?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumReclassificationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ReclassificationStatus | EnumReclassificationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReclassificationStatus[]
    notIn?: $Enums.ReclassificationStatus[]
    not?: NestedEnumReclassificationStatusFilter<$PrismaModel> | $Enums.ReclassificationStatus
  }

  export type ReclassificationRequestCountOrderByAggregateInput = {
    id?: SortOrder
    batchId?: SortOrder
    fromClass?: SortOrder
    toClass?: SortOrder
    reason?: SortOrder
    status?: SortOrder
    submittedBy?: SortOrder
    approvedBy?: SortOrder
    timestamp?: SortOrder
    approvedAt?: SortOrder
    entityId?: SortOrder
  }

  export type ReclassificationRequestMaxOrderByAggregateInput = {
    id?: SortOrder
    batchId?: SortOrder
    fromClass?: SortOrder
    toClass?: SortOrder
    reason?: SortOrder
    status?: SortOrder
    submittedBy?: SortOrder
    approvedBy?: SortOrder
    timestamp?: SortOrder
    approvedAt?: SortOrder
    entityId?: SortOrder
  }

  export type ReclassificationRequestMinOrderByAggregateInput = {
    id?: SortOrder
    batchId?: SortOrder
    fromClass?: SortOrder
    toClass?: SortOrder
    reason?: SortOrder
    status?: SortOrder
    submittedBy?: SortOrder
    approvedBy?: SortOrder
    timestamp?: SortOrder
    approvedAt?: SortOrder
    entityId?: SortOrder
  }

  export type EnumReclassificationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReclassificationStatus | EnumReclassificationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReclassificationStatus[]
    notIn?: $Enums.ReclassificationStatus[]
    not?: NestedEnumReclassificationStatusWithAggregatesFilter<$PrismaModel> | $Enums.ReclassificationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReclassificationStatusFilter<$PrismaModel>
    _max?: NestedEnumReclassificationStatusFilter<$PrismaModel>
  }

  export type MarketPriceCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    commodityType?: SortOrder
    price?: SortOrder
    source?: SortOrder
    createdAt?: SortOrder
    entityId?: SortOrder
  }

  export type MarketPriceAvgOrderByAggregateInput = {
    price?: SortOrder
  }

  export type MarketPriceMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    commodityType?: SortOrder
    price?: SortOrder
    source?: SortOrder
    createdAt?: SortOrder
    entityId?: SortOrder
  }

  export type MarketPriceMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    commodityType?: SortOrder
    price?: SortOrder
    source?: SortOrder
    createdAt?: SortOrder
    entityId?: SortOrder
  }

  export type MarketPriceSumOrderByAggregateInput = {
    price?: SortOrder
  }

  export type JournalEntryListRelationFilter = {
    every?: JournalEntryWhereInput
    some?: JournalEntryWhereInput
    none?: JournalEntryWhereInput
  }

  export type UserSettingListRelationFilter = {
    every?: UserSettingWhereInput
    some?: UserSettingWhereInput
    none?: UserSettingWhereInput
  }

  export type XbrlTagListRelationFilter = {
    every?: XbrlTagWhereInput
    some?: XbrlTagWhereInput
    none?: XbrlTagWhereInput
  }

  export type ImportJobListRelationFilter = {
    every?: ImportJobWhereInput
    some?: ImportJobWhereInput
    none?: ImportJobWhereInput
  }

  export type EntityNullableScalarRelationFilter = {
    is?: EntityWhereInput | null
    isNot?: EntityWhereInput | null
  }

  export type JournalEntryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserSettingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type XbrlTagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ImportJobOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    roles?: SortOrder
    preferences?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    entityId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    roles?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    entityId?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    roles?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    entityId?: SortOrder
  }

  export type UserSettingCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    roles?: SortOrder
    preferences?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSettingMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    roles?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSettingMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    roles?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EntityCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    legalName?: SortOrder
    address?: SortOrder
    contactInfo?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    parentId?: SortOrder
  }

  export type EntityMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    legalName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    parentId?: SortOrder
  }

  export type EntityMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    legalName?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    parentId?: SortOrder
  }

  export type EnumLoanStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.LoanStatus | EnumLoanStatusFieldRefInput<$PrismaModel>
    in?: $Enums.LoanStatus[]
    notIn?: $Enums.LoanStatus[]
    not?: NestedEnumLoanStatusFilter<$PrismaModel> | $Enums.LoanStatus
  }

  export type CreditorScalarRelationFilter = {
    is?: CreditorWhereInput
    isNot?: CreditorWhereInput
  }

  export type LoanCountOrderByAggregateInput = {
    id?: SortOrder
    batchId?: SortOrder
    creditorId?: SortOrder
    quantity?: SortOrder
    loanAmount?: SortOrder
    buybackRate?: SortOrder
    buybackDate?: SortOrder
    loanStatus?: SortOrder
    collateralValue?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    entityId?: SortOrder
  }

  export type LoanAvgOrderByAggregateInput = {
    quantity?: SortOrder
    loanAmount?: SortOrder
    buybackRate?: SortOrder
    collateralValue?: SortOrder
  }

  export type LoanMaxOrderByAggregateInput = {
    id?: SortOrder
    batchId?: SortOrder
    creditorId?: SortOrder
    quantity?: SortOrder
    loanAmount?: SortOrder
    buybackRate?: SortOrder
    buybackDate?: SortOrder
    loanStatus?: SortOrder
    collateralValue?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    entityId?: SortOrder
  }

  export type LoanMinOrderByAggregateInput = {
    id?: SortOrder
    batchId?: SortOrder
    creditorId?: SortOrder
    quantity?: SortOrder
    loanAmount?: SortOrder
    buybackRate?: SortOrder
    buybackDate?: SortOrder
    loanStatus?: SortOrder
    collateralValue?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    entityId?: SortOrder
  }

  export type LoanSumOrderByAggregateInput = {
    quantity?: SortOrder
    loanAmount?: SortOrder
    buybackRate?: SortOrder
    collateralValue?: SortOrder
  }

  export type EnumLoanStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LoanStatus | EnumLoanStatusFieldRefInput<$PrismaModel>
    in?: $Enums.LoanStatus[]
    notIn?: $Enums.LoanStatus[]
    not?: NestedEnumLoanStatusWithAggregatesFilter<$PrismaModel> | $Enums.LoanStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLoanStatusFilter<$PrismaModel>
    _max?: NestedEnumLoanStatusFilter<$PrismaModel>
  }

  export type CreditorCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    contactInfo?: SortOrder
    terms?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CreditorMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CreditorMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ImportJobCountOrderByAggregateInput = {
    id?: SortOrder
    fileName?: SortOrder
    status?: SortOrder
    processedRows?: SortOrder
    errorCount?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrder
    userId?: SortOrder
    entityId?: SortOrder
  }

  export type ImportJobAvgOrderByAggregateInput = {
    processedRows?: SortOrder
    errorCount?: SortOrder
  }

  export type ImportJobMaxOrderByAggregateInput = {
    id?: SortOrder
    fileName?: SortOrder
    status?: SortOrder
    processedRows?: SortOrder
    errorCount?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrder
    userId?: SortOrder
    entityId?: SortOrder
  }

  export type ImportJobMinOrderByAggregateInput = {
    id?: SortOrder
    fileName?: SortOrder
    status?: SortOrder
    processedRows?: SortOrder
    errorCount?: SortOrder
    createdAt?: SortOrder
    completedAt?: SortOrder
    userId?: SortOrder
    entityId?: SortOrder
  }

  export type ImportJobSumOrderByAggregateInput = {
    processedRows?: SortOrder
    errorCount?: SortOrder
  }

  export type ValuationLogCreateNestedManyWithoutBatchInput = {
    create?: XOR<ValuationLogCreateWithoutBatchInput, ValuationLogUncheckedCreateWithoutBatchInput> | ValuationLogCreateWithoutBatchInput[] | ValuationLogUncheckedCreateWithoutBatchInput[]
    connectOrCreate?: ValuationLogCreateOrConnectWithoutBatchInput | ValuationLogCreateOrConnectWithoutBatchInput[]
    createMany?: ValuationLogCreateManyBatchInputEnvelope
    connect?: ValuationLogWhereUniqueInput | ValuationLogWhereUniqueInput[]
  }

  export type ReclassificationRequestCreateNestedManyWithoutBatchInput = {
    create?: XOR<ReclassificationRequestCreateWithoutBatchInput, ReclassificationRequestUncheckedCreateWithoutBatchInput> | ReclassificationRequestCreateWithoutBatchInput[] | ReclassificationRequestUncheckedCreateWithoutBatchInput[]
    connectOrCreate?: ReclassificationRequestCreateOrConnectWithoutBatchInput | ReclassificationRequestCreateOrConnectWithoutBatchInput[]
    createMany?: ReclassificationRequestCreateManyBatchInputEnvelope
    connect?: ReclassificationRequestWhereUniqueInput | ReclassificationRequestWhereUniqueInput[]
  }

  export type LoanCreateNestedManyWithoutBatchInput = {
    create?: XOR<LoanCreateWithoutBatchInput, LoanUncheckedCreateWithoutBatchInput> | LoanCreateWithoutBatchInput[] | LoanUncheckedCreateWithoutBatchInput[]
    connectOrCreate?: LoanCreateOrConnectWithoutBatchInput | LoanCreateOrConnectWithoutBatchInput[]
    createMany?: LoanCreateManyBatchInputEnvelope
    connect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
  }

  export type AuditLogEntryCreateNestedManyWithoutBatchInput = {
    create?: XOR<AuditLogEntryCreateWithoutBatchInput, AuditLogEntryUncheckedCreateWithoutBatchInput> | AuditLogEntryCreateWithoutBatchInput[] | AuditLogEntryUncheckedCreateWithoutBatchInput[]
    connectOrCreate?: AuditLogEntryCreateOrConnectWithoutBatchInput | AuditLogEntryCreateOrConnectWithoutBatchInput[]
    createMany?: AuditLogEntryCreateManyBatchInputEnvelope
    connect?: AuditLogEntryWhereUniqueInput | AuditLogEntryWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutBatchesInput = {
    create?: XOR<UserCreateWithoutBatchesInput, UserUncheckedCreateWithoutBatchesInput>
    connectOrCreate?: UserCreateOrConnectWithoutBatchesInput
    connect?: UserWhereUniqueInput
  }

  export type EntityCreateNestedOneWithoutBatchesInput = {
    create?: XOR<EntityCreateWithoutBatchesInput, EntityUncheckedCreateWithoutBatchesInput>
    connectOrCreate?: EntityCreateOrConnectWithoutBatchesInput
    connect?: EntityWhereUniqueInput
  }

  export type ProjectCreateNestedOneWithoutAccusInput = {
    create?: XOR<ProjectCreateWithoutAccusInput, ProjectUncheckedCreateWithoutAccusInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutAccusInput
    connect?: ProjectWhereUniqueInput
  }

  export type ValuationLogUncheckedCreateNestedManyWithoutBatchInput = {
    create?: XOR<ValuationLogCreateWithoutBatchInput, ValuationLogUncheckedCreateWithoutBatchInput> | ValuationLogCreateWithoutBatchInput[] | ValuationLogUncheckedCreateWithoutBatchInput[]
    connectOrCreate?: ValuationLogCreateOrConnectWithoutBatchInput | ValuationLogCreateOrConnectWithoutBatchInput[]
    createMany?: ValuationLogCreateManyBatchInputEnvelope
    connect?: ValuationLogWhereUniqueInput | ValuationLogWhereUniqueInput[]
  }

  export type ReclassificationRequestUncheckedCreateNestedManyWithoutBatchInput = {
    create?: XOR<ReclassificationRequestCreateWithoutBatchInput, ReclassificationRequestUncheckedCreateWithoutBatchInput> | ReclassificationRequestCreateWithoutBatchInput[] | ReclassificationRequestUncheckedCreateWithoutBatchInput[]
    connectOrCreate?: ReclassificationRequestCreateOrConnectWithoutBatchInput | ReclassificationRequestCreateOrConnectWithoutBatchInput[]
    createMany?: ReclassificationRequestCreateManyBatchInputEnvelope
    connect?: ReclassificationRequestWhereUniqueInput | ReclassificationRequestWhereUniqueInput[]
  }

  export type LoanUncheckedCreateNestedManyWithoutBatchInput = {
    create?: XOR<LoanCreateWithoutBatchInput, LoanUncheckedCreateWithoutBatchInput> | LoanCreateWithoutBatchInput[] | LoanUncheckedCreateWithoutBatchInput[]
    connectOrCreate?: LoanCreateOrConnectWithoutBatchInput | LoanCreateOrConnectWithoutBatchInput[]
    createMany?: LoanCreateManyBatchInputEnvelope
    connect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
  }

  export type AuditLogEntryUncheckedCreateNestedManyWithoutBatchInput = {
    create?: XOR<AuditLogEntryCreateWithoutBatchInput, AuditLogEntryUncheckedCreateWithoutBatchInput> | AuditLogEntryCreateWithoutBatchInput[] | AuditLogEntryUncheckedCreateWithoutBatchInput[]
    connectOrCreate?: AuditLogEntryCreateOrConnectWithoutBatchInput | AuditLogEntryCreateOrConnectWithoutBatchInput[]
    createMany?: AuditLogEntryCreateManyBatchInputEnvelope
    connect?: AuditLogEntryWhereUniqueInput | AuditLogEntryWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumClassificationFieldUpdateOperationsInput = {
    set?: $Enums.Classification
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ValuationLogUpdateManyWithoutBatchNestedInput = {
    create?: XOR<ValuationLogCreateWithoutBatchInput, ValuationLogUncheckedCreateWithoutBatchInput> | ValuationLogCreateWithoutBatchInput[] | ValuationLogUncheckedCreateWithoutBatchInput[]
    connectOrCreate?: ValuationLogCreateOrConnectWithoutBatchInput | ValuationLogCreateOrConnectWithoutBatchInput[]
    upsert?: ValuationLogUpsertWithWhereUniqueWithoutBatchInput | ValuationLogUpsertWithWhereUniqueWithoutBatchInput[]
    createMany?: ValuationLogCreateManyBatchInputEnvelope
    set?: ValuationLogWhereUniqueInput | ValuationLogWhereUniqueInput[]
    disconnect?: ValuationLogWhereUniqueInput | ValuationLogWhereUniqueInput[]
    delete?: ValuationLogWhereUniqueInput | ValuationLogWhereUniqueInput[]
    connect?: ValuationLogWhereUniqueInput | ValuationLogWhereUniqueInput[]
    update?: ValuationLogUpdateWithWhereUniqueWithoutBatchInput | ValuationLogUpdateWithWhereUniqueWithoutBatchInput[]
    updateMany?: ValuationLogUpdateManyWithWhereWithoutBatchInput | ValuationLogUpdateManyWithWhereWithoutBatchInput[]
    deleteMany?: ValuationLogScalarWhereInput | ValuationLogScalarWhereInput[]
  }

  export type ReclassificationRequestUpdateManyWithoutBatchNestedInput = {
    create?: XOR<ReclassificationRequestCreateWithoutBatchInput, ReclassificationRequestUncheckedCreateWithoutBatchInput> | ReclassificationRequestCreateWithoutBatchInput[] | ReclassificationRequestUncheckedCreateWithoutBatchInput[]
    connectOrCreate?: ReclassificationRequestCreateOrConnectWithoutBatchInput | ReclassificationRequestCreateOrConnectWithoutBatchInput[]
    upsert?: ReclassificationRequestUpsertWithWhereUniqueWithoutBatchInput | ReclassificationRequestUpsertWithWhereUniqueWithoutBatchInput[]
    createMany?: ReclassificationRequestCreateManyBatchInputEnvelope
    set?: ReclassificationRequestWhereUniqueInput | ReclassificationRequestWhereUniqueInput[]
    disconnect?: ReclassificationRequestWhereUniqueInput | ReclassificationRequestWhereUniqueInput[]
    delete?: ReclassificationRequestWhereUniqueInput | ReclassificationRequestWhereUniqueInput[]
    connect?: ReclassificationRequestWhereUniqueInput | ReclassificationRequestWhereUniqueInput[]
    update?: ReclassificationRequestUpdateWithWhereUniqueWithoutBatchInput | ReclassificationRequestUpdateWithWhereUniqueWithoutBatchInput[]
    updateMany?: ReclassificationRequestUpdateManyWithWhereWithoutBatchInput | ReclassificationRequestUpdateManyWithWhereWithoutBatchInput[]
    deleteMany?: ReclassificationRequestScalarWhereInput | ReclassificationRequestScalarWhereInput[]
  }

  export type LoanUpdateManyWithoutBatchNestedInput = {
    create?: XOR<LoanCreateWithoutBatchInput, LoanUncheckedCreateWithoutBatchInput> | LoanCreateWithoutBatchInput[] | LoanUncheckedCreateWithoutBatchInput[]
    connectOrCreate?: LoanCreateOrConnectWithoutBatchInput | LoanCreateOrConnectWithoutBatchInput[]
    upsert?: LoanUpsertWithWhereUniqueWithoutBatchInput | LoanUpsertWithWhereUniqueWithoutBatchInput[]
    createMany?: LoanCreateManyBatchInputEnvelope
    set?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    disconnect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    delete?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    connect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    update?: LoanUpdateWithWhereUniqueWithoutBatchInput | LoanUpdateWithWhereUniqueWithoutBatchInput[]
    updateMany?: LoanUpdateManyWithWhereWithoutBatchInput | LoanUpdateManyWithWhereWithoutBatchInput[]
    deleteMany?: LoanScalarWhereInput | LoanScalarWhereInput[]
  }

  export type AuditLogEntryUpdateManyWithoutBatchNestedInput = {
    create?: XOR<AuditLogEntryCreateWithoutBatchInput, AuditLogEntryUncheckedCreateWithoutBatchInput> | AuditLogEntryCreateWithoutBatchInput[] | AuditLogEntryUncheckedCreateWithoutBatchInput[]
    connectOrCreate?: AuditLogEntryCreateOrConnectWithoutBatchInput | AuditLogEntryCreateOrConnectWithoutBatchInput[]
    upsert?: AuditLogEntryUpsertWithWhereUniqueWithoutBatchInput | AuditLogEntryUpsertWithWhereUniqueWithoutBatchInput[]
    createMany?: AuditLogEntryCreateManyBatchInputEnvelope
    set?: AuditLogEntryWhereUniqueInput | AuditLogEntryWhereUniqueInput[]
    disconnect?: AuditLogEntryWhereUniqueInput | AuditLogEntryWhereUniqueInput[]
    delete?: AuditLogEntryWhereUniqueInput | AuditLogEntryWhereUniqueInput[]
    connect?: AuditLogEntryWhereUniqueInput | AuditLogEntryWhereUniqueInput[]
    update?: AuditLogEntryUpdateWithWhereUniqueWithoutBatchInput | AuditLogEntryUpdateWithWhereUniqueWithoutBatchInput[]
    updateMany?: AuditLogEntryUpdateManyWithWhereWithoutBatchInput | AuditLogEntryUpdateManyWithWhereWithoutBatchInput[]
    deleteMany?: AuditLogEntryScalarWhereInput | AuditLogEntryScalarWhereInput[]
  }

  export type UserUpdateOneWithoutBatchesNestedInput = {
    create?: XOR<UserCreateWithoutBatchesInput, UserUncheckedCreateWithoutBatchesInput>
    connectOrCreate?: UserCreateOrConnectWithoutBatchesInput
    upsert?: UserUpsertWithoutBatchesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBatchesInput, UserUpdateWithoutBatchesInput>, UserUncheckedUpdateWithoutBatchesInput>
  }

  export type EntityUpdateOneRequiredWithoutBatchesNestedInput = {
    create?: XOR<EntityCreateWithoutBatchesInput, EntityUncheckedCreateWithoutBatchesInput>
    connectOrCreate?: EntityCreateOrConnectWithoutBatchesInput
    upsert?: EntityUpsertWithoutBatchesInput
    connect?: EntityWhereUniqueInput
    update?: XOR<XOR<EntityUpdateToOneWithWhereWithoutBatchesInput, EntityUpdateWithoutBatchesInput>, EntityUncheckedUpdateWithoutBatchesInput>
  }

  export type ProjectUpdateOneRequiredWithoutAccusNestedInput = {
    create?: XOR<ProjectCreateWithoutAccusInput, ProjectUncheckedCreateWithoutAccusInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutAccusInput
    upsert?: ProjectUpsertWithoutAccusInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutAccusInput, ProjectUpdateWithoutAccusInput>, ProjectUncheckedUpdateWithoutAccusInput>
  }

  export type ValuationLogUncheckedUpdateManyWithoutBatchNestedInput = {
    create?: XOR<ValuationLogCreateWithoutBatchInput, ValuationLogUncheckedCreateWithoutBatchInput> | ValuationLogCreateWithoutBatchInput[] | ValuationLogUncheckedCreateWithoutBatchInput[]
    connectOrCreate?: ValuationLogCreateOrConnectWithoutBatchInput | ValuationLogCreateOrConnectWithoutBatchInput[]
    upsert?: ValuationLogUpsertWithWhereUniqueWithoutBatchInput | ValuationLogUpsertWithWhereUniqueWithoutBatchInput[]
    createMany?: ValuationLogCreateManyBatchInputEnvelope
    set?: ValuationLogWhereUniqueInput | ValuationLogWhereUniqueInput[]
    disconnect?: ValuationLogWhereUniqueInput | ValuationLogWhereUniqueInput[]
    delete?: ValuationLogWhereUniqueInput | ValuationLogWhereUniqueInput[]
    connect?: ValuationLogWhereUniqueInput | ValuationLogWhereUniqueInput[]
    update?: ValuationLogUpdateWithWhereUniqueWithoutBatchInput | ValuationLogUpdateWithWhereUniqueWithoutBatchInput[]
    updateMany?: ValuationLogUpdateManyWithWhereWithoutBatchInput | ValuationLogUpdateManyWithWhereWithoutBatchInput[]
    deleteMany?: ValuationLogScalarWhereInput | ValuationLogScalarWhereInput[]
  }

  export type ReclassificationRequestUncheckedUpdateManyWithoutBatchNestedInput = {
    create?: XOR<ReclassificationRequestCreateWithoutBatchInput, ReclassificationRequestUncheckedCreateWithoutBatchInput> | ReclassificationRequestCreateWithoutBatchInput[] | ReclassificationRequestUncheckedCreateWithoutBatchInput[]
    connectOrCreate?: ReclassificationRequestCreateOrConnectWithoutBatchInput | ReclassificationRequestCreateOrConnectWithoutBatchInput[]
    upsert?: ReclassificationRequestUpsertWithWhereUniqueWithoutBatchInput | ReclassificationRequestUpsertWithWhereUniqueWithoutBatchInput[]
    createMany?: ReclassificationRequestCreateManyBatchInputEnvelope
    set?: ReclassificationRequestWhereUniqueInput | ReclassificationRequestWhereUniqueInput[]
    disconnect?: ReclassificationRequestWhereUniqueInput | ReclassificationRequestWhereUniqueInput[]
    delete?: ReclassificationRequestWhereUniqueInput | ReclassificationRequestWhereUniqueInput[]
    connect?: ReclassificationRequestWhereUniqueInput | ReclassificationRequestWhereUniqueInput[]
    update?: ReclassificationRequestUpdateWithWhereUniqueWithoutBatchInput | ReclassificationRequestUpdateWithWhereUniqueWithoutBatchInput[]
    updateMany?: ReclassificationRequestUpdateManyWithWhereWithoutBatchInput | ReclassificationRequestUpdateManyWithWhereWithoutBatchInput[]
    deleteMany?: ReclassificationRequestScalarWhereInput | ReclassificationRequestScalarWhereInput[]
  }

  export type LoanUncheckedUpdateManyWithoutBatchNestedInput = {
    create?: XOR<LoanCreateWithoutBatchInput, LoanUncheckedCreateWithoutBatchInput> | LoanCreateWithoutBatchInput[] | LoanUncheckedCreateWithoutBatchInput[]
    connectOrCreate?: LoanCreateOrConnectWithoutBatchInput | LoanCreateOrConnectWithoutBatchInput[]
    upsert?: LoanUpsertWithWhereUniqueWithoutBatchInput | LoanUpsertWithWhereUniqueWithoutBatchInput[]
    createMany?: LoanCreateManyBatchInputEnvelope
    set?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    disconnect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    delete?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    connect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    update?: LoanUpdateWithWhereUniqueWithoutBatchInput | LoanUpdateWithWhereUniqueWithoutBatchInput[]
    updateMany?: LoanUpdateManyWithWhereWithoutBatchInput | LoanUpdateManyWithWhereWithoutBatchInput[]
    deleteMany?: LoanScalarWhereInput | LoanScalarWhereInput[]
  }

  export type AuditLogEntryUncheckedUpdateManyWithoutBatchNestedInput = {
    create?: XOR<AuditLogEntryCreateWithoutBatchInput, AuditLogEntryUncheckedCreateWithoutBatchInput> | AuditLogEntryCreateWithoutBatchInput[] | AuditLogEntryUncheckedCreateWithoutBatchInput[]
    connectOrCreate?: AuditLogEntryCreateOrConnectWithoutBatchInput | AuditLogEntryCreateOrConnectWithoutBatchInput[]
    upsert?: AuditLogEntryUpsertWithWhereUniqueWithoutBatchInput | AuditLogEntryUpsertWithWhereUniqueWithoutBatchInput[]
    createMany?: AuditLogEntryCreateManyBatchInputEnvelope
    set?: AuditLogEntryWhereUniqueInput | AuditLogEntryWhereUniqueInput[]
    disconnect?: AuditLogEntryWhereUniqueInput | AuditLogEntryWhereUniqueInput[]
    delete?: AuditLogEntryWhereUniqueInput | AuditLogEntryWhereUniqueInput[]
    connect?: AuditLogEntryWhereUniqueInput | AuditLogEntryWhereUniqueInput[]
    update?: AuditLogEntryUpdateWithWhereUniqueWithoutBatchInput | AuditLogEntryUpdateWithWhereUniqueWithoutBatchInput[]
    updateMany?: AuditLogEntryUpdateManyWithWhereWithoutBatchInput | AuditLogEntryUpdateManyWithWhereWithoutBatchInput[]
    deleteMany?: AuditLogEntryScalarWhereInput | AuditLogEntryScalarWhereInput[]
  }

  export type ACCUCreateNestedManyWithoutProjectInput = {
    create?: XOR<ACCUCreateWithoutProjectInput, ACCUUncheckedCreateWithoutProjectInput> | ACCUCreateWithoutProjectInput[] | ACCUUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ACCUCreateOrConnectWithoutProjectInput | ACCUCreateOrConnectWithoutProjectInput[]
    createMany?: ACCUCreateManyProjectInputEnvelope
    connect?: ACCUWhereUniqueInput | ACCUWhereUniqueInput[]
  }

  export type ACCUUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<ACCUCreateWithoutProjectInput, ACCUUncheckedCreateWithoutProjectInput> | ACCUCreateWithoutProjectInput[] | ACCUUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ACCUCreateOrConnectWithoutProjectInput | ACCUCreateOrConnectWithoutProjectInput[]
    createMany?: ACCUCreateManyProjectInputEnvelope
    connect?: ACCUWhereUniqueInput | ACCUWhereUniqueInput[]
  }

  export type ACCUUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ACCUCreateWithoutProjectInput, ACCUUncheckedCreateWithoutProjectInput> | ACCUCreateWithoutProjectInput[] | ACCUUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ACCUCreateOrConnectWithoutProjectInput | ACCUCreateOrConnectWithoutProjectInput[]
    upsert?: ACCUUpsertWithWhereUniqueWithoutProjectInput | ACCUUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ACCUCreateManyProjectInputEnvelope
    set?: ACCUWhereUniqueInput | ACCUWhereUniqueInput[]
    disconnect?: ACCUWhereUniqueInput | ACCUWhereUniqueInput[]
    delete?: ACCUWhereUniqueInput | ACCUWhereUniqueInput[]
    connect?: ACCUWhereUniqueInput | ACCUWhereUniqueInput[]
    update?: ACCUUpdateWithWhereUniqueWithoutProjectInput | ACCUUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ACCUUpdateManyWithWhereWithoutProjectInput | ACCUUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ACCUScalarWhereInput | ACCUScalarWhereInput[]
  }

  export type ACCUUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ACCUCreateWithoutProjectInput, ACCUUncheckedCreateWithoutProjectInput> | ACCUCreateWithoutProjectInput[] | ACCUUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ACCUCreateOrConnectWithoutProjectInput | ACCUCreateOrConnectWithoutProjectInput[]
    upsert?: ACCUUpsertWithWhereUniqueWithoutProjectInput | ACCUUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ACCUCreateManyProjectInputEnvelope
    set?: ACCUWhereUniqueInput | ACCUWhereUniqueInput[]
    disconnect?: ACCUWhereUniqueInput | ACCUWhereUniqueInput[]
    delete?: ACCUWhereUniqueInput | ACCUWhereUniqueInput[]
    connect?: ACCUWhereUniqueInput | ACCUWhereUniqueInput[]
    update?: ACCUUpdateWithWhereUniqueWithoutProjectInput | ACCUUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ACCUUpdateManyWithWhereWithoutProjectInput | ACCUUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ACCUScalarWhereInput | ACCUScalarWhereInput[]
  }

  export type ACCUCreateNestedOneWithoutValuationLogsInput = {
    create?: XOR<ACCUCreateWithoutValuationLogsInput, ACCUUncheckedCreateWithoutValuationLogsInput>
    connectOrCreate?: ACCUCreateOrConnectWithoutValuationLogsInput
    connect?: ACCUWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutValuationLogsInput = {
    create?: XOR<UserCreateWithoutValuationLogsInput, UserUncheckedCreateWithoutValuationLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutValuationLogsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ACCUUpdateOneRequiredWithoutValuationLogsNestedInput = {
    create?: XOR<ACCUCreateWithoutValuationLogsInput, ACCUUncheckedCreateWithoutValuationLogsInput>
    connectOrCreate?: ACCUCreateOrConnectWithoutValuationLogsInput
    upsert?: ACCUUpsertWithoutValuationLogsInput
    connect?: ACCUWhereUniqueInput
    update?: XOR<XOR<ACCUUpdateToOneWithWhereWithoutValuationLogsInput, ACCUUpdateWithoutValuationLogsInput>, ACCUUncheckedUpdateWithoutValuationLogsInput>
  }

  export type UserUpdateOneRequiredWithoutValuationLogsNestedInput = {
    create?: XOR<UserCreateWithoutValuationLogsInput, UserUncheckedCreateWithoutValuationLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutValuationLogsInput
    upsert?: UserUpsertWithoutValuationLogsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutValuationLogsInput, UserUpdateWithoutValuationLogsInput>, UserUncheckedUpdateWithoutValuationLogsInput>
  }

  export type UserCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    connect?: UserWhereUniqueInput
  }

  export type ACCUCreateNestedOneWithoutAuditLogEntriesInput = {
    create?: XOR<ACCUCreateWithoutAuditLogEntriesInput, ACCUUncheckedCreateWithoutAuditLogEntriesInput>
    connectOrCreate?: ACCUCreateOrConnectWithoutAuditLogEntriesInput
    connect?: ACCUWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUpdateOneWithoutAuditLogsNestedInput = {
    create?: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAuditLogsInput
    upsert?: UserUpsertWithoutAuditLogsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAuditLogsInput, UserUpdateWithoutAuditLogsInput>, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type ACCUUpdateOneWithoutAuditLogEntriesNestedInput = {
    create?: XOR<ACCUCreateWithoutAuditLogEntriesInput, ACCUUncheckedCreateWithoutAuditLogEntriesInput>
    connectOrCreate?: ACCUCreateOrConnectWithoutAuditLogEntriesInput
    upsert?: ACCUUpsertWithoutAuditLogEntriesInput
    disconnect?: ACCUWhereInput | boolean
    delete?: ACCUWhereInput | boolean
    connect?: ACCUWhereUniqueInput
    update?: XOR<XOR<ACCUUpdateToOneWithWhereWithoutAuditLogEntriesInput, ACCUUpdateWithoutAuditLogEntriesInput>, ACCUUncheckedUpdateWithoutAuditLogEntriesInput>
  }

  export type JournalLineCreateNestedManyWithoutEntryInput = {
    create?: XOR<JournalLineCreateWithoutEntryInput, JournalLineUncheckedCreateWithoutEntryInput> | JournalLineCreateWithoutEntryInput[] | JournalLineUncheckedCreateWithoutEntryInput[]
    connectOrCreate?: JournalLineCreateOrConnectWithoutEntryInput | JournalLineCreateOrConnectWithoutEntryInput[]
    createMany?: JournalLineCreateManyEntryInputEnvelope
    connect?: JournalLineWhereUniqueInput | JournalLineWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutJournalEntriesInput = {
    create?: XOR<UserCreateWithoutJournalEntriesInput, UserUncheckedCreateWithoutJournalEntriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutJournalEntriesInput
    connect?: UserWhereUniqueInput
  }

  export type JournalLineUncheckedCreateNestedManyWithoutEntryInput = {
    create?: XOR<JournalLineCreateWithoutEntryInput, JournalLineUncheckedCreateWithoutEntryInput> | JournalLineCreateWithoutEntryInput[] | JournalLineUncheckedCreateWithoutEntryInput[]
    connectOrCreate?: JournalLineCreateOrConnectWithoutEntryInput | JournalLineCreateOrConnectWithoutEntryInput[]
    createMany?: JournalLineCreateManyEntryInputEnvelope
    connect?: JournalLineWhereUniqueInput | JournalLineWhereUniqueInput[]
  }

  export type JournalLineUpdateManyWithoutEntryNestedInput = {
    create?: XOR<JournalLineCreateWithoutEntryInput, JournalLineUncheckedCreateWithoutEntryInput> | JournalLineCreateWithoutEntryInput[] | JournalLineUncheckedCreateWithoutEntryInput[]
    connectOrCreate?: JournalLineCreateOrConnectWithoutEntryInput | JournalLineCreateOrConnectWithoutEntryInput[]
    upsert?: JournalLineUpsertWithWhereUniqueWithoutEntryInput | JournalLineUpsertWithWhereUniqueWithoutEntryInput[]
    createMany?: JournalLineCreateManyEntryInputEnvelope
    set?: JournalLineWhereUniqueInput | JournalLineWhereUniqueInput[]
    disconnect?: JournalLineWhereUniqueInput | JournalLineWhereUniqueInput[]
    delete?: JournalLineWhereUniqueInput | JournalLineWhereUniqueInput[]
    connect?: JournalLineWhereUniqueInput | JournalLineWhereUniqueInput[]
    update?: JournalLineUpdateWithWhereUniqueWithoutEntryInput | JournalLineUpdateWithWhereUniqueWithoutEntryInput[]
    updateMany?: JournalLineUpdateManyWithWhereWithoutEntryInput | JournalLineUpdateManyWithWhereWithoutEntryInput[]
    deleteMany?: JournalLineScalarWhereInput | JournalLineScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutJournalEntriesNestedInput = {
    create?: XOR<UserCreateWithoutJournalEntriesInput, UserUncheckedCreateWithoutJournalEntriesInput>
    connectOrCreate?: UserCreateOrConnectWithoutJournalEntriesInput
    upsert?: UserUpsertWithoutJournalEntriesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutJournalEntriesInput, UserUpdateWithoutJournalEntriesInput>, UserUncheckedUpdateWithoutJournalEntriesInput>
  }

  export type JournalLineUncheckedUpdateManyWithoutEntryNestedInput = {
    create?: XOR<JournalLineCreateWithoutEntryInput, JournalLineUncheckedCreateWithoutEntryInput> | JournalLineCreateWithoutEntryInput[] | JournalLineUncheckedCreateWithoutEntryInput[]
    connectOrCreate?: JournalLineCreateOrConnectWithoutEntryInput | JournalLineCreateOrConnectWithoutEntryInput[]
    upsert?: JournalLineUpsertWithWhereUniqueWithoutEntryInput | JournalLineUpsertWithWhereUniqueWithoutEntryInput[]
    createMany?: JournalLineCreateManyEntryInputEnvelope
    set?: JournalLineWhereUniqueInput | JournalLineWhereUniqueInput[]
    disconnect?: JournalLineWhereUniqueInput | JournalLineWhereUniqueInput[]
    delete?: JournalLineWhereUniqueInput | JournalLineWhereUniqueInput[]
    connect?: JournalLineWhereUniqueInput | JournalLineWhereUniqueInput[]
    update?: JournalLineUpdateWithWhereUniqueWithoutEntryInput | JournalLineUpdateWithWhereUniqueWithoutEntryInput[]
    updateMany?: JournalLineUpdateManyWithWhereWithoutEntryInput | JournalLineUpdateManyWithWhereWithoutEntryInput[]
    deleteMany?: JournalLineScalarWhereInput | JournalLineScalarWhereInput[]
  }

  export type JournalEntryCreateNestedOneWithoutLinesInput = {
    create?: XOR<JournalEntryCreateWithoutLinesInput, JournalEntryUncheckedCreateWithoutLinesInput>
    connectOrCreate?: JournalEntryCreateOrConnectWithoutLinesInput
    connect?: JournalEntryWhereUniqueInput
  }

  export type JournalEntryUpdateOneRequiredWithoutLinesNestedInput = {
    create?: XOR<JournalEntryCreateWithoutLinesInput, JournalEntryUncheckedCreateWithoutLinesInput>
    connectOrCreate?: JournalEntryCreateOrConnectWithoutLinesInput
    upsert?: JournalEntryUpsertWithoutLinesInput
    connect?: JournalEntryWhereUniqueInput
    update?: XOR<XOR<JournalEntryUpdateToOneWithWhereWithoutLinesInput, JournalEntryUpdateWithoutLinesInput>, JournalEntryUncheckedUpdateWithoutLinesInput>
  }

  export type UserCreateNestedOneWithoutXbrlTagsInput = {
    create?: XOR<UserCreateWithoutXbrlTagsInput, UserUncheckedCreateWithoutXbrlTagsInput>
    connectOrCreate?: UserCreateOrConnectWithoutXbrlTagsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutXbrlTagsNestedInput = {
    create?: XOR<UserCreateWithoutXbrlTagsInput, UserUncheckedCreateWithoutXbrlTagsInput>
    connectOrCreate?: UserCreateOrConnectWithoutXbrlTagsInput
    upsert?: UserUpsertWithoutXbrlTagsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutXbrlTagsInput, UserUpdateWithoutXbrlTagsInput>, UserUncheckedUpdateWithoutXbrlTagsInput>
  }

  export type ACCUCreateNestedOneWithoutReclassificationRequestsInput = {
    create?: XOR<ACCUCreateWithoutReclassificationRequestsInput, ACCUUncheckedCreateWithoutReclassificationRequestsInput>
    connectOrCreate?: ACCUCreateOrConnectWithoutReclassificationRequestsInput
    connect?: ACCUWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReclassRequestsInput = {
    create?: XOR<UserCreateWithoutReclassRequestsInput, UserUncheckedCreateWithoutReclassRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReclassRequestsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumReclassificationStatusFieldUpdateOperationsInput = {
    set?: $Enums.ReclassificationStatus
  }

  export type ACCUUpdateOneRequiredWithoutReclassificationRequestsNestedInput = {
    create?: XOR<ACCUCreateWithoutReclassificationRequestsInput, ACCUUncheckedCreateWithoutReclassificationRequestsInput>
    connectOrCreate?: ACCUCreateOrConnectWithoutReclassificationRequestsInput
    upsert?: ACCUUpsertWithoutReclassificationRequestsInput
    connect?: ACCUWhereUniqueInput
    update?: XOR<XOR<ACCUUpdateToOneWithWhereWithoutReclassificationRequestsInput, ACCUUpdateWithoutReclassificationRequestsInput>, ACCUUncheckedUpdateWithoutReclassificationRequestsInput>
  }

  export type UserUpdateOneRequiredWithoutReclassRequestsNestedInput = {
    create?: XOR<UserCreateWithoutReclassRequestsInput, UserUncheckedCreateWithoutReclassRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReclassRequestsInput
    upsert?: UserUpsertWithoutReclassRequestsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReclassRequestsInput, UserUpdateWithoutReclassRequestsInput>, UserUncheckedUpdateWithoutReclassRequestsInput>
  }

  export type ACCUCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ACCUCreateWithoutCreatedByInput, ACCUUncheckedCreateWithoutCreatedByInput> | ACCUCreateWithoutCreatedByInput[] | ACCUUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ACCUCreateOrConnectWithoutCreatedByInput | ACCUCreateOrConnectWithoutCreatedByInput[]
    createMany?: ACCUCreateManyCreatedByInputEnvelope
    connect?: ACCUWhereUniqueInput | ACCUWhereUniqueInput[]
  }

  export type ValuationLogCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ValuationLogCreateWithoutCreatedByInput, ValuationLogUncheckedCreateWithoutCreatedByInput> | ValuationLogCreateWithoutCreatedByInput[] | ValuationLogUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ValuationLogCreateOrConnectWithoutCreatedByInput | ValuationLogCreateOrConnectWithoutCreatedByInput[]
    createMany?: ValuationLogCreateManyCreatedByInputEnvelope
    connect?: ValuationLogWhereUniqueInput | ValuationLogWhereUniqueInput[]
  }

  export type AuditLogEntryCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogEntryCreateWithoutUserInput, AuditLogEntryUncheckedCreateWithoutUserInput> | AuditLogEntryCreateWithoutUserInput[] | AuditLogEntryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogEntryCreateOrConnectWithoutUserInput | AuditLogEntryCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogEntryCreateManyUserInputEnvelope
    connect?: AuditLogEntryWhereUniqueInput | AuditLogEntryWhereUniqueInput[]
  }

  export type JournalEntryCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<JournalEntryCreateWithoutCreatedByInput, JournalEntryUncheckedCreateWithoutCreatedByInput> | JournalEntryCreateWithoutCreatedByInput[] | JournalEntryUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: JournalEntryCreateOrConnectWithoutCreatedByInput | JournalEntryCreateOrConnectWithoutCreatedByInput[]
    createMany?: JournalEntryCreateManyCreatedByInputEnvelope
    connect?: JournalEntryWhereUniqueInput | JournalEntryWhereUniqueInput[]
  }

  export type ReclassificationRequestCreateNestedManyWithoutSubmittedByUserInput = {
    create?: XOR<ReclassificationRequestCreateWithoutSubmittedByUserInput, ReclassificationRequestUncheckedCreateWithoutSubmittedByUserInput> | ReclassificationRequestCreateWithoutSubmittedByUserInput[] | ReclassificationRequestUncheckedCreateWithoutSubmittedByUserInput[]
    connectOrCreate?: ReclassificationRequestCreateOrConnectWithoutSubmittedByUserInput | ReclassificationRequestCreateOrConnectWithoutSubmittedByUserInput[]
    createMany?: ReclassificationRequestCreateManySubmittedByUserInputEnvelope
    connect?: ReclassificationRequestWhereUniqueInput | ReclassificationRequestWhereUniqueInput[]
  }

  export type UserSettingCreateNestedManyWithoutUserInput = {
    create?: XOR<UserSettingCreateWithoutUserInput, UserSettingUncheckedCreateWithoutUserInput> | UserSettingCreateWithoutUserInput[] | UserSettingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSettingCreateOrConnectWithoutUserInput | UserSettingCreateOrConnectWithoutUserInput[]
    createMany?: UserSettingCreateManyUserInputEnvelope
    connect?: UserSettingWhereUniqueInput | UserSettingWhereUniqueInput[]
  }

  export type XbrlTagCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<XbrlTagCreateWithoutCreatedByInput, XbrlTagUncheckedCreateWithoutCreatedByInput> | XbrlTagCreateWithoutCreatedByInput[] | XbrlTagUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: XbrlTagCreateOrConnectWithoutCreatedByInput | XbrlTagCreateOrConnectWithoutCreatedByInput[]
    createMany?: XbrlTagCreateManyCreatedByInputEnvelope
    connect?: XbrlTagWhereUniqueInput | XbrlTagWhereUniqueInput[]
  }

  export type ImportJobCreateNestedManyWithoutUserInput = {
    create?: XOR<ImportJobCreateWithoutUserInput, ImportJobUncheckedCreateWithoutUserInput> | ImportJobCreateWithoutUserInput[] | ImportJobUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ImportJobCreateOrConnectWithoutUserInput | ImportJobCreateOrConnectWithoutUserInput[]
    createMany?: ImportJobCreateManyUserInputEnvelope
    connect?: ImportJobWhereUniqueInput | ImportJobWhereUniqueInput[]
  }

  export type EntityCreateNestedOneWithoutUsersInput = {
    create?: XOR<EntityCreateWithoutUsersInput, EntityUncheckedCreateWithoutUsersInput>
    connectOrCreate?: EntityCreateOrConnectWithoutUsersInput
    connect?: EntityWhereUniqueInput
  }

  export type ACCUUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ACCUCreateWithoutCreatedByInput, ACCUUncheckedCreateWithoutCreatedByInput> | ACCUCreateWithoutCreatedByInput[] | ACCUUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ACCUCreateOrConnectWithoutCreatedByInput | ACCUCreateOrConnectWithoutCreatedByInput[]
    createMany?: ACCUCreateManyCreatedByInputEnvelope
    connect?: ACCUWhereUniqueInput | ACCUWhereUniqueInput[]
  }

  export type ValuationLogUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ValuationLogCreateWithoutCreatedByInput, ValuationLogUncheckedCreateWithoutCreatedByInput> | ValuationLogCreateWithoutCreatedByInput[] | ValuationLogUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ValuationLogCreateOrConnectWithoutCreatedByInput | ValuationLogCreateOrConnectWithoutCreatedByInput[]
    createMany?: ValuationLogCreateManyCreatedByInputEnvelope
    connect?: ValuationLogWhereUniqueInput | ValuationLogWhereUniqueInput[]
  }

  export type AuditLogEntryUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogEntryCreateWithoutUserInput, AuditLogEntryUncheckedCreateWithoutUserInput> | AuditLogEntryCreateWithoutUserInput[] | AuditLogEntryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogEntryCreateOrConnectWithoutUserInput | AuditLogEntryCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogEntryCreateManyUserInputEnvelope
    connect?: AuditLogEntryWhereUniqueInput | AuditLogEntryWhereUniqueInput[]
  }

  export type JournalEntryUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<JournalEntryCreateWithoutCreatedByInput, JournalEntryUncheckedCreateWithoutCreatedByInput> | JournalEntryCreateWithoutCreatedByInput[] | JournalEntryUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: JournalEntryCreateOrConnectWithoutCreatedByInput | JournalEntryCreateOrConnectWithoutCreatedByInput[]
    createMany?: JournalEntryCreateManyCreatedByInputEnvelope
    connect?: JournalEntryWhereUniqueInput | JournalEntryWhereUniqueInput[]
  }

  export type ReclassificationRequestUncheckedCreateNestedManyWithoutSubmittedByUserInput = {
    create?: XOR<ReclassificationRequestCreateWithoutSubmittedByUserInput, ReclassificationRequestUncheckedCreateWithoutSubmittedByUserInput> | ReclassificationRequestCreateWithoutSubmittedByUserInput[] | ReclassificationRequestUncheckedCreateWithoutSubmittedByUserInput[]
    connectOrCreate?: ReclassificationRequestCreateOrConnectWithoutSubmittedByUserInput | ReclassificationRequestCreateOrConnectWithoutSubmittedByUserInput[]
    createMany?: ReclassificationRequestCreateManySubmittedByUserInputEnvelope
    connect?: ReclassificationRequestWhereUniqueInput | ReclassificationRequestWhereUniqueInput[]
  }

  export type UserSettingUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserSettingCreateWithoutUserInput, UserSettingUncheckedCreateWithoutUserInput> | UserSettingCreateWithoutUserInput[] | UserSettingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSettingCreateOrConnectWithoutUserInput | UserSettingCreateOrConnectWithoutUserInput[]
    createMany?: UserSettingCreateManyUserInputEnvelope
    connect?: UserSettingWhereUniqueInput | UserSettingWhereUniqueInput[]
  }

  export type XbrlTagUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<XbrlTagCreateWithoutCreatedByInput, XbrlTagUncheckedCreateWithoutCreatedByInput> | XbrlTagCreateWithoutCreatedByInput[] | XbrlTagUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: XbrlTagCreateOrConnectWithoutCreatedByInput | XbrlTagCreateOrConnectWithoutCreatedByInput[]
    createMany?: XbrlTagCreateManyCreatedByInputEnvelope
    connect?: XbrlTagWhereUniqueInput | XbrlTagWhereUniqueInput[]
  }

  export type ImportJobUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ImportJobCreateWithoutUserInput, ImportJobUncheckedCreateWithoutUserInput> | ImportJobCreateWithoutUserInput[] | ImportJobUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ImportJobCreateOrConnectWithoutUserInput | ImportJobCreateOrConnectWithoutUserInput[]
    createMany?: ImportJobCreateManyUserInputEnvelope
    connect?: ImportJobWhereUniqueInput | ImportJobWhereUniqueInput[]
  }

  export type ACCUUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ACCUCreateWithoutCreatedByInput, ACCUUncheckedCreateWithoutCreatedByInput> | ACCUCreateWithoutCreatedByInput[] | ACCUUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ACCUCreateOrConnectWithoutCreatedByInput | ACCUCreateOrConnectWithoutCreatedByInput[]
    upsert?: ACCUUpsertWithWhereUniqueWithoutCreatedByInput | ACCUUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ACCUCreateManyCreatedByInputEnvelope
    set?: ACCUWhereUniqueInput | ACCUWhereUniqueInput[]
    disconnect?: ACCUWhereUniqueInput | ACCUWhereUniqueInput[]
    delete?: ACCUWhereUniqueInput | ACCUWhereUniqueInput[]
    connect?: ACCUWhereUniqueInput | ACCUWhereUniqueInput[]
    update?: ACCUUpdateWithWhereUniqueWithoutCreatedByInput | ACCUUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ACCUUpdateManyWithWhereWithoutCreatedByInput | ACCUUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ACCUScalarWhereInput | ACCUScalarWhereInput[]
  }

  export type ValuationLogUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ValuationLogCreateWithoutCreatedByInput, ValuationLogUncheckedCreateWithoutCreatedByInput> | ValuationLogCreateWithoutCreatedByInput[] | ValuationLogUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ValuationLogCreateOrConnectWithoutCreatedByInput | ValuationLogCreateOrConnectWithoutCreatedByInput[]
    upsert?: ValuationLogUpsertWithWhereUniqueWithoutCreatedByInput | ValuationLogUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ValuationLogCreateManyCreatedByInputEnvelope
    set?: ValuationLogWhereUniqueInput | ValuationLogWhereUniqueInput[]
    disconnect?: ValuationLogWhereUniqueInput | ValuationLogWhereUniqueInput[]
    delete?: ValuationLogWhereUniqueInput | ValuationLogWhereUniqueInput[]
    connect?: ValuationLogWhereUniqueInput | ValuationLogWhereUniqueInput[]
    update?: ValuationLogUpdateWithWhereUniqueWithoutCreatedByInput | ValuationLogUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ValuationLogUpdateManyWithWhereWithoutCreatedByInput | ValuationLogUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ValuationLogScalarWhereInput | ValuationLogScalarWhereInput[]
  }

  export type AuditLogEntryUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogEntryCreateWithoutUserInput, AuditLogEntryUncheckedCreateWithoutUserInput> | AuditLogEntryCreateWithoutUserInput[] | AuditLogEntryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogEntryCreateOrConnectWithoutUserInput | AuditLogEntryCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogEntryUpsertWithWhereUniqueWithoutUserInput | AuditLogEntryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogEntryCreateManyUserInputEnvelope
    set?: AuditLogEntryWhereUniqueInput | AuditLogEntryWhereUniqueInput[]
    disconnect?: AuditLogEntryWhereUniqueInput | AuditLogEntryWhereUniqueInput[]
    delete?: AuditLogEntryWhereUniqueInput | AuditLogEntryWhereUniqueInput[]
    connect?: AuditLogEntryWhereUniqueInput | AuditLogEntryWhereUniqueInput[]
    update?: AuditLogEntryUpdateWithWhereUniqueWithoutUserInput | AuditLogEntryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogEntryUpdateManyWithWhereWithoutUserInput | AuditLogEntryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogEntryScalarWhereInput | AuditLogEntryScalarWhereInput[]
  }

  export type JournalEntryUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<JournalEntryCreateWithoutCreatedByInput, JournalEntryUncheckedCreateWithoutCreatedByInput> | JournalEntryCreateWithoutCreatedByInput[] | JournalEntryUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: JournalEntryCreateOrConnectWithoutCreatedByInput | JournalEntryCreateOrConnectWithoutCreatedByInput[]
    upsert?: JournalEntryUpsertWithWhereUniqueWithoutCreatedByInput | JournalEntryUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: JournalEntryCreateManyCreatedByInputEnvelope
    set?: JournalEntryWhereUniqueInput | JournalEntryWhereUniqueInput[]
    disconnect?: JournalEntryWhereUniqueInput | JournalEntryWhereUniqueInput[]
    delete?: JournalEntryWhereUniqueInput | JournalEntryWhereUniqueInput[]
    connect?: JournalEntryWhereUniqueInput | JournalEntryWhereUniqueInput[]
    update?: JournalEntryUpdateWithWhereUniqueWithoutCreatedByInput | JournalEntryUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: JournalEntryUpdateManyWithWhereWithoutCreatedByInput | JournalEntryUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: JournalEntryScalarWhereInput | JournalEntryScalarWhereInput[]
  }

  export type ReclassificationRequestUpdateManyWithoutSubmittedByUserNestedInput = {
    create?: XOR<ReclassificationRequestCreateWithoutSubmittedByUserInput, ReclassificationRequestUncheckedCreateWithoutSubmittedByUserInput> | ReclassificationRequestCreateWithoutSubmittedByUserInput[] | ReclassificationRequestUncheckedCreateWithoutSubmittedByUserInput[]
    connectOrCreate?: ReclassificationRequestCreateOrConnectWithoutSubmittedByUserInput | ReclassificationRequestCreateOrConnectWithoutSubmittedByUserInput[]
    upsert?: ReclassificationRequestUpsertWithWhereUniqueWithoutSubmittedByUserInput | ReclassificationRequestUpsertWithWhereUniqueWithoutSubmittedByUserInput[]
    createMany?: ReclassificationRequestCreateManySubmittedByUserInputEnvelope
    set?: ReclassificationRequestWhereUniqueInput | ReclassificationRequestWhereUniqueInput[]
    disconnect?: ReclassificationRequestWhereUniqueInput | ReclassificationRequestWhereUniqueInput[]
    delete?: ReclassificationRequestWhereUniqueInput | ReclassificationRequestWhereUniqueInput[]
    connect?: ReclassificationRequestWhereUniqueInput | ReclassificationRequestWhereUniqueInput[]
    update?: ReclassificationRequestUpdateWithWhereUniqueWithoutSubmittedByUserInput | ReclassificationRequestUpdateWithWhereUniqueWithoutSubmittedByUserInput[]
    updateMany?: ReclassificationRequestUpdateManyWithWhereWithoutSubmittedByUserInput | ReclassificationRequestUpdateManyWithWhereWithoutSubmittedByUserInput[]
    deleteMany?: ReclassificationRequestScalarWhereInput | ReclassificationRequestScalarWhereInput[]
  }

  export type UserSettingUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserSettingCreateWithoutUserInput, UserSettingUncheckedCreateWithoutUserInput> | UserSettingCreateWithoutUserInput[] | UserSettingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSettingCreateOrConnectWithoutUserInput | UserSettingCreateOrConnectWithoutUserInput[]
    upsert?: UserSettingUpsertWithWhereUniqueWithoutUserInput | UserSettingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserSettingCreateManyUserInputEnvelope
    set?: UserSettingWhereUniqueInput | UserSettingWhereUniqueInput[]
    disconnect?: UserSettingWhereUniqueInput | UserSettingWhereUniqueInput[]
    delete?: UserSettingWhereUniqueInput | UserSettingWhereUniqueInput[]
    connect?: UserSettingWhereUniqueInput | UserSettingWhereUniqueInput[]
    update?: UserSettingUpdateWithWhereUniqueWithoutUserInput | UserSettingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserSettingUpdateManyWithWhereWithoutUserInput | UserSettingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserSettingScalarWhereInput | UserSettingScalarWhereInput[]
  }

  export type XbrlTagUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<XbrlTagCreateWithoutCreatedByInput, XbrlTagUncheckedCreateWithoutCreatedByInput> | XbrlTagCreateWithoutCreatedByInput[] | XbrlTagUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: XbrlTagCreateOrConnectWithoutCreatedByInput | XbrlTagCreateOrConnectWithoutCreatedByInput[]
    upsert?: XbrlTagUpsertWithWhereUniqueWithoutCreatedByInput | XbrlTagUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: XbrlTagCreateManyCreatedByInputEnvelope
    set?: XbrlTagWhereUniqueInput | XbrlTagWhereUniqueInput[]
    disconnect?: XbrlTagWhereUniqueInput | XbrlTagWhereUniqueInput[]
    delete?: XbrlTagWhereUniqueInput | XbrlTagWhereUniqueInput[]
    connect?: XbrlTagWhereUniqueInput | XbrlTagWhereUniqueInput[]
    update?: XbrlTagUpdateWithWhereUniqueWithoutCreatedByInput | XbrlTagUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: XbrlTagUpdateManyWithWhereWithoutCreatedByInput | XbrlTagUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: XbrlTagScalarWhereInput | XbrlTagScalarWhereInput[]
  }

  export type ImportJobUpdateManyWithoutUserNestedInput = {
    create?: XOR<ImportJobCreateWithoutUserInput, ImportJobUncheckedCreateWithoutUserInput> | ImportJobCreateWithoutUserInput[] | ImportJobUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ImportJobCreateOrConnectWithoutUserInput | ImportJobCreateOrConnectWithoutUserInput[]
    upsert?: ImportJobUpsertWithWhereUniqueWithoutUserInput | ImportJobUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ImportJobCreateManyUserInputEnvelope
    set?: ImportJobWhereUniqueInput | ImportJobWhereUniqueInput[]
    disconnect?: ImportJobWhereUniqueInput | ImportJobWhereUniqueInput[]
    delete?: ImportJobWhereUniqueInput | ImportJobWhereUniqueInput[]
    connect?: ImportJobWhereUniqueInput | ImportJobWhereUniqueInput[]
    update?: ImportJobUpdateWithWhereUniqueWithoutUserInput | ImportJobUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ImportJobUpdateManyWithWhereWithoutUserInput | ImportJobUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ImportJobScalarWhereInput | ImportJobScalarWhereInput[]
  }

  export type EntityUpdateOneWithoutUsersNestedInput = {
    create?: XOR<EntityCreateWithoutUsersInput, EntityUncheckedCreateWithoutUsersInput>
    connectOrCreate?: EntityCreateOrConnectWithoutUsersInput
    upsert?: EntityUpsertWithoutUsersInput
    disconnect?: EntityWhereInput | boolean
    delete?: EntityWhereInput | boolean
    connect?: EntityWhereUniqueInput
    update?: XOR<XOR<EntityUpdateToOneWithWhereWithoutUsersInput, EntityUpdateWithoutUsersInput>, EntityUncheckedUpdateWithoutUsersInput>
  }

  export type ACCUUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ACCUCreateWithoutCreatedByInput, ACCUUncheckedCreateWithoutCreatedByInput> | ACCUCreateWithoutCreatedByInput[] | ACCUUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ACCUCreateOrConnectWithoutCreatedByInput | ACCUCreateOrConnectWithoutCreatedByInput[]
    upsert?: ACCUUpsertWithWhereUniqueWithoutCreatedByInput | ACCUUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ACCUCreateManyCreatedByInputEnvelope
    set?: ACCUWhereUniqueInput | ACCUWhereUniqueInput[]
    disconnect?: ACCUWhereUniqueInput | ACCUWhereUniqueInput[]
    delete?: ACCUWhereUniqueInput | ACCUWhereUniqueInput[]
    connect?: ACCUWhereUniqueInput | ACCUWhereUniqueInput[]
    update?: ACCUUpdateWithWhereUniqueWithoutCreatedByInput | ACCUUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ACCUUpdateManyWithWhereWithoutCreatedByInput | ACCUUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ACCUScalarWhereInput | ACCUScalarWhereInput[]
  }

  export type ValuationLogUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ValuationLogCreateWithoutCreatedByInput, ValuationLogUncheckedCreateWithoutCreatedByInput> | ValuationLogCreateWithoutCreatedByInput[] | ValuationLogUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ValuationLogCreateOrConnectWithoutCreatedByInput | ValuationLogCreateOrConnectWithoutCreatedByInput[]
    upsert?: ValuationLogUpsertWithWhereUniqueWithoutCreatedByInput | ValuationLogUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ValuationLogCreateManyCreatedByInputEnvelope
    set?: ValuationLogWhereUniqueInput | ValuationLogWhereUniqueInput[]
    disconnect?: ValuationLogWhereUniqueInput | ValuationLogWhereUniqueInput[]
    delete?: ValuationLogWhereUniqueInput | ValuationLogWhereUniqueInput[]
    connect?: ValuationLogWhereUniqueInput | ValuationLogWhereUniqueInput[]
    update?: ValuationLogUpdateWithWhereUniqueWithoutCreatedByInput | ValuationLogUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ValuationLogUpdateManyWithWhereWithoutCreatedByInput | ValuationLogUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ValuationLogScalarWhereInput | ValuationLogScalarWhereInput[]
  }

  export type AuditLogEntryUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogEntryCreateWithoutUserInput, AuditLogEntryUncheckedCreateWithoutUserInput> | AuditLogEntryCreateWithoutUserInput[] | AuditLogEntryUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogEntryCreateOrConnectWithoutUserInput | AuditLogEntryCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogEntryUpsertWithWhereUniqueWithoutUserInput | AuditLogEntryUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogEntryCreateManyUserInputEnvelope
    set?: AuditLogEntryWhereUniqueInput | AuditLogEntryWhereUniqueInput[]
    disconnect?: AuditLogEntryWhereUniqueInput | AuditLogEntryWhereUniqueInput[]
    delete?: AuditLogEntryWhereUniqueInput | AuditLogEntryWhereUniqueInput[]
    connect?: AuditLogEntryWhereUniqueInput | AuditLogEntryWhereUniqueInput[]
    update?: AuditLogEntryUpdateWithWhereUniqueWithoutUserInput | AuditLogEntryUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogEntryUpdateManyWithWhereWithoutUserInput | AuditLogEntryUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogEntryScalarWhereInput | AuditLogEntryScalarWhereInput[]
  }

  export type JournalEntryUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<JournalEntryCreateWithoutCreatedByInput, JournalEntryUncheckedCreateWithoutCreatedByInput> | JournalEntryCreateWithoutCreatedByInput[] | JournalEntryUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: JournalEntryCreateOrConnectWithoutCreatedByInput | JournalEntryCreateOrConnectWithoutCreatedByInput[]
    upsert?: JournalEntryUpsertWithWhereUniqueWithoutCreatedByInput | JournalEntryUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: JournalEntryCreateManyCreatedByInputEnvelope
    set?: JournalEntryWhereUniqueInput | JournalEntryWhereUniqueInput[]
    disconnect?: JournalEntryWhereUniqueInput | JournalEntryWhereUniqueInput[]
    delete?: JournalEntryWhereUniqueInput | JournalEntryWhereUniqueInput[]
    connect?: JournalEntryWhereUniqueInput | JournalEntryWhereUniqueInput[]
    update?: JournalEntryUpdateWithWhereUniqueWithoutCreatedByInput | JournalEntryUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: JournalEntryUpdateManyWithWhereWithoutCreatedByInput | JournalEntryUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: JournalEntryScalarWhereInput | JournalEntryScalarWhereInput[]
  }

  export type ReclassificationRequestUncheckedUpdateManyWithoutSubmittedByUserNestedInput = {
    create?: XOR<ReclassificationRequestCreateWithoutSubmittedByUserInput, ReclassificationRequestUncheckedCreateWithoutSubmittedByUserInput> | ReclassificationRequestCreateWithoutSubmittedByUserInput[] | ReclassificationRequestUncheckedCreateWithoutSubmittedByUserInput[]
    connectOrCreate?: ReclassificationRequestCreateOrConnectWithoutSubmittedByUserInput | ReclassificationRequestCreateOrConnectWithoutSubmittedByUserInput[]
    upsert?: ReclassificationRequestUpsertWithWhereUniqueWithoutSubmittedByUserInput | ReclassificationRequestUpsertWithWhereUniqueWithoutSubmittedByUserInput[]
    createMany?: ReclassificationRequestCreateManySubmittedByUserInputEnvelope
    set?: ReclassificationRequestWhereUniqueInput | ReclassificationRequestWhereUniqueInput[]
    disconnect?: ReclassificationRequestWhereUniqueInput | ReclassificationRequestWhereUniqueInput[]
    delete?: ReclassificationRequestWhereUniqueInput | ReclassificationRequestWhereUniqueInput[]
    connect?: ReclassificationRequestWhereUniqueInput | ReclassificationRequestWhereUniqueInput[]
    update?: ReclassificationRequestUpdateWithWhereUniqueWithoutSubmittedByUserInput | ReclassificationRequestUpdateWithWhereUniqueWithoutSubmittedByUserInput[]
    updateMany?: ReclassificationRequestUpdateManyWithWhereWithoutSubmittedByUserInput | ReclassificationRequestUpdateManyWithWhereWithoutSubmittedByUserInput[]
    deleteMany?: ReclassificationRequestScalarWhereInput | ReclassificationRequestScalarWhereInput[]
  }

  export type UserSettingUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserSettingCreateWithoutUserInput, UserSettingUncheckedCreateWithoutUserInput> | UserSettingCreateWithoutUserInput[] | UserSettingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserSettingCreateOrConnectWithoutUserInput | UserSettingCreateOrConnectWithoutUserInput[]
    upsert?: UserSettingUpsertWithWhereUniqueWithoutUserInput | UserSettingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserSettingCreateManyUserInputEnvelope
    set?: UserSettingWhereUniqueInput | UserSettingWhereUniqueInput[]
    disconnect?: UserSettingWhereUniqueInput | UserSettingWhereUniqueInput[]
    delete?: UserSettingWhereUniqueInput | UserSettingWhereUniqueInput[]
    connect?: UserSettingWhereUniqueInput | UserSettingWhereUniqueInput[]
    update?: UserSettingUpdateWithWhereUniqueWithoutUserInput | UserSettingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserSettingUpdateManyWithWhereWithoutUserInput | UserSettingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserSettingScalarWhereInput | UserSettingScalarWhereInput[]
  }

  export type XbrlTagUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<XbrlTagCreateWithoutCreatedByInput, XbrlTagUncheckedCreateWithoutCreatedByInput> | XbrlTagCreateWithoutCreatedByInput[] | XbrlTagUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: XbrlTagCreateOrConnectWithoutCreatedByInput | XbrlTagCreateOrConnectWithoutCreatedByInput[]
    upsert?: XbrlTagUpsertWithWhereUniqueWithoutCreatedByInput | XbrlTagUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: XbrlTagCreateManyCreatedByInputEnvelope
    set?: XbrlTagWhereUniqueInput | XbrlTagWhereUniqueInput[]
    disconnect?: XbrlTagWhereUniqueInput | XbrlTagWhereUniqueInput[]
    delete?: XbrlTagWhereUniqueInput | XbrlTagWhereUniqueInput[]
    connect?: XbrlTagWhereUniqueInput | XbrlTagWhereUniqueInput[]
    update?: XbrlTagUpdateWithWhereUniqueWithoutCreatedByInput | XbrlTagUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: XbrlTagUpdateManyWithWhereWithoutCreatedByInput | XbrlTagUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: XbrlTagScalarWhereInput | XbrlTagScalarWhereInput[]
  }

  export type ImportJobUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ImportJobCreateWithoutUserInput, ImportJobUncheckedCreateWithoutUserInput> | ImportJobCreateWithoutUserInput[] | ImportJobUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ImportJobCreateOrConnectWithoutUserInput | ImportJobCreateOrConnectWithoutUserInput[]
    upsert?: ImportJobUpsertWithWhereUniqueWithoutUserInput | ImportJobUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ImportJobCreateManyUserInputEnvelope
    set?: ImportJobWhereUniqueInput | ImportJobWhereUniqueInput[]
    disconnect?: ImportJobWhereUniqueInput | ImportJobWhereUniqueInput[]
    delete?: ImportJobWhereUniqueInput | ImportJobWhereUniqueInput[]
    connect?: ImportJobWhereUniqueInput | ImportJobWhereUniqueInput[]
    update?: ImportJobUpdateWithWhereUniqueWithoutUserInput | ImportJobUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ImportJobUpdateManyWithWhereWithoutUserInput | ImportJobUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ImportJobScalarWhereInput | ImportJobScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutSettingsInput = {
    create?: XOR<UserCreateWithoutSettingsInput, UserUncheckedCreateWithoutSettingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSettingsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSettingsNestedInput = {
    create?: XOR<UserCreateWithoutSettingsInput, UserUncheckedCreateWithoutSettingsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSettingsInput
    upsert?: UserUpsertWithoutSettingsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSettingsInput, UserUpdateWithoutSettingsInput>, UserUncheckedUpdateWithoutSettingsInput>
  }

  export type ACCUCreateNestedManyWithoutEntityInput = {
    create?: XOR<ACCUCreateWithoutEntityInput, ACCUUncheckedCreateWithoutEntityInput> | ACCUCreateWithoutEntityInput[] | ACCUUncheckedCreateWithoutEntityInput[]
    connectOrCreate?: ACCUCreateOrConnectWithoutEntityInput | ACCUCreateOrConnectWithoutEntityInput[]
    createMany?: ACCUCreateManyEntityInputEnvelope
    connect?: ACCUWhereUniqueInput | ACCUWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutEntityInput = {
    create?: XOR<UserCreateWithoutEntityInput, UserUncheckedCreateWithoutEntityInput> | UserCreateWithoutEntityInput[] | UserUncheckedCreateWithoutEntityInput[]
    connectOrCreate?: UserCreateOrConnectWithoutEntityInput | UserCreateOrConnectWithoutEntityInput[]
    createMany?: UserCreateManyEntityInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type LoanCreateNestedManyWithoutEntityInput = {
    create?: XOR<LoanCreateWithoutEntityInput, LoanUncheckedCreateWithoutEntityInput> | LoanCreateWithoutEntityInput[] | LoanUncheckedCreateWithoutEntityInput[]
    connectOrCreate?: LoanCreateOrConnectWithoutEntityInput | LoanCreateOrConnectWithoutEntityInput[]
    createMany?: LoanCreateManyEntityInputEnvelope
    connect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
  }

  export type ACCUUncheckedCreateNestedManyWithoutEntityInput = {
    create?: XOR<ACCUCreateWithoutEntityInput, ACCUUncheckedCreateWithoutEntityInput> | ACCUCreateWithoutEntityInput[] | ACCUUncheckedCreateWithoutEntityInput[]
    connectOrCreate?: ACCUCreateOrConnectWithoutEntityInput | ACCUCreateOrConnectWithoutEntityInput[]
    createMany?: ACCUCreateManyEntityInputEnvelope
    connect?: ACCUWhereUniqueInput | ACCUWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutEntityInput = {
    create?: XOR<UserCreateWithoutEntityInput, UserUncheckedCreateWithoutEntityInput> | UserCreateWithoutEntityInput[] | UserUncheckedCreateWithoutEntityInput[]
    connectOrCreate?: UserCreateOrConnectWithoutEntityInput | UserCreateOrConnectWithoutEntityInput[]
    createMany?: UserCreateManyEntityInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type LoanUncheckedCreateNestedManyWithoutEntityInput = {
    create?: XOR<LoanCreateWithoutEntityInput, LoanUncheckedCreateWithoutEntityInput> | LoanCreateWithoutEntityInput[] | LoanUncheckedCreateWithoutEntityInput[]
    connectOrCreate?: LoanCreateOrConnectWithoutEntityInput | LoanCreateOrConnectWithoutEntityInput[]
    createMany?: LoanCreateManyEntityInputEnvelope
    connect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
  }

  export type ACCUUpdateManyWithoutEntityNestedInput = {
    create?: XOR<ACCUCreateWithoutEntityInput, ACCUUncheckedCreateWithoutEntityInput> | ACCUCreateWithoutEntityInput[] | ACCUUncheckedCreateWithoutEntityInput[]
    connectOrCreate?: ACCUCreateOrConnectWithoutEntityInput | ACCUCreateOrConnectWithoutEntityInput[]
    upsert?: ACCUUpsertWithWhereUniqueWithoutEntityInput | ACCUUpsertWithWhereUniqueWithoutEntityInput[]
    createMany?: ACCUCreateManyEntityInputEnvelope
    set?: ACCUWhereUniqueInput | ACCUWhereUniqueInput[]
    disconnect?: ACCUWhereUniqueInput | ACCUWhereUniqueInput[]
    delete?: ACCUWhereUniqueInput | ACCUWhereUniqueInput[]
    connect?: ACCUWhereUniqueInput | ACCUWhereUniqueInput[]
    update?: ACCUUpdateWithWhereUniqueWithoutEntityInput | ACCUUpdateWithWhereUniqueWithoutEntityInput[]
    updateMany?: ACCUUpdateManyWithWhereWithoutEntityInput | ACCUUpdateManyWithWhereWithoutEntityInput[]
    deleteMany?: ACCUScalarWhereInput | ACCUScalarWhereInput[]
  }

  export type UserUpdateManyWithoutEntityNestedInput = {
    create?: XOR<UserCreateWithoutEntityInput, UserUncheckedCreateWithoutEntityInput> | UserCreateWithoutEntityInput[] | UserUncheckedCreateWithoutEntityInput[]
    connectOrCreate?: UserCreateOrConnectWithoutEntityInput | UserCreateOrConnectWithoutEntityInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutEntityInput | UserUpsertWithWhereUniqueWithoutEntityInput[]
    createMany?: UserCreateManyEntityInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutEntityInput | UserUpdateWithWhereUniqueWithoutEntityInput[]
    updateMany?: UserUpdateManyWithWhereWithoutEntityInput | UserUpdateManyWithWhereWithoutEntityInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type LoanUpdateManyWithoutEntityNestedInput = {
    create?: XOR<LoanCreateWithoutEntityInput, LoanUncheckedCreateWithoutEntityInput> | LoanCreateWithoutEntityInput[] | LoanUncheckedCreateWithoutEntityInput[]
    connectOrCreate?: LoanCreateOrConnectWithoutEntityInput | LoanCreateOrConnectWithoutEntityInput[]
    upsert?: LoanUpsertWithWhereUniqueWithoutEntityInput | LoanUpsertWithWhereUniqueWithoutEntityInput[]
    createMany?: LoanCreateManyEntityInputEnvelope
    set?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    disconnect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    delete?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    connect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    update?: LoanUpdateWithWhereUniqueWithoutEntityInput | LoanUpdateWithWhereUniqueWithoutEntityInput[]
    updateMany?: LoanUpdateManyWithWhereWithoutEntityInput | LoanUpdateManyWithWhereWithoutEntityInput[]
    deleteMany?: LoanScalarWhereInput | LoanScalarWhereInput[]
  }

  export type ACCUUncheckedUpdateManyWithoutEntityNestedInput = {
    create?: XOR<ACCUCreateWithoutEntityInput, ACCUUncheckedCreateWithoutEntityInput> | ACCUCreateWithoutEntityInput[] | ACCUUncheckedCreateWithoutEntityInput[]
    connectOrCreate?: ACCUCreateOrConnectWithoutEntityInput | ACCUCreateOrConnectWithoutEntityInput[]
    upsert?: ACCUUpsertWithWhereUniqueWithoutEntityInput | ACCUUpsertWithWhereUniqueWithoutEntityInput[]
    createMany?: ACCUCreateManyEntityInputEnvelope
    set?: ACCUWhereUniqueInput | ACCUWhereUniqueInput[]
    disconnect?: ACCUWhereUniqueInput | ACCUWhereUniqueInput[]
    delete?: ACCUWhereUniqueInput | ACCUWhereUniqueInput[]
    connect?: ACCUWhereUniqueInput | ACCUWhereUniqueInput[]
    update?: ACCUUpdateWithWhereUniqueWithoutEntityInput | ACCUUpdateWithWhereUniqueWithoutEntityInput[]
    updateMany?: ACCUUpdateManyWithWhereWithoutEntityInput | ACCUUpdateManyWithWhereWithoutEntityInput[]
    deleteMany?: ACCUScalarWhereInput | ACCUScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutEntityNestedInput = {
    create?: XOR<UserCreateWithoutEntityInput, UserUncheckedCreateWithoutEntityInput> | UserCreateWithoutEntityInput[] | UserUncheckedCreateWithoutEntityInput[]
    connectOrCreate?: UserCreateOrConnectWithoutEntityInput | UserCreateOrConnectWithoutEntityInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutEntityInput | UserUpsertWithWhereUniqueWithoutEntityInput[]
    createMany?: UserCreateManyEntityInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutEntityInput | UserUpdateWithWhereUniqueWithoutEntityInput[]
    updateMany?: UserUpdateManyWithWhereWithoutEntityInput | UserUpdateManyWithWhereWithoutEntityInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type LoanUncheckedUpdateManyWithoutEntityNestedInput = {
    create?: XOR<LoanCreateWithoutEntityInput, LoanUncheckedCreateWithoutEntityInput> | LoanCreateWithoutEntityInput[] | LoanUncheckedCreateWithoutEntityInput[]
    connectOrCreate?: LoanCreateOrConnectWithoutEntityInput | LoanCreateOrConnectWithoutEntityInput[]
    upsert?: LoanUpsertWithWhereUniqueWithoutEntityInput | LoanUpsertWithWhereUniqueWithoutEntityInput[]
    createMany?: LoanCreateManyEntityInputEnvelope
    set?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    disconnect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    delete?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    connect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    update?: LoanUpdateWithWhereUniqueWithoutEntityInput | LoanUpdateWithWhereUniqueWithoutEntityInput[]
    updateMany?: LoanUpdateManyWithWhereWithoutEntityInput | LoanUpdateManyWithWhereWithoutEntityInput[]
    deleteMany?: LoanScalarWhereInput | LoanScalarWhereInput[]
  }

  export type ACCUCreateNestedOneWithoutLoansInput = {
    create?: XOR<ACCUCreateWithoutLoansInput, ACCUUncheckedCreateWithoutLoansInput>
    connectOrCreate?: ACCUCreateOrConnectWithoutLoansInput
    connect?: ACCUWhereUniqueInput
  }

  export type CreditorCreateNestedOneWithoutLoansInput = {
    create?: XOR<CreditorCreateWithoutLoansInput, CreditorUncheckedCreateWithoutLoansInput>
    connectOrCreate?: CreditorCreateOrConnectWithoutLoansInput
    connect?: CreditorWhereUniqueInput
  }

  export type EntityCreateNestedOneWithoutLoansInput = {
    create?: XOR<EntityCreateWithoutLoansInput, EntityUncheckedCreateWithoutLoansInput>
    connectOrCreate?: EntityCreateOrConnectWithoutLoansInput
    connect?: EntityWhereUniqueInput
  }

  export type EnumLoanStatusFieldUpdateOperationsInput = {
    set?: $Enums.LoanStatus
  }

  export type ACCUUpdateOneRequiredWithoutLoansNestedInput = {
    create?: XOR<ACCUCreateWithoutLoansInput, ACCUUncheckedCreateWithoutLoansInput>
    connectOrCreate?: ACCUCreateOrConnectWithoutLoansInput
    upsert?: ACCUUpsertWithoutLoansInput
    connect?: ACCUWhereUniqueInput
    update?: XOR<XOR<ACCUUpdateToOneWithWhereWithoutLoansInput, ACCUUpdateWithoutLoansInput>, ACCUUncheckedUpdateWithoutLoansInput>
  }

  export type CreditorUpdateOneRequiredWithoutLoansNestedInput = {
    create?: XOR<CreditorCreateWithoutLoansInput, CreditorUncheckedCreateWithoutLoansInput>
    connectOrCreate?: CreditorCreateOrConnectWithoutLoansInput
    upsert?: CreditorUpsertWithoutLoansInput
    connect?: CreditorWhereUniqueInput
    update?: XOR<XOR<CreditorUpdateToOneWithWhereWithoutLoansInput, CreditorUpdateWithoutLoansInput>, CreditorUncheckedUpdateWithoutLoansInput>
  }

  export type EntityUpdateOneRequiredWithoutLoansNestedInput = {
    create?: XOR<EntityCreateWithoutLoansInput, EntityUncheckedCreateWithoutLoansInput>
    connectOrCreate?: EntityCreateOrConnectWithoutLoansInput
    upsert?: EntityUpsertWithoutLoansInput
    connect?: EntityWhereUniqueInput
    update?: XOR<XOR<EntityUpdateToOneWithWhereWithoutLoansInput, EntityUpdateWithoutLoansInput>, EntityUncheckedUpdateWithoutLoansInput>
  }

  export type LoanCreateNestedManyWithoutCreditorInput = {
    create?: XOR<LoanCreateWithoutCreditorInput, LoanUncheckedCreateWithoutCreditorInput> | LoanCreateWithoutCreditorInput[] | LoanUncheckedCreateWithoutCreditorInput[]
    connectOrCreate?: LoanCreateOrConnectWithoutCreditorInput | LoanCreateOrConnectWithoutCreditorInput[]
    createMany?: LoanCreateManyCreditorInputEnvelope
    connect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
  }

  export type LoanUncheckedCreateNestedManyWithoutCreditorInput = {
    create?: XOR<LoanCreateWithoutCreditorInput, LoanUncheckedCreateWithoutCreditorInput> | LoanCreateWithoutCreditorInput[] | LoanUncheckedCreateWithoutCreditorInput[]
    connectOrCreate?: LoanCreateOrConnectWithoutCreditorInput | LoanCreateOrConnectWithoutCreditorInput[]
    createMany?: LoanCreateManyCreditorInputEnvelope
    connect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
  }

  export type LoanUpdateManyWithoutCreditorNestedInput = {
    create?: XOR<LoanCreateWithoutCreditorInput, LoanUncheckedCreateWithoutCreditorInput> | LoanCreateWithoutCreditorInput[] | LoanUncheckedCreateWithoutCreditorInput[]
    connectOrCreate?: LoanCreateOrConnectWithoutCreditorInput | LoanCreateOrConnectWithoutCreditorInput[]
    upsert?: LoanUpsertWithWhereUniqueWithoutCreditorInput | LoanUpsertWithWhereUniqueWithoutCreditorInput[]
    createMany?: LoanCreateManyCreditorInputEnvelope
    set?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    disconnect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    delete?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    connect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    update?: LoanUpdateWithWhereUniqueWithoutCreditorInput | LoanUpdateWithWhereUniqueWithoutCreditorInput[]
    updateMany?: LoanUpdateManyWithWhereWithoutCreditorInput | LoanUpdateManyWithWhereWithoutCreditorInput[]
    deleteMany?: LoanScalarWhereInput | LoanScalarWhereInput[]
  }

  export type LoanUncheckedUpdateManyWithoutCreditorNestedInput = {
    create?: XOR<LoanCreateWithoutCreditorInput, LoanUncheckedCreateWithoutCreditorInput> | LoanCreateWithoutCreditorInput[] | LoanUncheckedCreateWithoutCreditorInput[]
    connectOrCreate?: LoanCreateOrConnectWithoutCreditorInput | LoanCreateOrConnectWithoutCreditorInput[]
    upsert?: LoanUpsertWithWhereUniqueWithoutCreditorInput | LoanUpsertWithWhereUniqueWithoutCreditorInput[]
    createMany?: LoanCreateManyCreditorInputEnvelope
    set?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    disconnect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    delete?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    connect?: LoanWhereUniqueInput | LoanWhereUniqueInput[]
    update?: LoanUpdateWithWhereUniqueWithoutCreditorInput | LoanUpdateWithWhereUniqueWithoutCreditorInput[]
    updateMany?: LoanUpdateManyWithWhereWithoutCreditorInput | LoanUpdateManyWithWhereWithoutCreditorInput[]
    deleteMany?: LoanScalarWhereInput | LoanScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutImportJobsInput = {
    create?: XOR<UserCreateWithoutImportJobsInput, UserUncheckedCreateWithoutImportJobsInput>
    connectOrCreate?: UserCreateOrConnectWithoutImportJobsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutImportJobsNestedInput = {
    create?: XOR<UserCreateWithoutImportJobsInput, UserUncheckedCreateWithoutImportJobsInput>
    connectOrCreate?: UserCreateOrConnectWithoutImportJobsInput
    upsert?: UserUpsertWithoutImportJobsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutImportJobsInput, UserUpdateWithoutImportJobsInput>, UserUncheckedUpdateWithoutImportJobsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumClassificationFilter<$PrismaModel = never> = {
    equals?: $Enums.Classification | EnumClassificationFieldRefInput<$PrismaModel>
    in?: $Enums.Classification[]
    notIn?: $Enums.Classification[]
    not?: NestedEnumClassificationFilter<$PrismaModel> | $Enums.Classification
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumClassificationWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Classification | EnumClassificationFieldRefInput<$PrismaModel>
    in?: $Enums.Classification[]
    notIn?: $Enums.Classification[]
    not?: NestedEnumClassificationWithAggregatesFilter<$PrismaModel> | $Enums.Classification
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumClassificationFilter<$PrismaModel>
    _max?: NestedEnumClassificationFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumReclassificationStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ReclassificationStatus | EnumReclassificationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReclassificationStatus[]
    notIn?: $Enums.ReclassificationStatus[]
    not?: NestedEnumReclassificationStatusFilter<$PrismaModel> | $Enums.ReclassificationStatus
  }

  export type NestedEnumReclassificationStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReclassificationStatus | EnumReclassificationStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ReclassificationStatus[]
    notIn?: $Enums.ReclassificationStatus[]
    not?: NestedEnumReclassificationStatusWithAggregatesFilter<$PrismaModel> | $Enums.ReclassificationStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReclassificationStatusFilter<$PrismaModel>
    _max?: NestedEnumReclassificationStatusFilter<$PrismaModel>
  }

  export type NestedEnumLoanStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.LoanStatus | EnumLoanStatusFieldRefInput<$PrismaModel>
    in?: $Enums.LoanStatus[]
    notIn?: $Enums.LoanStatus[]
    not?: NestedEnumLoanStatusFilter<$PrismaModel> | $Enums.LoanStatus
  }

  export type NestedEnumLoanStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.LoanStatus | EnumLoanStatusFieldRefInput<$PrismaModel>
    in?: $Enums.LoanStatus[]
    notIn?: $Enums.LoanStatus[]
    not?: NestedEnumLoanStatusWithAggregatesFilter<$PrismaModel> | $Enums.LoanStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumLoanStatusFilter<$PrismaModel>
    _max?: NestedEnumLoanStatusFilter<$PrismaModel>
  }

  export type ValuationLogCreateWithoutBatchInput = {
    id?: string
    date: Date | string
    marketPrice: number
    nrv: number
    impairment?: number | null
    createdAt?: Date | string
    entityId: string
    createdBy: UserCreateNestedOneWithoutValuationLogsInput
  }

  export type ValuationLogUncheckedCreateWithoutBatchInput = {
    id?: string
    date: Date | string
    marketPrice: number
    nrv: number
    impairment?: number | null
    userId: string
    createdAt?: Date | string
    entityId: string
  }

  export type ValuationLogCreateOrConnectWithoutBatchInput = {
    where: ValuationLogWhereUniqueInput
    create: XOR<ValuationLogCreateWithoutBatchInput, ValuationLogUncheckedCreateWithoutBatchInput>
  }

  export type ValuationLogCreateManyBatchInputEnvelope = {
    data: ValuationLogCreateManyBatchInput | ValuationLogCreateManyBatchInput[]
  }

  export type ReclassificationRequestCreateWithoutBatchInput = {
    id?: string
    fromClass: $Enums.Classification
    toClass: $Enums.Classification
    reason?: string | null
    status?: $Enums.ReclassificationStatus
    approvedBy?: string | null
    timestamp?: Date | string
    approvedAt?: Date | string | null
    entityId: string
    submittedByUser: UserCreateNestedOneWithoutReclassRequestsInput
  }

  export type ReclassificationRequestUncheckedCreateWithoutBatchInput = {
    id?: string
    fromClass: $Enums.Classification
    toClass: $Enums.Classification
    reason?: string | null
    status?: $Enums.ReclassificationStatus
    submittedBy: string
    approvedBy?: string | null
    timestamp?: Date | string
    approvedAt?: Date | string | null
    entityId: string
  }

  export type ReclassificationRequestCreateOrConnectWithoutBatchInput = {
    where: ReclassificationRequestWhereUniqueInput
    create: XOR<ReclassificationRequestCreateWithoutBatchInput, ReclassificationRequestUncheckedCreateWithoutBatchInput>
  }

  export type ReclassificationRequestCreateManyBatchInputEnvelope = {
    data: ReclassificationRequestCreateManyBatchInput | ReclassificationRequestCreateManyBatchInput[]
  }

  export type LoanCreateWithoutBatchInput = {
    id?: string
    quantity: number
    loanAmount: number
    buybackRate?: number | null
    buybackDate?: Date | string | null
    loanStatus?: $Enums.LoanStatus
    collateralValue?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    creditor: CreditorCreateNestedOneWithoutLoansInput
    entity: EntityCreateNestedOneWithoutLoansInput
  }

  export type LoanUncheckedCreateWithoutBatchInput = {
    id?: string
    creditorId: string
    quantity: number
    loanAmount: number
    buybackRate?: number | null
    buybackDate?: Date | string | null
    loanStatus?: $Enums.LoanStatus
    collateralValue?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    entityId: string
  }

  export type LoanCreateOrConnectWithoutBatchInput = {
    where: LoanWhereUniqueInput
    create: XOR<LoanCreateWithoutBatchInput, LoanUncheckedCreateWithoutBatchInput>
  }

  export type LoanCreateManyBatchInputEnvelope = {
    data: LoanCreateManyBatchInput | LoanCreateManyBatchInput[]
  }

  export type AuditLogEntryCreateWithoutBatchInput = {
    id?: string
    action: string
    tableName: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
    ipAddress?: string | null
    entityId: string
    user?: UserCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogEntryUncheckedCreateWithoutBatchInput = {
    id?: string
    action: string
    tableName: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    userId: string
    timestamp?: Date | string
    ipAddress?: string | null
    entityId: string
  }

  export type AuditLogEntryCreateOrConnectWithoutBatchInput = {
    where: AuditLogEntryWhereUniqueInput
    create: XOR<AuditLogEntryCreateWithoutBatchInput, AuditLogEntryUncheckedCreateWithoutBatchInput>
  }

  export type AuditLogEntryCreateManyBatchInputEnvelope = {
    data: AuditLogEntryCreateManyBatchInput | AuditLogEntryCreateManyBatchInput[]
  }

  export type UserCreateWithoutBatchesInput = {
    id?: string
    email: string
    roles: string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    valuationLogs?: ValuationLogCreateNestedManyWithoutCreatedByInput
    auditLogs?: AuditLogEntryCreateNestedManyWithoutUserInput
    journalEntries?: JournalEntryCreateNestedManyWithoutCreatedByInput
    reclassRequests?: ReclassificationRequestCreateNestedManyWithoutSubmittedByUserInput
    settings?: UserSettingCreateNestedManyWithoutUserInput
    xbrlTags?: XbrlTagCreateNestedManyWithoutCreatedByInput
    importJobs?: ImportJobCreateNestedManyWithoutUserInput
    entity?: EntityCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutBatchesInput = {
    id?: string
    email: string
    roles: string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    entityId?: string | null
    valuationLogs?: ValuationLogUncheckedCreateNestedManyWithoutCreatedByInput
    auditLogs?: AuditLogEntryUncheckedCreateNestedManyWithoutUserInput
    journalEntries?: JournalEntryUncheckedCreateNestedManyWithoutCreatedByInput
    reclassRequests?: ReclassificationRequestUncheckedCreateNestedManyWithoutSubmittedByUserInput
    settings?: UserSettingUncheckedCreateNestedManyWithoutUserInput
    xbrlTags?: XbrlTagUncheckedCreateNestedManyWithoutCreatedByInput
    importJobs?: ImportJobUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBatchesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBatchesInput, UserUncheckedCreateWithoutBatchesInput>
  }

  export type EntityCreateWithoutBatchesInput = {
    id?: string
    name: string
    legalName?: string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    parentId?: string | null
    users?: UserCreateNestedManyWithoutEntityInput
    loans?: LoanCreateNestedManyWithoutEntityInput
  }

  export type EntityUncheckedCreateWithoutBatchesInput = {
    id?: string
    name: string
    legalName?: string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    parentId?: string | null
    users?: UserUncheckedCreateNestedManyWithoutEntityInput
    loans?: LoanUncheckedCreateNestedManyWithoutEntityInput
  }

  export type EntityCreateOrConnectWithoutBatchesInput = {
    where: EntityWhereUniqueInput
    create: XOR<EntityCreateWithoutBatchesInput, EntityUncheckedCreateWithoutBatchesInput>
  }

  export type ProjectCreateWithoutAccusInput = {
    id?: string
    name: string
    methodType: string
    method: string
  }

  export type ProjectUncheckedCreateWithoutAccusInput = {
    id?: string
    name: string
    methodType: string
    method: string
  }

  export type ProjectCreateOrConnectWithoutAccusInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutAccusInput, ProjectUncheckedCreateWithoutAccusInput>
  }

  export type ValuationLogUpsertWithWhereUniqueWithoutBatchInput = {
    where: ValuationLogWhereUniqueInput
    update: XOR<ValuationLogUpdateWithoutBatchInput, ValuationLogUncheckedUpdateWithoutBatchInput>
    create: XOR<ValuationLogCreateWithoutBatchInput, ValuationLogUncheckedCreateWithoutBatchInput>
  }

  export type ValuationLogUpdateWithWhereUniqueWithoutBatchInput = {
    where: ValuationLogWhereUniqueInput
    data: XOR<ValuationLogUpdateWithoutBatchInput, ValuationLogUncheckedUpdateWithoutBatchInput>
  }

  export type ValuationLogUpdateManyWithWhereWithoutBatchInput = {
    where: ValuationLogScalarWhereInput
    data: XOR<ValuationLogUpdateManyMutationInput, ValuationLogUncheckedUpdateManyWithoutBatchInput>
  }

  export type ValuationLogScalarWhereInput = {
    AND?: ValuationLogScalarWhereInput | ValuationLogScalarWhereInput[]
    OR?: ValuationLogScalarWhereInput[]
    NOT?: ValuationLogScalarWhereInput | ValuationLogScalarWhereInput[]
    id?: StringFilter<"ValuationLog"> | string
    batchId?: StringFilter<"ValuationLog"> | string
    date?: DateTimeFilter<"ValuationLog"> | Date | string
    marketPrice?: FloatFilter<"ValuationLog"> | number
    nrv?: FloatFilter<"ValuationLog"> | number
    impairment?: FloatNullableFilter<"ValuationLog"> | number | null
    userId?: StringFilter<"ValuationLog"> | string
    createdAt?: DateTimeFilter<"ValuationLog"> | Date | string
    entityId?: StringFilter<"ValuationLog"> | string
  }

  export type ReclassificationRequestUpsertWithWhereUniqueWithoutBatchInput = {
    where: ReclassificationRequestWhereUniqueInput
    update: XOR<ReclassificationRequestUpdateWithoutBatchInput, ReclassificationRequestUncheckedUpdateWithoutBatchInput>
    create: XOR<ReclassificationRequestCreateWithoutBatchInput, ReclassificationRequestUncheckedCreateWithoutBatchInput>
  }

  export type ReclassificationRequestUpdateWithWhereUniqueWithoutBatchInput = {
    where: ReclassificationRequestWhereUniqueInput
    data: XOR<ReclassificationRequestUpdateWithoutBatchInput, ReclassificationRequestUncheckedUpdateWithoutBatchInput>
  }

  export type ReclassificationRequestUpdateManyWithWhereWithoutBatchInput = {
    where: ReclassificationRequestScalarWhereInput
    data: XOR<ReclassificationRequestUpdateManyMutationInput, ReclassificationRequestUncheckedUpdateManyWithoutBatchInput>
  }

  export type ReclassificationRequestScalarWhereInput = {
    AND?: ReclassificationRequestScalarWhereInput | ReclassificationRequestScalarWhereInput[]
    OR?: ReclassificationRequestScalarWhereInput[]
    NOT?: ReclassificationRequestScalarWhereInput | ReclassificationRequestScalarWhereInput[]
    id?: StringFilter<"ReclassificationRequest"> | string
    batchId?: StringFilter<"ReclassificationRequest"> | string
    fromClass?: EnumClassificationFilter<"ReclassificationRequest"> | $Enums.Classification
    toClass?: EnumClassificationFilter<"ReclassificationRequest"> | $Enums.Classification
    reason?: StringNullableFilter<"ReclassificationRequest"> | string | null
    status?: EnumReclassificationStatusFilter<"ReclassificationRequest"> | $Enums.ReclassificationStatus
    submittedBy?: StringFilter<"ReclassificationRequest"> | string
    approvedBy?: StringNullableFilter<"ReclassificationRequest"> | string | null
    timestamp?: DateTimeFilter<"ReclassificationRequest"> | Date | string
    approvedAt?: DateTimeNullableFilter<"ReclassificationRequest"> | Date | string | null
    entityId?: StringFilter<"ReclassificationRequest"> | string
  }

  export type LoanUpsertWithWhereUniqueWithoutBatchInput = {
    where: LoanWhereUniqueInput
    update: XOR<LoanUpdateWithoutBatchInput, LoanUncheckedUpdateWithoutBatchInput>
    create: XOR<LoanCreateWithoutBatchInput, LoanUncheckedCreateWithoutBatchInput>
  }

  export type LoanUpdateWithWhereUniqueWithoutBatchInput = {
    where: LoanWhereUniqueInput
    data: XOR<LoanUpdateWithoutBatchInput, LoanUncheckedUpdateWithoutBatchInput>
  }

  export type LoanUpdateManyWithWhereWithoutBatchInput = {
    where: LoanScalarWhereInput
    data: XOR<LoanUpdateManyMutationInput, LoanUncheckedUpdateManyWithoutBatchInput>
  }

  export type LoanScalarWhereInput = {
    AND?: LoanScalarWhereInput | LoanScalarWhereInput[]
    OR?: LoanScalarWhereInput[]
    NOT?: LoanScalarWhereInput | LoanScalarWhereInput[]
    id?: StringFilter<"Loan"> | string
    batchId?: StringFilter<"Loan"> | string
    creditorId?: StringFilter<"Loan"> | string
    quantity?: IntFilter<"Loan"> | number
    loanAmount?: FloatFilter<"Loan"> | number
    buybackRate?: FloatNullableFilter<"Loan"> | number | null
    buybackDate?: DateTimeNullableFilter<"Loan"> | Date | string | null
    loanStatus?: EnumLoanStatusFilter<"Loan"> | $Enums.LoanStatus
    collateralValue?: FloatNullableFilter<"Loan"> | number | null
    createdAt?: DateTimeFilter<"Loan"> | Date | string
    updatedAt?: DateTimeFilter<"Loan"> | Date | string
    entityId?: StringFilter<"Loan"> | string
  }

  export type AuditLogEntryUpsertWithWhereUniqueWithoutBatchInput = {
    where: AuditLogEntryWhereUniqueInput
    update: XOR<AuditLogEntryUpdateWithoutBatchInput, AuditLogEntryUncheckedUpdateWithoutBatchInput>
    create: XOR<AuditLogEntryCreateWithoutBatchInput, AuditLogEntryUncheckedCreateWithoutBatchInput>
  }

  export type AuditLogEntryUpdateWithWhereUniqueWithoutBatchInput = {
    where: AuditLogEntryWhereUniqueInput
    data: XOR<AuditLogEntryUpdateWithoutBatchInput, AuditLogEntryUncheckedUpdateWithoutBatchInput>
  }

  export type AuditLogEntryUpdateManyWithWhereWithoutBatchInput = {
    where: AuditLogEntryScalarWhereInput
    data: XOR<AuditLogEntryUpdateManyMutationInput, AuditLogEntryUncheckedUpdateManyWithoutBatchInput>
  }

  export type AuditLogEntryScalarWhereInput = {
    AND?: AuditLogEntryScalarWhereInput | AuditLogEntryScalarWhereInput[]
    OR?: AuditLogEntryScalarWhereInput[]
    NOT?: AuditLogEntryScalarWhereInput | AuditLogEntryScalarWhereInput[]
    id?: StringFilter<"AuditLogEntry"> | string
    action?: StringFilter<"AuditLogEntry"> | string
    tableName?: StringFilter<"AuditLogEntry"> | string
    recordId?: StringFilter<"AuditLogEntry"> | string
    oldValues?: JsonNullableFilter<"AuditLogEntry">
    newValues?: JsonNullableFilter<"AuditLogEntry">
    userId?: StringFilter<"AuditLogEntry"> | string
    timestamp?: DateTimeFilter<"AuditLogEntry"> | Date | string
    ipAddress?: StringNullableFilter<"AuditLogEntry"> | string | null
    entityId?: StringFilter<"AuditLogEntry"> | string
  }

  export type UserUpsertWithoutBatchesInput = {
    update: XOR<UserUpdateWithoutBatchesInput, UserUncheckedUpdateWithoutBatchesInput>
    create: XOR<UserCreateWithoutBatchesInput, UserUncheckedCreateWithoutBatchesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBatchesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBatchesInput, UserUncheckedUpdateWithoutBatchesInput>
  }

  export type UserUpdateWithoutBatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    roles?: StringFieldUpdateOperationsInput | string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    valuationLogs?: ValuationLogUpdateManyWithoutCreatedByNestedInput
    auditLogs?: AuditLogEntryUpdateManyWithoutUserNestedInput
    journalEntries?: JournalEntryUpdateManyWithoutCreatedByNestedInput
    reclassRequests?: ReclassificationRequestUpdateManyWithoutSubmittedByUserNestedInput
    settings?: UserSettingUpdateManyWithoutUserNestedInput
    xbrlTags?: XbrlTagUpdateManyWithoutCreatedByNestedInput
    importJobs?: ImportJobUpdateManyWithoutUserNestedInput
    entity?: EntityUpdateOneWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutBatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    roles?: StringFieldUpdateOperationsInput | string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    valuationLogs?: ValuationLogUncheckedUpdateManyWithoutCreatedByNestedInput
    auditLogs?: AuditLogEntryUncheckedUpdateManyWithoutUserNestedInput
    journalEntries?: JournalEntryUncheckedUpdateManyWithoutCreatedByNestedInput
    reclassRequests?: ReclassificationRequestUncheckedUpdateManyWithoutSubmittedByUserNestedInput
    settings?: UserSettingUncheckedUpdateManyWithoutUserNestedInput
    xbrlTags?: XbrlTagUncheckedUpdateManyWithoutCreatedByNestedInput
    importJobs?: ImportJobUncheckedUpdateManyWithoutUserNestedInput
  }

  export type EntityUpsertWithoutBatchesInput = {
    update: XOR<EntityUpdateWithoutBatchesInput, EntityUncheckedUpdateWithoutBatchesInput>
    create: XOR<EntityCreateWithoutBatchesInput, EntityUncheckedCreateWithoutBatchesInput>
    where?: EntityWhereInput
  }

  export type EntityUpdateToOneWithWhereWithoutBatchesInput = {
    where?: EntityWhereInput
    data: XOR<EntityUpdateWithoutBatchesInput, EntityUncheckedUpdateWithoutBatchesInput>
  }

  export type EntityUpdateWithoutBatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    legalName?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUpdateManyWithoutEntityNestedInput
    loans?: LoanUpdateManyWithoutEntityNestedInput
  }

  export type EntityUncheckedUpdateWithoutBatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    legalName?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutEntityNestedInput
    loans?: LoanUncheckedUpdateManyWithoutEntityNestedInput
  }

  export type ProjectUpsertWithoutAccusInput = {
    update: XOR<ProjectUpdateWithoutAccusInput, ProjectUncheckedUpdateWithoutAccusInput>
    create: XOR<ProjectCreateWithoutAccusInput, ProjectUncheckedCreateWithoutAccusInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutAccusInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutAccusInput, ProjectUncheckedUpdateWithoutAccusInput>
  }

  export type ProjectUpdateWithoutAccusInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    methodType?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectUncheckedUpdateWithoutAccusInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    methodType?: StringFieldUpdateOperationsInput | string
    method?: StringFieldUpdateOperationsInput | string
  }

  export type ACCUCreateWithoutProjectInput = {
    id?: string
    vintage: number
    location: string
    issuanceDate: Date | string
    serialRangeStart: string
    serialRangeEnd: string
    category: string
    quantity: number
    acquisitionCost: number
    classification: $Enums.Classification
    acquisitionDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    loanStatus?: boolean
    loanDetails?: NullableJsonNullValueInput | InputJsonValue
    valuationLogs?: ValuationLogCreateNestedManyWithoutBatchInput
    reclassificationRequests?: ReclassificationRequestCreateNestedManyWithoutBatchInput
    loans?: LoanCreateNestedManyWithoutBatchInput
    auditLogEntries?: AuditLogEntryCreateNestedManyWithoutBatchInput
    createdBy?: UserCreateNestedOneWithoutBatchesInput
    entity: EntityCreateNestedOneWithoutBatchesInput
  }

  export type ACCUUncheckedCreateWithoutProjectInput = {
    id?: string
    vintage: number
    location: string
    issuanceDate: Date | string
    serialRangeStart: string
    serialRangeEnd: string
    category: string
    quantity: number
    acquisitionCost: number
    classification: $Enums.Classification
    acquisitionDate: Date | string
    entityId: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    loanStatus?: boolean
    loanDetails?: NullableJsonNullValueInput | InputJsonValue
    valuationLogs?: ValuationLogUncheckedCreateNestedManyWithoutBatchInput
    reclassificationRequests?: ReclassificationRequestUncheckedCreateNestedManyWithoutBatchInput
    loans?: LoanUncheckedCreateNestedManyWithoutBatchInput
    auditLogEntries?: AuditLogEntryUncheckedCreateNestedManyWithoutBatchInput
  }

  export type ACCUCreateOrConnectWithoutProjectInput = {
    where: ACCUWhereUniqueInput
    create: XOR<ACCUCreateWithoutProjectInput, ACCUUncheckedCreateWithoutProjectInput>
  }

  export type ACCUCreateManyProjectInputEnvelope = {
    data: ACCUCreateManyProjectInput | ACCUCreateManyProjectInput[]
  }

  export type ACCUUpsertWithWhereUniqueWithoutProjectInput = {
    where: ACCUWhereUniqueInput
    update: XOR<ACCUUpdateWithoutProjectInput, ACCUUncheckedUpdateWithoutProjectInput>
    create: XOR<ACCUCreateWithoutProjectInput, ACCUUncheckedCreateWithoutProjectInput>
  }

  export type ACCUUpdateWithWhereUniqueWithoutProjectInput = {
    where: ACCUWhereUniqueInput
    data: XOR<ACCUUpdateWithoutProjectInput, ACCUUncheckedUpdateWithoutProjectInput>
  }

  export type ACCUUpdateManyWithWhereWithoutProjectInput = {
    where: ACCUScalarWhereInput
    data: XOR<ACCUUpdateManyMutationInput, ACCUUncheckedUpdateManyWithoutProjectInput>
  }

  export type ACCUScalarWhereInput = {
    AND?: ACCUScalarWhereInput | ACCUScalarWhereInput[]
    OR?: ACCUScalarWhereInput[]
    NOT?: ACCUScalarWhereInput | ACCUScalarWhereInput[]
    id?: StringFilter<"ACCU"> | string
    projectId?: StringFilter<"ACCU"> | string
    vintage?: IntFilter<"ACCU"> | number
    location?: StringFilter<"ACCU"> | string
    issuanceDate?: DateTimeFilter<"ACCU"> | Date | string
    serialRangeStart?: StringFilter<"ACCU"> | string
    serialRangeEnd?: StringFilter<"ACCU"> | string
    category?: StringFilter<"ACCU"> | string
    quantity?: IntFilter<"ACCU"> | number
    acquisitionCost?: FloatFilter<"ACCU"> | number
    classification?: EnumClassificationFilter<"ACCU"> | $Enums.Classification
    acquisitionDate?: DateTimeFilter<"ACCU"> | Date | string
    entityId?: StringFilter<"ACCU"> | string
    userId?: StringFilter<"ACCU"> | string
    createdAt?: DateTimeFilter<"ACCU"> | Date | string
    updatedAt?: DateTimeFilter<"ACCU"> | Date | string
    status?: StringFilter<"ACCU"> | string
    loanStatus?: BoolFilter<"ACCU"> | boolean
    loanDetails?: JsonNullableFilter<"ACCU">
  }

  export type ACCUCreateWithoutValuationLogsInput = {
    id?: string
    vintage: number
    location: string
    issuanceDate: Date | string
    serialRangeStart: string
    serialRangeEnd: string
    category: string
    quantity: number
    acquisitionCost: number
    classification: $Enums.Classification
    acquisitionDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    loanStatus?: boolean
    loanDetails?: NullableJsonNullValueInput | InputJsonValue
    reclassificationRequests?: ReclassificationRequestCreateNestedManyWithoutBatchInput
    loans?: LoanCreateNestedManyWithoutBatchInput
    auditLogEntries?: AuditLogEntryCreateNestedManyWithoutBatchInput
    createdBy?: UserCreateNestedOneWithoutBatchesInput
    entity: EntityCreateNestedOneWithoutBatchesInput
    project: ProjectCreateNestedOneWithoutAccusInput
  }

  export type ACCUUncheckedCreateWithoutValuationLogsInput = {
    id?: string
    projectId: string
    vintage: number
    location: string
    issuanceDate: Date | string
    serialRangeStart: string
    serialRangeEnd: string
    category: string
    quantity: number
    acquisitionCost: number
    classification: $Enums.Classification
    acquisitionDate: Date | string
    entityId: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    loanStatus?: boolean
    loanDetails?: NullableJsonNullValueInput | InputJsonValue
    reclassificationRequests?: ReclassificationRequestUncheckedCreateNestedManyWithoutBatchInput
    loans?: LoanUncheckedCreateNestedManyWithoutBatchInput
    auditLogEntries?: AuditLogEntryUncheckedCreateNestedManyWithoutBatchInput
  }

  export type ACCUCreateOrConnectWithoutValuationLogsInput = {
    where: ACCUWhereUniqueInput
    create: XOR<ACCUCreateWithoutValuationLogsInput, ACCUUncheckedCreateWithoutValuationLogsInput>
  }

  export type UserCreateWithoutValuationLogsInput = {
    id?: string
    email: string
    roles: string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    batches?: ACCUCreateNestedManyWithoutCreatedByInput
    auditLogs?: AuditLogEntryCreateNestedManyWithoutUserInput
    journalEntries?: JournalEntryCreateNestedManyWithoutCreatedByInput
    reclassRequests?: ReclassificationRequestCreateNestedManyWithoutSubmittedByUserInput
    settings?: UserSettingCreateNestedManyWithoutUserInput
    xbrlTags?: XbrlTagCreateNestedManyWithoutCreatedByInput
    importJobs?: ImportJobCreateNestedManyWithoutUserInput
    entity?: EntityCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutValuationLogsInput = {
    id?: string
    email: string
    roles: string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    entityId?: string | null
    batches?: ACCUUncheckedCreateNestedManyWithoutCreatedByInput
    auditLogs?: AuditLogEntryUncheckedCreateNestedManyWithoutUserInput
    journalEntries?: JournalEntryUncheckedCreateNestedManyWithoutCreatedByInput
    reclassRequests?: ReclassificationRequestUncheckedCreateNestedManyWithoutSubmittedByUserInput
    settings?: UserSettingUncheckedCreateNestedManyWithoutUserInput
    xbrlTags?: XbrlTagUncheckedCreateNestedManyWithoutCreatedByInput
    importJobs?: ImportJobUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutValuationLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutValuationLogsInput, UserUncheckedCreateWithoutValuationLogsInput>
  }

  export type ACCUUpsertWithoutValuationLogsInput = {
    update: XOR<ACCUUpdateWithoutValuationLogsInput, ACCUUncheckedUpdateWithoutValuationLogsInput>
    create: XOR<ACCUCreateWithoutValuationLogsInput, ACCUUncheckedCreateWithoutValuationLogsInput>
    where?: ACCUWhereInput
  }

  export type ACCUUpdateToOneWithWhereWithoutValuationLogsInput = {
    where?: ACCUWhereInput
    data: XOR<ACCUUpdateWithoutValuationLogsInput, ACCUUncheckedUpdateWithoutValuationLogsInput>
  }

  export type ACCUUpdateWithoutValuationLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    vintage?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    issuanceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    serialRangeStart?: StringFieldUpdateOperationsInput | string
    serialRangeEnd?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    acquisitionCost?: FloatFieldUpdateOperationsInput | number
    classification?: EnumClassificationFieldUpdateOperationsInput | $Enums.Classification
    acquisitionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    loanStatus?: BoolFieldUpdateOperationsInput | boolean
    loanDetails?: NullableJsonNullValueInput | InputJsonValue
    reclassificationRequests?: ReclassificationRequestUpdateManyWithoutBatchNestedInput
    loans?: LoanUpdateManyWithoutBatchNestedInput
    auditLogEntries?: AuditLogEntryUpdateManyWithoutBatchNestedInput
    createdBy?: UserUpdateOneWithoutBatchesNestedInput
    entity?: EntityUpdateOneRequiredWithoutBatchesNestedInput
    project?: ProjectUpdateOneRequiredWithoutAccusNestedInput
  }

  export type ACCUUncheckedUpdateWithoutValuationLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    vintage?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    issuanceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    serialRangeStart?: StringFieldUpdateOperationsInput | string
    serialRangeEnd?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    acquisitionCost?: FloatFieldUpdateOperationsInput | number
    classification?: EnumClassificationFieldUpdateOperationsInput | $Enums.Classification
    acquisitionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    loanStatus?: BoolFieldUpdateOperationsInput | boolean
    loanDetails?: NullableJsonNullValueInput | InputJsonValue
    reclassificationRequests?: ReclassificationRequestUncheckedUpdateManyWithoutBatchNestedInput
    loans?: LoanUncheckedUpdateManyWithoutBatchNestedInput
    auditLogEntries?: AuditLogEntryUncheckedUpdateManyWithoutBatchNestedInput
  }

  export type UserUpsertWithoutValuationLogsInput = {
    update: XOR<UserUpdateWithoutValuationLogsInput, UserUncheckedUpdateWithoutValuationLogsInput>
    create: XOR<UserCreateWithoutValuationLogsInput, UserUncheckedCreateWithoutValuationLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutValuationLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutValuationLogsInput, UserUncheckedUpdateWithoutValuationLogsInput>
  }

  export type UserUpdateWithoutValuationLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    roles?: StringFieldUpdateOperationsInput | string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    batches?: ACCUUpdateManyWithoutCreatedByNestedInput
    auditLogs?: AuditLogEntryUpdateManyWithoutUserNestedInput
    journalEntries?: JournalEntryUpdateManyWithoutCreatedByNestedInput
    reclassRequests?: ReclassificationRequestUpdateManyWithoutSubmittedByUserNestedInput
    settings?: UserSettingUpdateManyWithoutUserNestedInput
    xbrlTags?: XbrlTagUpdateManyWithoutCreatedByNestedInput
    importJobs?: ImportJobUpdateManyWithoutUserNestedInput
    entity?: EntityUpdateOneWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutValuationLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    roles?: StringFieldUpdateOperationsInput | string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    batches?: ACCUUncheckedUpdateManyWithoutCreatedByNestedInput
    auditLogs?: AuditLogEntryUncheckedUpdateManyWithoutUserNestedInput
    journalEntries?: JournalEntryUncheckedUpdateManyWithoutCreatedByNestedInput
    reclassRequests?: ReclassificationRequestUncheckedUpdateManyWithoutSubmittedByUserNestedInput
    settings?: UserSettingUncheckedUpdateManyWithoutUserNestedInput
    xbrlTags?: XbrlTagUncheckedUpdateManyWithoutCreatedByNestedInput
    importJobs?: ImportJobUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutAuditLogsInput = {
    id?: string
    email: string
    roles: string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    batches?: ACCUCreateNestedManyWithoutCreatedByInput
    valuationLogs?: ValuationLogCreateNestedManyWithoutCreatedByInput
    journalEntries?: JournalEntryCreateNestedManyWithoutCreatedByInput
    reclassRequests?: ReclassificationRequestCreateNestedManyWithoutSubmittedByUserInput
    settings?: UserSettingCreateNestedManyWithoutUserInput
    xbrlTags?: XbrlTagCreateNestedManyWithoutCreatedByInput
    importJobs?: ImportJobCreateNestedManyWithoutUserInput
    entity?: EntityCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutAuditLogsInput = {
    id?: string
    email: string
    roles: string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    entityId?: string | null
    batches?: ACCUUncheckedCreateNestedManyWithoutCreatedByInput
    valuationLogs?: ValuationLogUncheckedCreateNestedManyWithoutCreatedByInput
    journalEntries?: JournalEntryUncheckedCreateNestedManyWithoutCreatedByInput
    reclassRequests?: ReclassificationRequestUncheckedCreateNestedManyWithoutSubmittedByUserInput
    settings?: UserSettingUncheckedCreateNestedManyWithoutUserInput
    xbrlTags?: XbrlTagUncheckedCreateNestedManyWithoutCreatedByInput
    importJobs?: ImportJobUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAuditLogsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
  }

  export type ACCUCreateWithoutAuditLogEntriesInput = {
    id?: string
    vintage: number
    location: string
    issuanceDate: Date | string
    serialRangeStart: string
    serialRangeEnd: string
    category: string
    quantity: number
    acquisitionCost: number
    classification: $Enums.Classification
    acquisitionDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    loanStatus?: boolean
    loanDetails?: NullableJsonNullValueInput | InputJsonValue
    valuationLogs?: ValuationLogCreateNestedManyWithoutBatchInput
    reclassificationRequests?: ReclassificationRequestCreateNestedManyWithoutBatchInput
    loans?: LoanCreateNestedManyWithoutBatchInput
    createdBy?: UserCreateNestedOneWithoutBatchesInput
    entity: EntityCreateNestedOneWithoutBatchesInput
    project: ProjectCreateNestedOneWithoutAccusInput
  }

  export type ACCUUncheckedCreateWithoutAuditLogEntriesInput = {
    id?: string
    projectId: string
    vintage: number
    location: string
    issuanceDate: Date | string
    serialRangeStart: string
    serialRangeEnd: string
    category: string
    quantity: number
    acquisitionCost: number
    classification: $Enums.Classification
    acquisitionDate: Date | string
    entityId: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    loanStatus?: boolean
    loanDetails?: NullableJsonNullValueInput | InputJsonValue
    valuationLogs?: ValuationLogUncheckedCreateNestedManyWithoutBatchInput
    reclassificationRequests?: ReclassificationRequestUncheckedCreateNestedManyWithoutBatchInput
    loans?: LoanUncheckedCreateNestedManyWithoutBatchInput
  }

  export type ACCUCreateOrConnectWithoutAuditLogEntriesInput = {
    where: ACCUWhereUniqueInput
    create: XOR<ACCUCreateWithoutAuditLogEntriesInput, ACCUUncheckedCreateWithoutAuditLogEntriesInput>
  }

  export type UserUpsertWithoutAuditLogsInput = {
    update: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<UserCreateWithoutAuditLogsInput, UserUncheckedCreateWithoutAuditLogsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAuditLogsInput, UserUncheckedUpdateWithoutAuditLogsInput>
  }

  export type UserUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    roles?: StringFieldUpdateOperationsInput | string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    batches?: ACCUUpdateManyWithoutCreatedByNestedInput
    valuationLogs?: ValuationLogUpdateManyWithoutCreatedByNestedInput
    journalEntries?: JournalEntryUpdateManyWithoutCreatedByNestedInput
    reclassRequests?: ReclassificationRequestUpdateManyWithoutSubmittedByUserNestedInput
    settings?: UserSettingUpdateManyWithoutUserNestedInput
    xbrlTags?: XbrlTagUpdateManyWithoutCreatedByNestedInput
    importJobs?: ImportJobUpdateManyWithoutUserNestedInput
    entity?: EntityUpdateOneWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutAuditLogsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    roles?: StringFieldUpdateOperationsInput | string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    batches?: ACCUUncheckedUpdateManyWithoutCreatedByNestedInput
    valuationLogs?: ValuationLogUncheckedUpdateManyWithoutCreatedByNestedInput
    journalEntries?: JournalEntryUncheckedUpdateManyWithoutCreatedByNestedInput
    reclassRequests?: ReclassificationRequestUncheckedUpdateManyWithoutSubmittedByUserNestedInput
    settings?: UserSettingUncheckedUpdateManyWithoutUserNestedInput
    xbrlTags?: XbrlTagUncheckedUpdateManyWithoutCreatedByNestedInput
    importJobs?: ImportJobUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ACCUUpsertWithoutAuditLogEntriesInput = {
    update: XOR<ACCUUpdateWithoutAuditLogEntriesInput, ACCUUncheckedUpdateWithoutAuditLogEntriesInput>
    create: XOR<ACCUCreateWithoutAuditLogEntriesInput, ACCUUncheckedCreateWithoutAuditLogEntriesInput>
    where?: ACCUWhereInput
  }

  export type ACCUUpdateToOneWithWhereWithoutAuditLogEntriesInput = {
    where?: ACCUWhereInput
    data: XOR<ACCUUpdateWithoutAuditLogEntriesInput, ACCUUncheckedUpdateWithoutAuditLogEntriesInput>
  }

  export type ACCUUpdateWithoutAuditLogEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    vintage?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    issuanceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    serialRangeStart?: StringFieldUpdateOperationsInput | string
    serialRangeEnd?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    acquisitionCost?: FloatFieldUpdateOperationsInput | number
    classification?: EnumClassificationFieldUpdateOperationsInput | $Enums.Classification
    acquisitionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    loanStatus?: BoolFieldUpdateOperationsInput | boolean
    loanDetails?: NullableJsonNullValueInput | InputJsonValue
    valuationLogs?: ValuationLogUpdateManyWithoutBatchNestedInput
    reclassificationRequests?: ReclassificationRequestUpdateManyWithoutBatchNestedInput
    loans?: LoanUpdateManyWithoutBatchNestedInput
    createdBy?: UserUpdateOneWithoutBatchesNestedInput
    entity?: EntityUpdateOneRequiredWithoutBatchesNestedInput
    project?: ProjectUpdateOneRequiredWithoutAccusNestedInput
  }

  export type ACCUUncheckedUpdateWithoutAuditLogEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    vintage?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    issuanceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    serialRangeStart?: StringFieldUpdateOperationsInput | string
    serialRangeEnd?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    acquisitionCost?: FloatFieldUpdateOperationsInput | number
    classification?: EnumClassificationFieldUpdateOperationsInput | $Enums.Classification
    acquisitionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    loanStatus?: BoolFieldUpdateOperationsInput | boolean
    loanDetails?: NullableJsonNullValueInput | InputJsonValue
    valuationLogs?: ValuationLogUncheckedUpdateManyWithoutBatchNestedInput
    reclassificationRequests?: ReclassificationRequestUncheckedUpdateManyWithoutBatchNestedInput
    loans?: LoanUncheckedUpdateManyWithoutBatchNestedInput
  }

  export type JournalLineCreateWithoutEntryInput = {
    id?: string
    accountCode: string
    debit: number
    credit: number
    description?: string | null
    createdAt?: Date | string
    entityId: string
  }

  export type JournalLineUncheckedCreateWithoutEntryInput = {
    id?: string
    accountCode: string
    debit: number
    credit: number
    description?: string | null
    createdAt?: Date | string
    entityId: string
  }

  export type JournalLineCreateOrConnectWithoutEntryInput = {
    where: JournalLineWhereUniqueInput
    create: XOR<JournalLineCreateWithoutEntryInput, JournalLineUncheckedCreateWithoutEntryInput>
  }

  export type JournalLineCreateManyEntryInputEnvelope = {
    data: JournalLineCreateManyEntryInput | JournalLineCreateManyEntryInput[]
  }

  export type UserCreateWithoutJournalEntriesInput = {
    id?: string
    email: string
    roles: string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    batches?: ACCUCreateNestedManyWithoutCreatedByInput
    valuationLogs?: ValuationLogCreateNestedManyWithoutCreatedByInput
    auditLogs?: AuditLogEntryCreateNestedManyWithoutUserInput
    reclassRequests?: ReclassificationRequestCreateNestedManyWithoutSubmittedByUserInput
    settings?: UserSettingCreateNestedManyWithoutUserInput
    xbrlTags?: XbrlTagCreateNestedManyWithoutCreatedByInput
    importJobs?: ImportJobCreateNestedManyWithoutUserInput
    entity?: EntityCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutJournalEntriesInput = {
    id?: string
    email: string
    roles: string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    entityId?: string | null
    batches?: ACCUUncheckedCreateNestedManyWithoutCreatedByInput
    valuationLogs?: ValuationLogUncheckedCreateNestedManyWithoutCreatedByInput
    auditLogs?: AuditLogEntryUncheckedCreateNestedManyWithoutUserInput
    reclassRequests?: ReclassificationRequestUncheckedCreateNestedManyWithoutSubmittedByUserInput
    settings?: UserSettingUncheckedCreateNestedManyWithoutUserInput
    xbrlTags?: XbrlTagUncheckedCreateNestedManyWithoutCreatedByInput
    importJobs?: ImportJobUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutJournalEntriesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutJournalEntriesInput, UserUncheckedCreateWithoutJournalEntriesInput>
  }

  export type JournalLineUpsertWithWhereUniqueWithoutEntryInput = {
    where: JournalLineWhereUniqueInput
    update: XOR<JournalLineUpdateWithoutEntryInput, JournalLineUncheckedUpdateWithoutEntryInput>
    create: XOR<JournalLineCreateWithoutEntryInput, JournalLineUncheckedCreateWithoutEntryInput>
  }

  export type JournalLineUpdateWithWhereUniqueWithoutEntryInput = {
    where: JournalLineWhereUniqueInput
    data: XOR<JournalLineUpdateWithoutEntryInput, JournalLineUncheckedUpdateWithoutEntryInput>
  }

  export type JournalLineUpdateManyWithWhereWithoutEntryInput = {
    where: JournalLineScalarWhereInput
    data: XOR<JournalLineUpdateManyMutationInput, JournalLineUncheckedUpdateManyWithoutEntryInput>
  }

  export type JournalLineScalarWhereInput = {
    AND?: JournalLineScalarWhereInput | JournalLineScalarWhereInput[]
    OR?: JournalLineScalarWhereInput[]
    NOT?: JournalLineScalarWhereInput | JournalLineScalarWhereInput[]
    id?: StringFilter<"JournalLine"> | string
    entryId?: StringFilter<"JournalLine"> | string
    accountCode?: StringFilter<"JournalLine"> | string
    debit?: FloatFilter<"JournalLine"> | number
    credit?: FloatFilter<"JournalLine"> | number
    description?: StringNullableFilter<"JournalLine"> | string | null
    createdAt?: DateTimeFilter<"JournalLine"> | Date | string
    entityId?: StringFilter<"JournalLine"> | string
  }

  export type UserUpsertWithoutJournalEntriesInput = {
    update: XOR<UserUpdateWithoutJournalEntriesInput, UserUncheckedUpdateWithoutJournalEntriesInput>
    create: XOR<UserCreateWithoutJournalEntriesInput, UserUncheckedCreateWithoutJournalEntriesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutJournalEntriesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutJournalEntriesInput, UserUncheckedUpdateWithoutJournalEntriesInput>
  }

  export type UserUpdateWithoutJournalEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    roles?: StringFieldUpdateOperationsInput | string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    batches?: ACCUUpdateManyWithoutCreatedByNestedInput
    valuationLogs?: ValuationLogUpdateManyWithoutCreatedByNestedInput
    auditLogs?: AuditLogEntryUpdateManyWithoutUserNestedInput
    reclassRequests?: ReclassificationRequestUpdateManyWithoutSubmittedByUserNestedInput
    settings?: UserSettingUpdateManyWithoutUserNestedInput
    xbrlTags?: XbrlTagUpdateManyWithoutCreatedByNestedInput
    importJobs?: ImportJobUpdateManyWithoutUserNestedInput
    entity?: EntityUpdateOneWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutJournalEntriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    roles?: StringFieldUpdateOperationsInput | string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    batches?: ACCUUncheckedUpdateManyWithoutCreatedByNestedInput
    valuationLogs?: ValuationLogUncheckedUpdateManyWithoutCreatedByNestedInput
    auditLogs?: AuditLogEntryUncheckedUpdateManyWithoutUserNestedInput
    reclassRequests?: ReclassificationRequestUncheckedUpdateManyWithoutSubmittedByUserNestedInput
    settings?: UserSettingUncheckedUpdateManyWithoutUserNestedInput
    xbrlTags?: XbrlTagUncheckedUpdateManyWithoutCreatedByNestedInput
    importJobs?: ImportJobUncheckedUpdateManyWithoutUserNestedInput
  }

  export type JournalEntryCreateWithoutLinesInput = {
    id?: string
    description: string
    date: Date | string
    createdAt?: Date | string
    entityId: string
    createdBy: UserCreateNestedOneWithoutJournalEntriesInput
  }

  export type JournalEntryUncheckedCreateWithoutLinesInput = {
    id?: string
    description: string
    date: Date | string
    userId: string
    createdAt?: Date | string
    entityId: string
  }

  export type JournalEntryCreateOrConnectWithoutLinesInput = {
    where: JournalEntryWhereUniqueInput
    create: XOR<JournalEntryCreateWithoutLinesInput, JournalEntryUncheckedCreateWithoutLinesInput>
  }

  export type JournalEntryUpsertWithoutLinesInput = {
    update: XOR<JournalEntryUpdateWithoutLinesInput, JournalEntryUncheckedUpdateWithoutLinesInput>
    create: XOR<JournalEntryCreateWithoutLinesInput, JournalEntryUncheckedCreateWithoutLinesInput>
    where?: JournalEntryWhereInput
  }

  export type JournalEntryUpdateToOneWithWhereWithoutLinesInput = {
    where?: JournalEntryWhereInput
    data: XOR<JournalEntryUpdateWithoutLinesInput, JournalEntryUncheckedUpdateWithoutLinesInput>
  }

  export type JournalEntryUpdateWithoutLinesInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
    createdBy?: UserUpdateOneRequiredWithoutJournalEntriesNestedInput
  }

  export type JournalEntryUncheckedUpdateWithoutLinesInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateWithoutXbrlTagsInput = {
    id?: string
    email: string
    roles: string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    batches?: ACCUCreateNestedManyWithoutCreatedByInput
    valuationLogs?: ValuationLogCreateNestedManyWithoutCreatedByInput
    auditLogs?: AuditLogEntryCreateNestedManyWithoutUserInput
    journalEntries?: JournalEntryCreateNestedManyWithoutCreatedByInput
    reclassRequests?: ReclassificationRequestCreateNestedManyWithoutSubmittedByUserInput
    settings?: UserSettingCreateNestedManyWithoutUserInput
    importJobs?: ImportJobCreateNestedManyWithoutUserInput
    entity?: EntityCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutXbrlTagsInput = {
    id?: string
    email: string
    roles: string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    entityId?: string | null
    batches?: ACCUUncheckedCreateNestedManyWithoutCreatedByInput
    valuationLogs?: ValuationLogUncheckedCreateNestedManyWithoutCreatedByInput
    auditLogs?: AuditLogEntryUncheckedCreateNestedManyWithoutUserInput
    journalEntries?: JournalEntryUncheckedCreateNestedManyWithoutCreatedByInput
    reclassRequests?: ReclassificationRequestUncheckedCreateNestedManyWithoutSubmittedByUserInput
    settings?: UserSettingUncheckedCreateNestedManyWithoutUserInput
    importJobs?: ImportJobUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutXbrlTagsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutXbrlTagsInput, UserUncheckedCreateWithoutXbrlTagsInput>
  }

  export type UserUpsertWithoutXbrlTagsInput = {
    update: XOR<UserUpdateWithoutXbrlTagsInput, UserUncheckedUpdateWithoutXbrlTagsInput>
    create: XOR<UserCreateWithoutXbrlTagsInput, UserUncheckedCreateWithoutXbrlTagsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutXbrlTagsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutXbrlTagsInput, UserUncheckedUpdateWithoutXbrlTagsInput>
  }

  export type UserUpdateWithoutXbrlTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    roles?: StringFieldUpdateOperationsInput | string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    batches?: ACCUUpdateManyWithoutCreatedByNestedInput
    valuationLogs?: ValuationLogUpdateManyWithoutCreatedByNestedInput
    auditLogs?: AuditLogEntryUpdateManyWithoutUserNestedInput
    journalEntries?: JournalEntryUpdateManyWithoutCreatedByNestedInput
    reclassRequests?: ReclassificationRequestUpdateManyWithoutSubmittedByUserNestedInput
    settings?: UserSettingUpdateManyWithoutUserNestedInput
    importJobs?: ImportJobUpdateManyWithoutUserNestedInput
    entity?: EntityUpdateOneWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutXbrlTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    roles?: StringFieldUpdateOperationsInput | string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    batches?: ACCUUncheckedUpdateManyWithoutCreatedByNestedInput
    valuationLogs?: ValuationLogUncheckedUpdateManyWithoutCreatedByNestedInput
    auditLogs?: AuditLogEntryUncheckedUpdateManyWithoutUserNestedInput
    journalEntries?: JournalEntryUncheckedUpdateManyWithoutCreatedByNestedInput
    reclassRequests?: ReclassificationRequestUncheckedUpdateManyWithoutSubmittedByUserNestedInput
    settings?: UserSettingUncheckedUpdateManyWithoutUserNestedInput
    importJobs?: ImportJobUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ACCUCreateWithoutReclassificationRequestsInput = {
    id?: string
    vintage: number
    location: string
    issuanceDate: Date | string
    serialRangeStart: string
    serialRangeEnd: string
    category: string
    quantity: number
    acquisitionCost: number
    classification: $Enums.Classification
    acquisitionDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    loanStatus?: boolean
    loanDetails?: NullableJsonNullValueInput | InputJsonValue
    valuationLogs?: ValuationLogCreateNestedManyWithoutBatchInput
    loans?: LoanCreateNestedManyWithoutBatchInput
    auditLogEntries?: AuditLogEntryCreateNestedManyWithoutBatchInput
    createdBy?: UserCreateNestedOneWithoutBatchesInput
    entity: EntityCreateNestedOneWithoutBatchesInput
    project: ProjectCreateNestedOneWithoutAccusInput
  }

  export type ACCUUncheckedCreateWithoutReclassificationRequestsInput = {
    id?: string
    projectId: string
    vintage: number
    location: string
    issuanceDate: Date | string
    serialRangeStart: string
    serialRangeEnd: string
    category: string
    quantity: number
    acquisitionCost: number
    classification: $Enums.Classification
    acquisitionDate: Date | string
    entityId: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    loanStatus?: boolean
    loanDetails?: NullableJsonNullValueInput | InputJsonValue
    valuationLogs?: ValuationLogUncheckedCreateNestedManyWithoutBatchInput
    loans?: LoanUncheckedCreateNestedManyWithoutBatchInput
    auditLogEntries?: AuditLogEntryUncheckedCreateNestedManyWithoutBatchInput
  }

  export type ACCUCreateOrConnectWithoutReclassificationRequestsInput = {
    where: ACCUWhereUniqueInput
    create: XOR<ACCUCreateWithoutReclassificationRequestsInput, ACCUUncheckedCreateWithoutReclassificationRequestsInput>
  }

  export type UserCreateWithoutReclassRequestsInput = {
    id?: string
    email: string
    roles: string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    batches?: ACCUCreateNestedManyWithoutCreatedByInput
    valuationLogs?: ValuationLogCreateNestedManyWithoutCreatedByInput
    auditLogs?: AuditLogEntryCreateNestedManyWithoutUserInput
    journalEntries?: JournalEntryCreateNestedManyWithoutCreatedByInput
    settings?: UserSettingCreateNestedManyWithoutUserInput
    xbrlTags?: XbrlTagCreateNestedManyWithoutCreatedByInput
    importJobs?: ImportJobCreateNestedManyWithoutUserInput
    entity?: EntityCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutReclassRequestsInput = {
    id?: string
    email: string
    roles: string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    entityId?: string | null
    batches?: ACCUUncheckedCreateNestedManyWithoutCreatedByInput
    valuationLogs?: ValuationLogUncheckedCreateNestedManyWithoutCreatedByInput
    auditLogs?: AuditLogEntryUncheckedCreateNestedManyWithoutUserInput
    journalEntries?: JournalEntryUncheckedCreateNestedManyWithoutCreatedByInput
    settings?: UserSettingUncheckedCreateNestedManyWithoutUserInput
    xbrlTags?: XbrlTagUncheckedCreateNestedManyWithoutCreatedByInput
    importJobs?: ImportJobUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReclassRequestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReclassRequestsInput, UserUncheckedCreateWithoutReclassRequestsInput>
  }

  export type ACCUUpsertWithoutReclassificationRequestsInput = {
    update: XOR<ACCUUpdateWithoutReclassificationRequestsInput, ACCUUncheckedUpdateWithoutReclassificationRequestsInput>
    create: XOR<ACCUCreateWithoutReclassificationRequestsInput, ACCUUncheckedCreateWithoutReclassificationRequestsInput>
    where?: ACCUWhereInput
  }

  export type ACCUUpdateToOneWithWhereWithoutReclassificationRequestsInput = {
    where?: ACCUWhereInput
    data: XOR<ACCUUpdateWithoutReclassificationRequestsInput, ACCUUncheckedUpdateWithoutReclassificationRequestsInput>
  }

  export type ACCUUpdateWithoutReclassificationRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    vintage?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    issuanceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    serialRangeStart?: StringFieldUpdateOperationsInput | string
    serialRangeEnd?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    acquisitionCost?: FloatFieldUpdateOperationsInput | number
    classification?: EnumClassificationFieldUpdateOperationsInput | $Enums.Classification
    acquisitionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    loanStatus?: BoolFieldUpdateOperationsInput | boolean
    loanDetails?: NullableJsonNullValueInput | InputJsonValue
    valuationLogs?: ValuationLogUpdateManyWithoutBatchNestedInput
    loans?: LoanUpdateManyWithoutBatchNestedInput
    auditLogEntries?: AuditLogEntryUpdateManyWithoutBatchNestedInput
    createdBy?: UserUpdateOneWithoutBatchesNestedInput
    entity?: EntityUpdateOneRequiredWithoutBatchesNestedInput
    project?: ProjectUpdateOneRequiredWithoutAccusNestedInput
  }

  export type ACCUUncheckedUpdateWithoutReclassificationRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    vintage?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    issuanceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    serialRangeStart?: StringFieldUpdateOperationsInput | string
    serialRangeEnd?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    acquisitionCost?: FloatFieldUpdateOperationsInput | number
    classification?: EnumClassificationFieldUpdateOperationsInput | $Enums.Classification
    acquisitionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    loanStatus?: BoolFieldUpdateOperationsInput | boolean
    loanDetails?: NullableJsonNullValueInput | InputJsonValue
    valuationLogs?: ValuationLogUncheckedUpdateManyWithoutBatchNestedInput
    loans?: LoanUncheckedUpdateManyWithoutBatchNestedInput
    auditLogEntries?: AuditLogEntryUncheckedUpdateManyWithoutBatchNestedInput
  }

  export type UserUpsertWithoutReclassRequestsInput = {
    update: XOR<UserUpdateWithoutReclassRequestsInput, UserUncheckedUpdateWithoutReclassRequestsInput>
    create: XOR<UserCreateWithoutReclassRequestsInput, UserUncheckedCreateWithoutReclassRequestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReclassRequestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReclassRequestsInput, UserUncheckedUpdateWithoutReclassRequestsInput>
  }

  export type UserUpdateWithoutReclassRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    roles?: StringFieldUpdateOperationsInput | string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    batches?: ACCUUpdateManyWithoutCreatedByNestedInput
    valuationLogs?: ValuationLogUpdateManyWithoutCreatedByNestedInput
    auditLogs?: AuditLogEntryUpdateManyWithoutUserNestedInput
    journalEntries?: JournalEntryUpdateManyWithoutCreatedByNestedInput
    settings?: UserSettingUpdateManyWithoutUserNestedInput
    xbrlTags?: XbrlTagUpdateManyWithoutCreatedByNestedInput
    importJobs?: ImportJobUpdateManyWithoutUserNestedInput
    entity?: EntityUpdateOneWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutReclassRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    roles?: StringFieldUpdateOperationsInput | string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    batches?: ACCUUncheckedUpdateManyWithoutCreatedByNestedInput
    valuationLogs?: ValuationLogUncheckedUpdateManyWithoutCreatedByNestedInput
    auditLogs?: AuditLogEntryUncheckedUpdateManyWithoutUserNestedInput
    journalEntries?: JournalEntryUncheckedUpdateManyWithoutCreatedByNestedInput
    settings?: UserSettingUncheckedUpdateManyWithoutUserNestedInput
    xbrlTags?: XbrlTagUncheckedUpdateManyWithoutCreatedByNestedInput
    importJobs?: ImportJobUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ACCUCreateWithoutCreatedByInput = {
    id?: string
    vintage: number
    location: string
    issuanceDate: Date | string
    serialRangeStart: string
    serialRangeEnd: string
    category: string
    quantity: number
    acquisitionCost: number
    classification: $Enums.Classification
    acquisitionDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    loanStatus?: boolean
    loanDetails?: NullableJsonNullValueInput | InputJsonValue
    valuationLogs?: ValuationLogCreateNestedManyWithoutBatchInput
    reclassificationRequests?: ReclassificationRequestCreateNestedManyWithoutBatchInput
    loans?: LoanCreateNestedManyWithoutBatchInput
    auditLogEntries?: AuditLogEntryCreateNestedManyWithoutBatchInput
    entity: EntityCreateNestedOneWithoutBatchesInput
    project: ProjectCreateNestedOneWithoutAccusInput
  }

  export type ACCUUncheckedCreateWithoutCreatedByInput = {
    id?: string
    projectId: string
    vintage: number
    location: string
    issuanceDate: Date | string
    serialRangeStart: string
    serialRangeEnd: string
    category: string
    quantity: number
    acquisitionCost: number
    classification: $Enums.Classification
    acquisitionDate: Date | string
    entityId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    loanStatus?: boolean
    loanDetails?: NullableJsonNullValueInput | InputJsonValue
    valuationLogs?: ValuationLogUncheckedCreateNestedManyWithoutBatchInput
    reclassificationRequests?: ReclassificationRequestUncheckedCreateNestedManyWithoutBatchInput
    loans?: LoanUncheckedCreateNestedManyWithoutBatchInput
    auditLogEntries?: AuditLogEntryUncheckedCreateNestedManyWithoutBatchInput
  }

  export type ACCUCreateOrConnectWithoutCreatedByInput = {
    where: ACCUWhereUniqueInput
    create: XOR<ACCUCreateWithoutCreatedByInput, ACCUUncheckedCreateWithoutCreatedByInput>
  }

  export type ACCUCreateManyCreatedByInputEnvelope = {
    data: ACCUCreateManyCreatedByInput | ACCUCreateManyCreatedByInput[]
  }

  export type ValuationLogCreateWithoutCreatedByInput = {
    id?: string
    date: Date | string
    marketPrice: number
    nrv: number
    impairment?: number | null
    createdAt?: Date | string
    entityId: string
    batch: ACCUCreateNestedOneWithoutValuationLogsInput
  }

  export type ValuationLogUncheckedCreateWithoutCreatedByInput = {
    id?: string
    batchId: string
    date: Date | string
    marketPrice: number
    nrv: number
    impairment?: number | null
    createdAt?: Date | string
    entityId: string
  }

  export type ValuationLogCreateOrConnectWithoutCreatedByInput = {
    where: ValuationLogWhereUniqueInput
    create: XOR<ValuationLogCreateWithoutCreatedByInput, ValuationLogUncheckedCreateWithoutCreatedByInput>
  }

  export type ValuationLogCreateManyCreatedByInputEnvelope = {
    data: ValuationLogCreateManyCreatedByInput | ValuationLogCreateManyCreatedByInput[]
  }

  export type AuditLogEntryCreateWithoutUserInput = {
    id?: string
    action: string
    tableName: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
    ipAddress?: string | null
    entityId: string
    batch?: ACCUCreateNestedOneWithoutAuditLogEntriesInput
  }

  export type AuditLogEntryUncheckedCreateWithoutUserInput = {
    id?: string
    action: string
    tableName: string
    recordId: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
    ipAddress?: string | null
    entityId: string
  }

  export type AuditLogEntryCreateOrConnectWithoutUserInput = {
    where: AuditLogEntryWhereUniqueInput
    create: XOR<AuditLogEntryCreateWithoutUserInput, AuditLogEntryUncheckedCreateWithoutUserInput>
  }

  export type AuditLogEntryCreateManyUserInputEnvelope = {
    data: AuditLogEntryCreateManyUserInput | AuditLogEntryCreateManyUserInput[]
  }

  export type JournalEntryCreateWithoutCreatedByInput = {
    id?: string
    description: string
    date: Date | string
    createdAt?: Date | string
    entityId: string
    lines?: JournalLineCreateNestedManyWithoutEntryInput
  }

  export type JournalEntryUncheckedCreateWithoutCreatedByInput = {
    id?: string
    description: string
    date: Date | string
    createdAt?: Date | string
    entityId: string
    lines?: JournalLineUncheckedCreateNestedManyWithoutEntryInput
  }

  export type JournalEntryCreateOrConnectWithoutCreatedByInput = {
    where: JournalEntryWhereUniqueInput
    create: XOR<JournalEntryCreateWithoutCreatedByInput, JournalEntryUncheckedCreateWithoutCreatedByInput>
  }

  export type JournalEntryCreateManyCreatedByInputEnvelope = {
    data: JournalEntryCreateManyCreatedByInput | JournalEntryCreateManyCreatedByInput[]
  }

  export type ReclassificationRequestCreateWithoutSubmittedByUserInput = {
    id?: string
    fromClass: $Enums.Classification
    toClass: $Enums.Classification
    reason?: string | null
    status?: $Enums.ReclassificationStatus
    approvedBy?: string | null
    timestamp?: Date | string
    approvedAt?: Date | string | null
    entityId: string
    batch: ACCUCreateNestedOneWithoutReclassificationRequestsInput
  }

  export type ReclassificationRequestUncheckedCreateWithoutSubmittedByUserInput = {
    id?: string
    batchId: string
    fromClass: $Enums.Classification
    toClass: $Enums.Classification
    reason?: string | null
    status?: $Enums.ReclassificationStatus
    approvedBy?: string | null
    timestamp?: Date | string
    approvedAt?: Date | string | null
    entityId: string
  }

  export type ReclassificationRequestCreateOrConnectWithoutSubmittedByUserInput = {
    where: ReclassificationRequestWhereUniqueInput
    create: XOR<ReclassificationRequestCreateWithoutSubmittedByUserInput, ReclassificationRequestUncheckedCreateWithoutSubmittedByUserInput>
  }

  export type ReclassificationRequestCreateManySubmittedByUserInputEnvelope = {
    data: ReclassificationRequestCreateManySubmittedByUserInput | ReclassificationRequestCreateManySubmittedByUserInput[]
  }

  export type UserSettingCreateWithoutUserInput = {
    id?: string
    roles: string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSettingUncheckedCreateWithoutUserInput = {
    id?: string
    roles: string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserSettingCreateOrConnectWithoutUserInput = {
    where: UserSettingWhereUniqueInput
    create: XOR<UserSettingCreateWithoutUserInput, UserSettingUncheckedCreateWithoutUserInput>
  }

  export type UserSettingCreateManyUserInputEnvelope = {
    data: UserSettingCreateManyUserInput | UserSettingCreateManyUserInput[]
  }

  export type XbrlTagCreateWithoutCreatedByInput = {
    id?: string
    tagName: string
    value: string
    context: string
    periodStart?: Date | string | null
    periodEnd?: Date | string | null
    createdAt?: Date | string
    entityId: string
  }

  export type XbrlTagUncheckedCreateWithoutCreatedByInput = {
    id?: string
    tagName: string
    value: string
    context: string
    periodStart?: Date | string | null
    periodEnd?: Date | string | null
    createdAt?: Date | string
    entityId: string
  }

  export type XbrlTagCreateOrConnectWithoutCreatedByInput = {
    where: XbrlTagWhereUniqueInput
    create: XOR<XbrlTagCreateWithoutCreatedByInput, XbrlTagUncheckedCreateWithoutCreatedByInput>
  }

  export type XbrlTagCreateManyCreatedByInputEnvelope = {
    data: XbrlTagCreateManyCreatedByInput | XbrlTagCreateManyCreatedByInput[]
  }

  export type ImportJobCreateWithoutUserInput = {
    id?: string
    fileName: string
    status?: string
    processedRows?: number
    errorCount?: number
    createdAt?: Date | string
    completedAt?: Date | string | null
    entityId: string
  }

  export type ImportJobUncheckedCreateWithoutUserInput = {
    id?: string
    fileName: string
    status?: string
    processedRows?: number
    errorCount?: number
    createdAt?: Date | string
    completedAt?: Date | string | null
    entityId: string
  }

  export type ImportJobCreateOrConnectWithoutUserInput = {
    where: ImportJobWhereUniqueInput
    create: XOR<ImportJobCreateWithoutUserInput, ImportJobUncheckedCreateWithoutUserInput>
  }

  export type ImportJobCreateManyUserInputEnvelope = {
    data: ImportJobCreateManyUserInput | ImportJobCreateManyUserInput[]
  }

  export type EntityCreateWithoutUsersInput = {
    id?: string
    name: string
    legalName?: string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    parentId?: string | null
    batches?: ACCUCreateNestedManyWithoutEntityInput
    loans?: LoanCreateNestedManyWithoutEntityInput
  }

  export type EntityUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    legalName?: string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    parentId?: string | null
    batches?: ACCUUncheckedCreateNestedManyWithoutEntityInput
    loans?: LoanUncheckedCreateNestedManyWithoutEntityInput
  }

  export type EntityCreateOrConnectWithoutUsersInput = {
    where: EntityWhereUniqueInput
    create: XOR<EntityCreateWithoutUsersInput, EntityUncheckedCreateWithoutUsersInput>
  }

  export type ACCUUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: ACCUWhereUniqueInput
    update: XOR<ACCUUpdateWithoutCreatedByInput, ACCUUncheckedUpdateWithoutCreatedByInput>
    create: XOR<ACCUCreateWithoutCreatedByInput, ACCUUncheckedCreateWithoutCreatedByInput>
  }

  export type ACCUUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: ACCUWhereUniqueInput
    data: XOR<ACCUUpdateWithoutCreatedByInput, ACCUUncheckedUpdateWithoutCreatedByInput>
  }

  export type ACCUUpdateManyWithWhereWithoutCreatedByInput = {
    where: ACCUScalarWhereInput
    data: XOR<ACCUUpdateManyMutationInput, ACCUUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type ValuationLogUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: ValuationLogWhereUniqueInput
    update: XOR<ValuationLogUpdateWithoutCreatedByInput, ValuationLogUncheckedUpdateWithoutCreatedByInput>
    create: XOR<ValuationLogCreateWithoutCreatedByInput, ValuationLogUncheckedCreateWithoutCreatedByInput>
  }

  export type ValuationLogUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: ValuationLogWhereUniqueInput
    data: XOR<ValuationLogUpdateWithoutCreatedByInput, ValuationLogUncheckedUpdateWithoutCreatedByInput>
  }

  export type ValuationLogUpdateManyWithWhereWithoutCreatedByInput = {
    where: ValuationLogScalarWhereInput
    data: XOR<ValuationLogUpdateManyMutationInput, ValuationLogUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type AuditLogEntryUpsertWithWhereUniqueWithoutUserInput = {
    where: AuditLogEntryWhereUniqueInput
    update: XOR<AuditLogEntryUpdateWithoutUserInput, AuditLogEntryUncheckedUpdateWithoutUserInput>
    create: XOR<AuditLogEntryCreateWithoutUserInput, AuditLogEntryUncheckedCreateWithoutUserInput>
  }

  export type AuditLogEntryUpdateWithWhereUniqueWithoutUserInput = {
    where: AuditLogEntryWhereUniqueInput
    data: XOR<AuditLogEntryUpdateWithoutUserInput, AuditLogEntryUncheckedUpdateWithoutUserInput>
  }

  export type AuditLogEntryUpdateManyWithWhereWithoutUserInput = {
    where: AuditLogEntryScalarWhereInput
    data: XOR<AuditLogEntryUpdateManyMutationInput, AuditLogEntryUncheckedUpdateManyWithoutUserInput>
  }

  export type JournalEntryUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: JournalEntryWhereUniqueInput
    update: XOR<JournalEntryUpdateWithoutCreatedByInput, JournalEntryUncheckedUpdateWithoutCreatedByInput>
    create: XOR<JournalEntryCreateWithoutCreatedByInput, JournalEntryUncheckedCreateWithoutCreatedByInput>
  }

  export type JournalEntryUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: JournalEntryWhereUniqueInput
    data: XOR<JournalEntryUpdateWithoutCreatedByInput, JournalEntryUncheckedUpdateWithoutCreatedByInput>
  }

  export type JournalEntryUpdateManyWithWhereWithoutCreatedByInput = {
    where: JournalEntryScalarWhereInput
    data: XOR<JournalEntryUpdateManyMutationInput, JournalEntryUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type JournalEntryScalarWhereInput = {
    AND?: JournalEntryScalarWhereInput | JournalEntryScalarWhereInput[]
    OR?: JournalEntryScalarWhereInput[]
    NOT?: JournalEntryScalarWhereInput | JournalEntryScalarWhereInput[]
    id?: StringFilter<"JournalEntry"> | string
    description?: StringFilter<"JournalEntry"> | string
    date?: DateTimeFilter<"JournalEntry"> | Date | string
    userId?: StringFilter<"JournalEntry"> | string
    createdAt?: DateTimeFilter<"JournalEntry"> | Date | string
    entityId?: StringFilter<"JournalEntry"> | string
  }

  export type ReclassificationRequestUpsertWithWhereUniqueWithoutSubmittedByUserInput = {
    where: ReclassificationRequestWhereUniqueInput
    update: XOR<ReclassificationRequestUpdateWithoutSubmittedByUserInput, ReclassificationRequestUncheckedUpdateWithoutSubmittedByUserInput>
    create: XOR<ReclassificationRequestCreateWithoutSubmittedByUserInput, ReclassificationRequestUncheckedCreateWithoutSubmittedByUserInput>
  }

  export type ReclassificationRequestUpdateWithWhereUniqueWithoutSubmittedByUserInput = {
    where: ReclassificationRequestWhereUniqueInput
    data: XOR<ReclassificationRequestUpdateWithoutSubmittedByUserInput, ReclassificationRequestUncheckedUpdateWithoutSubmittedByUserInput>
  }

  export type ReclassificationRequestUpdateManyWithWhereWithoutSubmittedByUserInput = {
    where: ReclassificationRequestScalarWhereInput
    data: XOR<ReclassificationRequestUpdateManyMutationInput, ReclassificationRequestUncheckedUpdateManyWithoutSubmittedByUserInput>
  }

  export type UserSettingUpsertWithWhereUniqueWithoutUserInput = {
    where: UserSettingWhereUniqueInput
    update: XOR<UserSettingUpdateWithoutUserInput, UserSettingUncheckedUpdateWithoutUserInput>
    create: XOR<UserSettingCreateWithoutUserInput, UserSettingUncheckedCreateWithoutUserInput>
  }

  export type UserSettingUpdateWithWhereUniqueWithoutUserInput = {
    where: UserSettingWhereUniqueInput
    data: XOR<UserSettingUpdateWithoutUserInput, UserSettingUncheckedUpdateWithoutUserInput>
  }

  export type UserSettingUpdateManyWithWhereWithoutUserInput = {
    where: UserSettingScalarWhereInput
    data: XOR<UserSettingUpdateManyMutationInput, UserSettingUncheckedUpdateManyWithoutUserInput>
  }

  export type UserSettingScalarWhereInput = {
    AND?: UserSettingScalarWhereInput | UserSettingScalarWhereInput[]
    OR?: UserSettingScalarWhereInput[]
    NOT?: UserSettingScalarWhereInput | UserSettingScalarWhereInput[]
    id?: StringFilter<"UserSetting"> | string
    userId?: StringFilter<"UserSetting"> | string
    roles?: StringFilter<"UserSetting"> | string
    preferences?: JsonNullableFilter<"UserSetting">
    createdAt?: DateTimeFilter<"UserSetting"> | Date | string
    updatedAt?: DateTimeFilter<"UserSetting"> | Date | string
  }

  export type XbrlTagUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: XbrlTagWhereUniqueInput
    update: XOR<XbrlTagUpdateWithoutCreatedByInput, XbrlTagUncheckedUpdateWithoutCreatedByInput>
    create: XOR<XbrlTagCreateWithoutCreatedByInput, XbrlTagUncheckedCreateWithoutCreatedByInput>
  }

  export type XbrlTagUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: XbrlTagWhereUniqueInput
    data: XOR<XbrlTagUpdateWithoutCreatedByInput, XbrlTagUncheckedUpdateWithoutCreatedByInput>
  }

  export type XbrlTagUpdateManyWithWhereWithoutCreatedByInput = {
    where: XbrlTagScalarWhereInput
    data: XOR<XbrlTagUpdateManyMutationInput, XbrlTagUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type XbrlTagScalarWhereInput = {
    AND?: XbrlTagScalarWhereInput | XbrlTagScalarWhereInput[]
    OR?: XbrlTagScalarWhereInput[]
    NOT?: XbrlTagScalarWhereInput | XbrlTagScalarWhereInput[]
    id?: StringFilter<"XbrlTag"> | string
    tagName?: StringFilter<"XbrlTag"> | string
    value?: StringFilter<"XbrlTag"> | string
    context?: StringFilter<"XbrlTag"> | string
    periodStart?: DateTimeNullableFilter<"XbrlTag"> | Date | string | null
    periodEnd?: DateTimeNullableFilter<"XbrlTag"> | Date | string | null
    userId?: StringFilter<"XbrlTag"> | string
    createdAt?: DateTimeFilter<"XbrlTag"> | Date | string
    entityId?: StringFilter<"XbrlTag"> | string
  }

  export type ImportJobUpsertWithWhereUniqueWithoutUserInput = {
    where: ImportJobWhereUniqueInput
    update: XOR<ImportJobUpdateWithoutUserInput, ImportJobUncheckedUpdateWithoutUserInput>
    create: XOR<ImportJobCreateWithoutUserInput, ImportJobUncheckedCreateWithoutUserInput>
  }

  export type ImportJobUpdateWithWhereUniqueWithoutUserInput = {
    where: ImportJobWhereUniqueInput
    data: XOR<ImportJobUpdateWithoutUserInput, ImportJobUncheckedUpdateWithoutUserInput>
  }

  export type ImportJobUpdateManyWithWhereWithoutUserInput = {
    where: ImportJobScalarWhereInput
    data: XOR<ImportJobUpdateManyMutationInput, ImportJobUncheckedUpdateManyWithoutUserInput>
  }

  export type ImportJobScalarWhereInput = {
    AND?: ImportJobScalarWhereInput | ImportJobScalarWhereInput[]
    OR?: ImportJobScalarWhereInput[]
    NOT?: ImportJobScalarWhereInput | ImportJobScalarWhereInput[]
    id?: StringFilter<"ImportJob"> | string
    fileName?: StringFilter<"ImportJob"> | string
    status?: StringFilter<"ImportJob"> | string
    processedRows?: IntFilter<"ImportJob"> | number
    errorCount?: IntFilter<"ImportJob"> | number
    createdAt?: DateTimeFilter<"ImportJob"> | Date | string
    completedAt?: DateTimeNullableFilter<"ImportJob"> | Date | string | null
    userId?: StringFilter<"ImportJob"> | string
    entityId?: StringFilter<"ImportJob"> | string
  }

  export type EntityUpsertWithoutUsersInput = {
    update: XOR<EntityUpdateWithoutUsersInput, EntityUncheckedUpdateWithoutUsersInput>
    create: XOR<EntityCreateWithoutUsersInput, EntityUncheckedCreateWithoutUsersInput>
    where?: EntityWhereInput
  }

  export type EntityUpdateToOneWithWhereWithoutUsersInput = {
    where?: EntityWhereInput
    data: XOR<EntityUpdateWithoutUsersInput, EntityUncheckedUpdateWithoutUsersInput>
  }

  export type EntityUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    legalName?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    batches?: ACCUUpdateManyWithoutEntityNestedInput
    loans?: LoanUpdateManyWithoutEntityNestedInput
  }

  export type EntityUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    legalName?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    batches?: ACCUUncheckedUpdateManyWithoutEntityNestedInput
    loans?: LoanUncheckedUpdateManyWithoutEntityNestedInput
  }

  export type UserCreateWithoutSettingsInput = {
    id?: string
    email: string
    roles: string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    batches?: ACCUCreateNestedManyWithoutCreatedByInput
    valuationLogs?: ValuationLogCreateNestedManyWithoutCreatedByInput
    auditLogs?: AuditLogEntryCreateNestedManyWithoutUserInput
    journalEntries?: JournalEntryCreateNestedManyWithoutCreatedByInput
    reclassRequests?: ReclassificationRequestCreateNestedManyWithoutSubmittedByUserInput
    xbrlTags?: XbrlTagCreateNestedManyWithoutCreatedByInput
    importJobs?: ImportJobCreateNestedManyWithoutUserInput
    entity?: EntityCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutSettingsInput = {
    id?: string
    email: string
    roles: string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    entityId?: string | null
    batches?: ACCUUncheckedCreateNestedManyWithoutCreatedByInput
    valuationLogs?: ValuationLogUncheckedCreateNestedManyWithoutCreatedByInput
    auditLogs?: AuditLogEntryUncheckedCreateNestedManyWithoutUserInput
    journalEntries?: JournalEntryUncheckedCreateNestedManyWithoutCreatedByInput
    reclassRequests?: ReclassificationRequestUncheckedCreateNestedManyWithoutSubmittedByUserInput
    xbrlTags?: XbrlTagUncheckedCreateNestedManyWithoutCreatedByInput
    importJobs?: ImportJobUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSettingsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSettingsInput, UserUncheckedCreateWithoutSettingsInput>
  }

  export type UserUpsertWithoutSettingsInput = {
    update: XOR<UserUpdateWithoutSettingsInput, UserUncheckedUpdateWithoutSettingsInput>
    create: XOR<UserCreateWithoutSettingsInput, UserUncheckedCreateWithoutSettingsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSettingsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSettingsInput, UserUncheckedUpdateWithoutSettingsInput>
  }

  export type UserUpdateWithoutSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    roles?: StringFieldUpdateOperationsInput | string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    batches?: ACCUUpdateManyWithoutCreatedByNestedInput
    valuationLogs?: ValuationLogUpdateManyWithoutCreatedByNestedInput
    auditLogs?: AuditLogEntryUpdateManyWithoutUserNestedInput
    journalEntries?: JournalEntryUpdateManyWithoutCreatedByNestedInput
    reclassRequests?: ReclassificationRequestUpdateManyWithoutSubmittedByUserNestedInput
    xbrlTags?: XbrlTagUpdateManyWithoutCreatedByNestedInput
    importJobs?: ImportJobUpdateManyWithoutUserNestedInput
    entity?: EntityUpdateOneWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutSettingsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    roles?: StringFieldUpdateOperationsInput | string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    batches?: ACCUUncheckedUpdateManyWithoutCreatedByNestedInput
    valuationLogs?: ValuationLogUncheckedUpdateManyWithoutCreatedByNestedInput
    auditLogs?: AuditLogEntryUncheckedUpdateManyWithoutUserNestedInput
    journalEntries?: JournalEntryUncheckedUpdateManyWithoutCreatedByNestedInput
    reclassRequests?: ReclassificationRequestUncheckedUpdateManyWithoutSubmittedByUserNestedInput
    xbrlTags?: XbrlTagUncheckedUpdateManyWithoutCreatedByNestedInput
    importJobs?: ImportJobUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ACCUCreateWithoutEntityInput = {
    id?: string
    vintage: number
    location: string
    issuanceDate: Date | string
    serialRangeStart: string
    serialRangeEnd: string
    category: string
    quantity: number
    acquisitionCost: number
    classification: $Enums.Classification
    acquisitionDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    loanStatus?: boolean
    loanDetails?: NullableJsonNullValueInput | InputJsonValue
    valuationLogs?: ValuationLogCreateNestedManyWithoutBatchInput
    reclassificationRequests?: ReclassificationRequestCreateNestedManyWithoutBatchInput
    loans?: LoanCreateNestedManyWithoutBatchInput
    auditLogEntries?: AuditLogEntryCreateNestedManyWithoutBatchInput
    createdBy?: UserCreateNestedOneWithoutBatchesInput
    project: ProjectCreateNestedOneWithoutAccusInput
  }

  export type ACCUUncheckedCreateWithoutEntityInput = {
    id?: string
    projectId: string
    vintage: number
    location: string
    issuanceDate: Date | string
    serialRangeStart: string
    serialRangeEnd: string
    category: string
    quantity: number
    acquisitionCost: number
    classification: $Enums.Classification
    acquisitionDate: Date | string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    loanStatus?: boolean
    loanDetails?: NullableJsonNullValueInput | InputJsonValue
    valuationLogs?: ValuationLogUncheckedCreateNestedManyWithoutBatchInput
    reclassificationRequests?: ReclassificationRequestUncheckedCreateNestedManyWithoutBatchInput
    loans?: LoanUncheckedCreateNestedManyWithoutBatchInput
    auditLogEntries?: AuditLogEntryUncheckedCreateNestedManyWithoutBatchInput
  }

  export type ACCUCreateOrConnectWithoutEntityInput = {
    where: ACCUWhereUniqueInput
    create: XOR<ACCUCreateWithoutEntityInput, ACCUUncheckedCreateWithoutEntityInput>
  }

  export type ACCUCreateManyEntityInputEnvelope = {
    data: ACCUCreateManyEntityInput | ACCUCreateManyEntityInput[]
  }

  export type UserCreateWithoutEntityInput = {
    id?: string
    email: string
    roles: string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    batches?: ACCUCreateNestedManyWithoutCreatedByInput
    valuationLogs?: ValuationLogCreateNestedManyWithoutCreatedByInput
    auditLogs?: AuditLogEntryCreateNestedManyWithoutUserInput
    journalEntries?: JournalEntryCreateNestedManyWithoutCreatedByInput
    reclassRequests?: ReclassificationRequestCreateNestedManyWithoutSubmittedByUserInput
    settings?: UserSettingCreateNestedManyWithoutUserInput
    xbrlTags?: XbrlTagCreateNestedManyWithoutCreatedByInput
    importJobs?: ImportJobCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEntityInput = {
    id?: string
    email: string
    roles: string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    batches?: ACCUUncheckedCreateNestedManyWithoutCreatedByInput
    valuationLogs?: ValuationLogUncheckedCreateNestedManyWithoutCreatedByInput
    auditLogs?: AuditLogEntryUncheckedCreateNestedManyWithoutUserInput
    journalEntries?: JournalEntryUncheckedCreateNestedManyWithoutCreatedByInput
    reclassRequests?: ReclassificationRequestUncheckedCreateNestedManyWithoutSubmittedByUserInput
    settings?: UserSettingUncheckedCreateNestedManyWithoutUserInput
    xbrlTags?: XbrlTagUncheckedCreateNestedManyWithoutCreatedByInput
    importJobs?: ImportJobUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutEntityInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEntityInput, UserUncheckedCreateWithoutEntityInput>
  }

  export type UserCreateManyEntityInputEnvelope = {
    data: UserCreateManyEntityInput | UserCreateManyEntityInput[]
  }

  export type LoanCreateWithoutEntityInput = {
    id?: string
    quantity: number
    loanAmount: number
    buybackRate?: number | null
    buybackDate?: Date | string | null
    loanStatus?: $Enums.LoanStatus
    collateralValue?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    batch: ACCUCreateNestedOneWithoutLoansInput
    creditor: CreditorCreateNestedOneWithoutLoansInput
  }

  export type LoanUncheckedCreateWithoutEntityInput = {
    id?: string
    batchId: string
    creditorId: string
    quantity: number
    loanAmount: number
    buybackRate?: number | null
    buybackDate?: Date | string | null
    loanStatus?: $Enums.LoanStatus
    collateralValue?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LoanCreateOrConnectWithoutEntityInput = {
    where: LoanWhereUniqueInput
    create: XOR<LoanCreateWithoutEntityInput, LoanUncheckedCreateWithoutEntityInput>
  }

  export type LoanCreateManyEntityInputEnvelope = {
    data: LoanCreateManyEntityInput | LoanCreateManyEntityInput[]
  }

  export type ACCUUpsertWithWhereUniqueWithoutEntityInput = {
    where: ACCUWhereUniqueInput
    update: XOR<ACCUUpdateWithoutEntityInput, ACCUUncheckedUpdateWithoutEntityInput>
    create: XOR<ACCUCreateWithoutEntityInput, ACCUUncheckedCreateWithoutEntityInput>
  }

  export type ACCUUpdateWithWhereUniqueWithoutEntityInput = {
    where: ACCUWhereUniqueInput
    data: XOR<ACCUUpdateWithoutEntityInput, ACCUUncheckedUpdateWithoutEntityInput>
  }

  export type ACCUUpdateManyWithWhereWithoutEntityInput = {
    where: ACCUScalarWhereInput
    data: XOR<ACCUUpdateManyMutationInput, ACCUUncheckedUpdateManyWithoutEntityInput>
  }

  export type UserUpsertWithWhereUniqueWithoutEntityInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutEntityInput, UserUncheckedUpdateWithoutEntityInput>
    create: XOR<UserCreateWithoutEntityInput, UserUncheckedCreateWithoutEntityInput>
  }

  export type UserUpdateWithWhereUniqueWithoutEntityInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutEntityInput, UserUncheckedUpdateWithoutEntityInput>
  }

  export type UserUpdateManyWithWhereWithoutEntityInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutEntityInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    roles?: StringFilter<"User"> | string
    preferences?: JsonNullableFilter<"User">
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    entityId?: StringNullableFilter<"User"> | string | null
  }

  export type LoanUpsertWithWhereUniqueWithoutEntityInput = {
    where: LoanWhereUniqueInput
    update: XOR<LoanUpdateWithoutEntityInput, LoanUncheckedUpdateWithoutEntityInput>
    create: XOR<LoanCreateWithoutEntityInput, LoanUncheckedCreateWithoutEntityInput>
  }

  export type LoanUpdateWithWhereUniqueWithoutEntityInput = {
    where: LoanWhereUniqueInput
    data: XOR<LoanUpdateWithoutEntityInput, LoanUncheckedUpdateWithoutEntityInput>
  }

  export type LoanUpdateManyWithWhereWithoutEntityInput = {
    where: LoanScalarWhereInput
    data: XOR<LoanUpdateManyMutationInput, LoanUncheckedUpdateManyWithoutEntityInput>
  }

  export type ACCUCreateWithoutLoansInput = {
    id?: string
    vintage: number
    location: string
    issuanceDate: Date | string
    serialRangeStart: string
    serialRangeEnd: string
    category: string
    quantity: number
    acquisitionCost: number
    classification: $Enums.Classification
    acquisitionDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    loanStatus?: boolean
    loanDetails?: NullableJsonNullValueInput | InputJsonValue
    valuationLogs?: ValuationLogCreateNestedManyWithoutBatchInput
    reclassificationRequests?: ReclassificationRequestCreateNestedManyWithoutBatchInput
    auditLogEntries?: AuditLogEntryCreateNestedManyWithoutBatchInput
    createdBy?: UserCreateNestedOneWithoutBatchesInput
    entity: EntityCreateNestedOneWithoutBatchesInput
    project: ProjectCreateNestedOneWithoutAccusInput
  }

  export type ACCUUncheckedCreateWithoutLoansInput = {
    id?: string
    projectId: string
    vintage: number
    location: string
    issuanceDate: Date | string
    serialRangeStart: string
    serialRangeEnd: string
    category: string
    quantity: number
    acquisitionCost: number
    classification: $Enums.Classification
    acquisitionDate: Date | string
    entityId: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    loanStatus?: boolean
    loanDetails?: NullableJsonNullValueInput | InputJsonValue
    valuationLogs?: ValuationLogUncheckedCreateNestedManyWithoutBatchInput
    reclassificationRequests?: ReclassificationRequestUncheckedCreateNestedManyWithoutBatchInput
    auditLogEntries?: AuditLogEntryUncheckedCreateNestedManyWithoutBatchInput
  }

  export type ACCUCreateOrConnectWithoutLoansInput = {
    where: ACCUWhereUniqueInput
    create: XOR<ACCUCreateWithoutLoansInput, ACCUUncheckedCreateWithoutLoansInput>
  }

  export type CreditorCreateWithoutLoansInput = {
    id?: string
    name: string
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    terms?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CreditorUncheckedCreateWithoutLoansInput = {
    id?: string
    name: string
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    terms?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CreditorCreateOrConnectWithoutLoansInput = {
    where: CreditorWhereUniqueInput
    create: XOR<CreditorCreateWithoutLoansInput, CreditorUncheckedCreateWithoutLoansInput>
  }

  export type EntityCreateWithoutLoansInput = {
    id?: string
    name: string
    legalName?: string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    parentId?: string | null
    batches?: ACCUCreateNestedManyWithoutEntityInput
    users?: UserCreateNestedManyWithoutEntityInput
  }

  export type EntityUncheckedCreateWithoutLoansInput = {
    id?: string
    name: string
    legalName?: string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    parentId?: string | null
    batches?: ACCUUncheckedCreateNestedManyWithoutEntityInput
    users?: UserUncheckedCreateNestedManyWithoutEntityInput
  }

  export type EntityCreateOrConnectWithoutLoansInput = {
    where: EntityWhereUniqueInput
    create: XOR<EntityCreateWithoutLoansInput, EntityUncheckedCreateWithoutLoansInput>
  }

  export type ACCUUpsertWithoutLoansInput = {
    update: XOR<ACCUUpdateWithoutLoansInput, ACCUUncheckedUpdateWithoutLoansInput>
    create: XOR<ACCUCreateWithoutLoansInput, ACCUUncheckedCreateWithoutLoansInput>
    where?: ACCUWhereInput
  }

  export type ACCUUpdateToOneWithWhereWithoutLoansInput = {
    where?: ACCUWhereInput
    data: XOR<ACCUUpdateWithoutLoansInput, ACCUUncheckedUpdateWithoutLoansInput>
  }

  export type ACCUUpdateWithoutLoansInput = {
    id?: StringFieldUpdateOperationsInput | string
    vintage?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    issuanceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    serialRangeStart?: StringFieldUpdateOperationsInput | string
    serialRangeEnd?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    acquisitionCost?: FloatFieldUpdateOperationsInput | number
    classification?: EnumClassificationFieldUpdateOperationsInput | $Enums.Classification
    acquisitionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    loanStatus?: BoolFieldUpdateOperationsInput | boolean
    loanDetails?: NullableJsonNullValueInput | InputJsonValue
    valuationLogs?: ValuationLogUpdateManyWithoutBatchNestedInput
    reclassificationRequests?: ReclassificationRequestUpdateManyWithoutBatchNestedInput
    auditLogEntries?: AuditLogEntryUpdateManyWithoutBatchNestedInput
    createdBy?: UserUpdateOneWithoutBatchesNestedInput
    entity?: EntityUpdateOneRequiredWithoutBatchesNestedInput
    project?: ProjectUpdateOneRequiredWithoutAccusNestedInput
  }

  export type ACCUUncheckedUpdateWithoutLoansInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    vintage?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    issuanceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    serialRangeStart?: StringFieldUpdateOperationsInput | string
    serialRangeEnd?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    acquisitionCost?: FloatFieldUpdateOperationsInput | number
    classification?: EnumClassificationFieldUpdateOperationsInput | $Enums.Classification
    acquisitionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    loanStatus?: BoolFieldUpdateOperationsInput | boolean
    loanDetails?: NullableJsonNullValueInput | InputJsonValue
    valuationLogs?: ValuationLogUncheckedUpdateManyWithoutBatchNestedInput
    reclassificationRequests?: ReclassificationRequestUncheckedUpdateManyWithoutBatchNestedInput
    auditLogEntries?: AuditLogEntryUncheckedUpdateManyWithoutBatchNestedInput
  }

  export type CreditorUpsertWithoutLoansInput = {
    update: XOR<CreditorUpdateWithoutLoansInput, CreditorUncheckedUpdateWithoutLoansInput>
    create: XOR<CreditorCreateWithoutLoansInput, CreditorUncheckedCreateWithoutLoansInput>
    where?: CreditorWhereInput
  }

  export type CreditorUpdateToOneWithWhereWithoutLoansInput = {
    where?: CreditorWhereInput
    data: XOR<CreditorUpdateWithoutLoansInput, CreditorUncheckedUpdateWithoutLoansInput>
  }

  export type CreditorUpdateWithoutLoansInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    terms?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CreditorUncheckedUpdateWithoutLoansInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    terms?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type EntityUpsertWithoutLoansInput = {
    update: XOR<EntityUpdateWithoutLoansInput, EntityUncheckedUpdateWithoutLoansInput>
    create: XOR<EntityCreateWithoutLoansInput, EntityUncheckedCreateWithoutLoansInput>
    where?: EntityWhereInput
  }

  export type EntityUpdateToOneWithWhereWithoutLoansInput = {
    where?: EntityWhereInput
    data: XOR<EntityUpdateWithoutLoansInput, EntityUncheckedUpdateWithoutLoansInput>
  }

  export type EntityUpdateWithoutLoansInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    legalName?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    batches?: ACCUUpdateManyWithoutEntityNestedInput
    users?: UserUpdateManyWithoutEntityNestedInput
  }

  export type EntityUncheckedUpdateWithoutLoansInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    legalName?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableJsonNullValueInput | InputJsonValue
    contactInfo?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    batches?: ACCUUncheckedUpdateManyWithoutEntityNestedInput
    users?: UserUncheckedUpdateManyWithoutEntityNestedInput
  }

  export type LoanCreateWithoutCreditorInput = {
    id?: string
    quantity: number
    loanAmount: number
    buybackRate?: number | null
    buybackDate?: Date | string | null
    loanStatus?: $Enums.LoanStatus
    collateralValue?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    batch: ACCUCreateNestedOneWithoutLoansInput
    entity: EntityCreateNestedOneWithoutLoansInput
  }

  export type LoanUncheckedCreateWithoutCreditorInput = {
    id?: string
    batchId: string
    quantity: number
    loanAmount: number
    buybackRate?: number | null
    buybackDate?: Date | string | null
    loanStatus?: $Enums.LoanStatus
    collateralValue?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    entityId: string
  }

  export type LoanCreateOrConnectWithoutCreditorInput = {
    where: LoanWhereUniqueInput
    create: XOR<LoanCreateWithoutCreditorInput, LoanUncheckedCreateWithoutCreditorInput>
  }

  export type LoanCreateManyCreditorInputEnvelope = {
    data: LoanCreateManyCreditorInput | LoanCreateManyCreditorInput[]
  }

  export type LoanUpsertWithWhereUniqueWithoutCreditorInput = {
    where: LoanWhereUniqueInput
    update: XOR<LoanUpdateWithoutCreditorInput, LoanUncheckedUpdateWithoutCreditorInput>
    create: XOR<LoanCreateWithoutCreditorInput, LoanUncheckedCreateWithoutCreditorInput>
  }

  export type LoanUpdateWithWhereUniqueWithoutCreditorInput = {
    where: LoanWhereUniqueInput
    data: XOR<LoanUpdateWithoutCreditorInput, LoanUncheckedUpdateWithoutCreditorInput>
  }

  export type LoanUpdateManyWithWhereWithoutCreditorInput = {
    where: LoanScalarWhereInput
    data: XOR<LoanUpdateManyMutationInput, LoanUncheckedUpdateManyWithoutCreditorInput>
  }

  export type UserCreateWithoutImportJobsInput = {
    id?: string
    email: string
    roles: string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    batches?: ACCUCreateNestedManyWithoutCreatedByInput
    valuationLogs?: ValuationLogCreateNestedManyWithoutCreatedByInput
    auditLogs?: AuditLogEntryCreateNestedManyWithoutUserInput
    journalEntries?: JournalEntryCreateNestedManyWithoutCreatedByInput
    reclassRequests?: ReclassificationRequestCreateNestedManyWithoutSubmittedByUserInput
    settings?: UserSettingCreateNestedManyWithoutUserInput
    xbrlTags?: XbrlTagCreateNestedManyWithoutCreatedByInput
    entity?: EntityCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateWithoutImportJobsInput = {
    id?: string
    email: string
    roles: string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    entityId?: string | null
    batches?: ACCUUncheckedCreateNestedManyWithoutCreatedByInput
    valuationLogs?: ValuationLogUncheckedCreateNestedManyWithoutCreatedByInput
    auditLogs?: AuditLogEntryUncheckedCreateNestedManyWithoutUserInput
    journalEntries?: JournalEntryUncheckedCreateNestedManyWithoutCreatedByInput
    reclassRequests?: ReclassificationRequestUncheckedCreateNestedManyWithoutSubmittedByUserInput
    settings?: UserSettingUncheckedCreateNestedManyWithoutUserInput
    xbrlTags?: XbrlTagUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutImportJobsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutImportJobsInput, UserUncheckedCreateWithoutImportJobsInput>
  }

  export type UserUpsertWithoutImportJobsInput = {
    update: XOR<UserUpdateWithoutImportJobsInput, UserUncheckedUpdateWithoutImportJobsInput>
    create: XOR<UserCreateWithoutImportJobsInput, UserUncheckedCreateWithoutImportJobsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutImportJobsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutImportJobsInput, UserUncheckedUpdateWithoutImportJobsInput>
  }

  export type UserUpdateWithoutImportJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    roles?: StringFieldUpdateOperationsInput | string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    batches?: ACCUUpdateManyWithoutCreatedByNestedInput
    valuationLogs?: ValuationLogUpdateManyWithoutCreatedByNestedInput
    auditLogs?: AuditLogEntryUpdateManyWithoutUserNestedInput
    journalEntries?: JournalEntryUpdateManyWithoutCreatedByNestedInput
    reclassRequests?: ReclassificationRequestUpdateManyWithoutSubmittedByUserNestedInput
    settings?: UserSettingUpdateManyWithoutUserNestedInput
    xbrlTags?: XbrlTagUpdateManyWithoutCreatedByNestedInput
    entity?: EntityUpdateOneWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateWithoutImportJobsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    roles?: StringFieldUpdateOperationsInput | string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    batches?: ACCUUncheckedUpdateManyWithoutCreatedByNestedInput
    valuationLogs?: ValuationLogUncheckedUpdateManyWithoutCreatedByNestedInput
    auditLogs?: AuditLogEntryUncheckedUpdateManyWithoutUserNestedInput
    journalEntries?: JournalEntryUncheckedUpdateManyWithoutCreatedByNestedInput
    reclassRequests?: ReclassificationRequestUncheckedUpdateManyWithoutSubmittedByUserNestedInput
    settings?: UserSettingUncheckedUpdateManyWithoutUserNestedInput
    xbrlTags?: XbrlTagUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type ValuationLogCreateManyBatchInput = {
    id?: string
    date: Date | string
    marketPrice: number
    nrv: number
    impairment?: number | null
    userId: string
    createdAt?: Date | string
    entityId: string
  }

  export type ReclassificationRequestCreateManyBatchInput = {
    id?: string
    fromClass: $Enums.Classification
    toClass: $Enums.Classification
    reason?: string | null
    status?: $Enums.ReclassificationStatus
    submittedBy: string
    approvedBy?: string | null
    timestamp?: Date | string
    approvedAt?: Date | string | null
    entityId: string
  }

  export type LoanCreateManyBatchInput = {
    id?: string
    creditorId: string
    quantity: number
    loanAmount: number
    buybackRate?: number | null
    buybackDate?: Date | string | null
    loanStatus?: $Enums.LoanStatus
    collateralValue?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    entityId: string
  }

  export type AuditLogEntryCreateManyBatchInput = {
    id?: string
    action: string
    tableName: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    userId: string
    timestamp?: Date | string
    ipAddress?: string | null
    entityId: string
  }

  export type ValuationLogUpdateWithoutBatchInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    marketPrice?: FloatFieldUpdateOperationsInput | number
    nrv?: FloatFieldUpdateOperationsInput | number
    impairment?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
    createdBy?: UserUpdateOneRequiredWithoutValuationLogsNestedInput
  }

  export type ValuationLogUncheckedUpdateWithoutBatchInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    marketPrice?: FloatFieldUpdateOperationsInput | number
    nrv?: FloatFieldUpdateOperationsInput | number
    impairment?: NullableFloatFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type ValuationLogUncheckedUpdateManyWithoutBatchInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    marketPrice?: FloatFieldUpdateOperationsInput | number
    nrv?: FloatFieldUpdateOperationsInput | number
    impairment?: NullableFloatFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type ReclassificationRequestUpdateWithoutBatchInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromClass?: EnumClassificationFieldUpdateOperationsInput | $Enums.Classification
    toClass?: EnumClassificationFieldUpdateOperationsInput | $Enums.Classification
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumReclassificationStatusFieldUpdateOperationsInput | $Enums.ReclassificationStatus
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    entityId?: StringFieldUpdateOperationsInput | string
    submittedByUser?: UserUpdateOneRequiredWithoutReclassRequestsNestedInput
  }

  export type ReclassificationRequestUncheckedUpdateWithoutBatchInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromClass?: EnumClassificationFieldUpdateOperationsInput | $Enums.Classification
    toClass?: EnumClassificationFieldUpdateOperationsInput | $Enums.Classification
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumReclassificationStatusFieldUpdateOperationsInput | $Enums.ReclassificationStatus
    submittedBy?: StringFieldUpdateOperationsInput | string
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type ReclassificationRequestUncheckedUpdateManyWithoutBatchInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromClass?: EnumClassificationFieldUpdateOperationsInput | $Enums.Classification
    toClass?: EnumClassificationFieldUpdateOperationsInput | $Enums.Classification
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumReclassificationStatusFieldUpdateOperationsInput | $Enums.ReclassificationStatus
    submittedBy?: StringFieldUpdateOperationsInput | string
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type LoanUpdateWithoutBatchInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    loanAmount?: FloatFieldUpdateOperationsInput | number
    buybackRate?: NullableFloatFieldUpdateOperationsInput | number | null
    buybackDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loanStatus?: EnumLoanStatusFieldUpdateOperationsInput | $Enums.LoanStatus
    collateralValue?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    creditor?: CreditorUpdateOneRequiredWithoutLoansNestedInput
    entity?: EntityUpdateOneRequiredWithoutLoansNestedInput
  }

  export type LoanUncheckedUpdateWithoutBatchInput = {
    id?: StringFieldUpdateOperationsInput | string
    creditorId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    loanAmount?: FloatFieldUpdateOperationsInput | number
    buybackRate?: NullableFloatFieldUpdateOperationsInput | number | null
    buybackDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loanStatus?: EnumLoanStatusFieldUpdateOperationsInput | $Enums.LoanStatus
    collateralValue?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type LoanUncheckedUpdateManyWithoutBatchInput = {
    id?: StringFieldUpdateOperationsInput | string
    creditorId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    loanAmount?: FloatFieldUpdateOperationsInput | number
    buybackRate?: NullableFloatFieldUpdateOperationsInput | number | null
    buybackDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loanStatus?: EnumLoanStatusFieldUpdateOperationsInput | $Enums.LoanStatus
    collateralValue?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type AuditLogEntryUpdateWithoutBatchInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    tableName?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogEntryUncheckedUpdateWithoutBatchInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    tableName?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    userId?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type AuditLogEntryUncheckedUpdateManyWithoutBatchInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    tableName?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    userId?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type ACCUCreateManyProjectInput = {
    id?: string
    vintage: number
    location: string
    issuanceDate: Date | string
    serialRangeStart: string
    serialRangeEnd: string
    category: string
    quantity: number
    acquisitionCost: number
    classification: $Enums.Classification
    acquisitionDate: Date | string
    entityId: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    loanStatus?: boolean
    loanDetails?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ACCUUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    vintage?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    issuanceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    serialRangeStart?: StringFieldUpdateOperationsInput | string
    serialRangeEnd?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    acquisitionCost?: FloatFieldUpdateOperationsInput | number
    classification?: EnumClassificationFieldUpdateOperationsInput | $Enums.Classification
    acquisitionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    loanStatus?: BoolFieldUpdateOperationsInput | boolean
    loanDetails?: NullableJsonNullValueInput | InputJsonValue
    valuationLogs?: ValuationLogUpdateManyWithoutBatchNestedInput
    reclassificationRequests?: ReclassificationRequestUpdateManyWithoutBatchNestedInput
    loans?: LoanUpdateManyWithoutBatchNestedInput
    auditLogEntries?: AuditLogEntryUpdateManyWithoutBatchNestedInput
    createdBy?: UserUpdateOneWithoutBatchesNestedInput
    entity?: EntityUpdateOneRequiredWithoutBatchesNestedInput
  }

  export type ACCUUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    vintage?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    issuanceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    serialRangeStart?: StringFieldUpdateOperationsInput | string
    serialRangeEnd?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    acquisitionCost?: FloatFieldUpdateOperationsInput | number
    classification?: EnumClassificationFieldUpdateOperationsInput | $Enums.Classification
    acquisitionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    loanStatus?: BoolFieldUpdateOperationsInput | boolean
    loanDetails?: NullableJsonNullValueInput | InputJsonValue
    valuationLogs?: ValuationLogUncheckedUpdateManyWithoutBatchNestedInput
    reclassificationRequests?: ReclassificationRequestUncheckedUpdateManyWithoutBatchNestedInput
    loans?: LoanUncheckedUpdateManyWithoutBatchNestedInput
    auditLogEntries?: AuditLogEntryUncheckedUpdateManyWithoutBatchNestedInput
  }

  export type ACCUUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    vintage?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    issuanceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    serialRangeStart?: StringFieldUpdateOperationsInput | string
    serialRangeEnd?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    acquisitionCost?: FloatFieldUpdateOperationsInput | number
    classification?: EnumClassificationFieldUpdateOperationsInput | $Enums.Classification
    acquisitionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    loanStatus?: BoolFieldUpdateOperationsInput | boolean
    loanDetails?: NullableJsonNullValueInput | InputJsonValue
  }

  export type JournalLineCreateManyEntryInput = {
    id?: string
    accountCode: string
    debit: number
    credit: number
    description?: string | null
    createdAt?: Date | string
    entityId: string
  }

  export type JournalLineUpdateWithoutEntryInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountCode?: StringFieldUpdateOperationsInput | string
    debit?: FloatFieldUpdateOperationsInput | number
    credit?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type JournalLineUncheckedUpdateWithoutEntryInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountCode?: StringFieldUpdateOperationsInput | string
    debit?: FloatFieldUpdateOperationsInput | number
    credit?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type JournalLineUncheckedUpdateManyWithoutEntryInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountCode?: StringFieldUpdateOperationsInput | string
    debit?: FloatFieldUpdateOperationsInput | number
    credit?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type ACCUCreateManyCreatedByInput = {
    id?: string
    projectId: string
    vintage: number
    location: string
    issuanceDate: Date | string
    serialRangeStart: string
    serialRangeEnd: string
    category: string
    quantity: number
    acquisitionCost: number
    classification: $Enums.Classification
    acquisitionDate: Date | string
    entityId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    loanStatus?: boolean
    loanDetails?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ValuationLogCreateManyCreatedByInput = {
    id?: string
    batchId: string
    date: Date | string
    marketPrice: number
    nrv: number
    impairment?: number | null
    createdAt?: Date | string
    entityId: string
  }

  export type AuditLogEntryCreateManyUserInput = {
    id?: string
    action: string
    tableName: string
    recordId: string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
    ipAddress?: string | null
    entityId: string
  }

  export type JournalEntryCreateManyCreatedByInput = {
    id?: string
    description: string
    date: Date | string
    createdAt?: Date | string
    entityId: string
  }

  export type ReclassificationRequestCreateManySubmittedByUserInput = {
    id?: string
    batchId: string
    fromClass: $Enums.Classification
    toClass: $Enums.Classification
    reason?: string | null
    status?: $Enums.ReclassificationStatus
    approvedBy?: string | null
    timestamp?: Date | string
    approvedAt?: Date | string | null
    entityId: string
  }

  export type UserSettingCreateManyUserInput = {
    id?: string
    roles: string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type XbrlTagCreateManyCreatedByInput = {
    id?: string
    tagName: string
    value: string
    context: string
    periodStart?: Date | string | null
    periodEnd?: Date | string | null
    createdAt?: Date | string
    entityId: string
  }

  export type ImportJobCreateManyUserInput = {
    id?: string
    fileName: string
    status?: string
    processedRows?: number
    errorCount?: number
    createdAt?: Date | string
    completedAt?: Date | string | null
    entityId: string
  }

  export type ACCUUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    vintage?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    issuanceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    serialRangeStart?: StringFieldUpdateOperationsInput | string
    serialRangeEnd?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    acquisitionCost?: FloatFieldUpdateOperationsInput | number
    classification?: EnumClassificationFieldUpdateOperationsInput | $Enums.Classification
    acquisitionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    loanStatus?: BoolFieldUpdateOperationsInput | boolean
    loanDetails?: NullableJsonNullValueInput | InputJsonValue
    valuationLogs?: ValuationLogUpdateManyWithoutBatchNestedInput
    reclassificationRequests?: ReclassificationRequestUpdateManyWithoutBatchNestedInput
    loans?: LoanUpdateManyWithoutBatchNestedInput
    auditLogEntries?: AuditLogEntryUpdateManyWithoutBatchNestedInput
    entity?: EntityUpdateOneRequiredWithoutBatchesNestedInput
    project?: ProjectUpdateOneRequiredWithoutAccusNestedInput
  }

  export type ACCUUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    vintage?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    issuanceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    serialRangeStart?: StringFieldUpdateOperationsInput | string
    serialRangeEnd?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    acquisitionCost?: FloatFieldUpdateOperationsInput | number
    classification?: EnumClassificationFieldUpdateOperationsInput | $Enums.Classification
    acquisitionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    loanStatus?: BoolFieldUpdateOperationsInput | boolean
    loanDetails?: NullableJsonNullValueInput | InputJsonValue
    valuationLogs?: ValuationLogUncheckedUpdateManyWithoutBatchNestedInput
    reclassificationRequests?: ReclassificationRequestUncheckedUpdateManyWithoutBatchNestedInput
    loans?: LoanUncheckedUpdateManyWithoutBatchNestedInput
    auditLogEntries?: AuditLogEntryUncheckedUpdateManyWithoutBatchNestedInput
  }

  export type ACCUUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    vintage?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    issuanceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    serialRangeStart?: StringFieldUpdateOperationsInput | string
    serialRangeEnd?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    acquisitionCost?: FloatFieldUpdateOperationsInput | number
    classification?: EnumClassificationFieldUpdateOperationsInput | $Enums.Classification
    acquisitionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    loanStatus?: BoolFieldUpdateOperationsInput | boolean
    loanDetails?: NullableJsonNullValueInput | InputJsonValue
  }

  export type ValuationLogUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    marketPrice?: FloatFieldUpdateOperationsInput | number
    nrv?: FloatFieldUpdateOperationsInput | number
    impairment?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
    batch?: ACCUUpdateOneRequiredWithoutValuationLogsNestedInput
  }

  export type ValuationLogUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    batchId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    marketPrice?: FloatFieldUpdateOperationsInput | number
    nrv?: FloatFieldUpdateOperationsInput | number
    impairment?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type ValuationLogUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    batchId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    marketPrice?: FloatFieldUpdateOperationsInput | number
    nrv?: FloatFieldUpdateOperationsInput | number
    impairment?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type AuditLogEntryUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    tableName?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: StringFieldUpdateOperationsInput | string
    batch?: ACCUUpdateOneWithoutAuditLogEntriesNestedInput
  }

  export type AuditLogEntryUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    tableName?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type AuditLogEntryUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    tableName?: StringFieldUpdateOperationsInput | string
    recordId?: StringFieldUpdateOperationsInput | string
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type JournalEntryUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
    lines?: JournalLineUpdateManyWithoutEntryNestedInput
  }

  export type JournalEntryUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
    lines?: JournalLineUncheckedUpdateManyWithoutEntryNestedInput
  }

  export type JournalEntryUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type ReclassificationRequestUpdateWithoutSubmittedByUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromClass?: EnumClassificationFieldUpdateOperationsInput | $Enums.Classification
    toClass?: EnumClassificationFieldUpdateOperationsInput | $Enums.Classification
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumReclassificationStatusFieldUpdateOperationsInput | $Enums.ReclassificationStatus
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    entityId?: StringFieldUpdateOperationsInput | string
    batch?: ACCUUpdateOneRequiredWithoutReclassificationRequestsNestedInput
  }

  export type ReclassificationRequestUncheckedUpdateWithoutSubmittedByUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    batchId?: StringFieldUpdateOperationsInput | string
    fromClass?: EnumClassificationFieldUpdateOperationsInput | $Enums.Classification
    toClass?: EnumClassificationFieldUpdateOperationsInput | $Enums.Classification
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumReclassificationStatusFieldUpdateOperationsInput | $Enums.ReclassificationStatus
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type ReclassificationRequestUncheckedUpdateManyWithoutSubmittedByUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    batchId?: StringFieldUpdateOperationsInput | string
    fromClass?: EnumClassificationFieldUpdateOperationsInput | $Enums.Classification
    toClass?: EnumClassificationFieldUpdateOperationsInput | $Enums.Classification
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumReclassificationStatusFieldUpdateOperationsInput | $Enums.ReclassificationStatus
    approvedBy?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    approvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type UserSettingUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    roles?: StringFieldUpdateOperationsInput | string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSettingUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    roles?: StringFieldUpdateOperationsInput | string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserSettingUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    roles?: StringFieldUpdateOperationsInput | string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type XbrlTagUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagName?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    context?: StringFieldUpdateOperationsInput | string
    periodStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type XbrlTagUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagName?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    context?: StringFieldUpdateOperationsInput | string
    periodStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type XbrlTagUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    tagName?: StringFieldUpdateOperationsInput | string
    value?: StringFieldUpdateOperationsInput | string
    context?: StringFieldUpdateOperationsInput | string
    periodStart?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    periodEnd?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type ImportJobUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    processedRows?: IntFieldUpdateOperationsInput | number
    errorCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type ImportJobUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    processedRows?: IntFieldUpdateOperationsInput | number
    errorCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type ImportJobUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    processedRows?: IntFieldUpdateOperationsInput | number
    errorCount?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type ACCUCreateManyEntityInput = {
    id?: string
    projectId: string
    vintage: number
    location: string
    issuanceDate: Date | string
    serialRangeStart: string
    serialRangeEnd: string
    category: string
    quantity: number
    acquisitionCost: number
    classification: $Enums.Classification
    acquisitionDate: Date | string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    loanStatus?: boolean
    loanDetails?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserCreateManyEntityInput = {
    id?: string
    email: string
    roles: string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LoanCreateManyEntityInput = {
    id?: string
    batchId: string
    creditorId: string
    quantity: number
    loanAmount: number
    buybackRate?: number | null
    buybackDate?: Date | string | null
    loanStatus?: $Enums.LoanStatus
    collateralValue?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ACCUUpdateWithoutEntityInput = {
    id?: StringFieldUpdateOperationsInput | string
    vintage?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    issuanceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    serialRangeStart?: StringFieldUpdateOperationsInput | string
    serialRangeEnd?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    acquisitionCost?: FloatFieldUpdateOperationsInput | number
    classification?: EnumClassificationFieldUpdateOperationsInput | $Enums.Classification
    acquisitionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    loanStatus?: BoolFieldUpdateOperationsInput | boolean
    loanDetails?: NullableJsonNullValueInput | InputJsonValue
    valuationLogs?: ValuationLogUpdateManyWithoutBatchNestedInput
    reclassificationRequests?: ReclassificationRequestUpdateManyWithoutBatchNestedInput
    loans?: LoanUpdateManyWithoutBatchNestedInput
    auditLogEntries?: AuditLogEntryUpdateManyWithoutBatchNestedInput
    createdBy?: UserUpdateOneWithoutBatchesNestedInput
    project?: ProjectUpdateOneRequiredWithoutAccusNestedInput
  }

  export type ACCUUncheckedUpdateWithoutEntityInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    vintage?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    issuanceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    serialRangeStart?: StringFieldUpdateOperationsInput | string
    serialRangeEnd?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    acquisitionCost?: FloatFieldUpdateOperationsInput | number
    classification?: EnumClassificationFieldUpdateOperationsInput | $Enums.Classification
    acquisitionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    loanStatus?: BoolFieldUpdateOperationsInput | boolean
    loanDetails?: NullableJsonNullValueInput | InputJsonValue
    valuationLogs?: ValuationLogUncheckedUpdateManyWithoutBatchNestedInput
    reclassificationRequests?: ReclassificationRequestUncheckedUpdateManyWithoutBatchNestedInput
    loans?: LoanUncheckedUpdateManyWithoutBatchNestedInput
    auditLogEntries?: AuditLogEntryUncheckedUpdateManyWithoutBatchNestedInput
  }

  export type ACCUUncheckedUpdateManyWithoutEntityInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    vintage?: IntFieldUpdateOperationsInput | number
    location?: StringFieldUpdateOperationsInput | string
    issuanceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    serialRangeStart?: StringFieldUpdateOperationsInput | string
    serialRangeEnd?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    acquisitionCost?: FloatFieldUpdateOperationsInput | number
    classification?: EnumClassificationFieldUpdateOperationsInput | $Enums.Classification
    acquisitionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    loanStatus?: BoolFieldUpdateOperationsInput | boolean
    loanDetails?: NullableJsonNullValueInput | InputJsonValue
  }

  export type UserUpdateWithoutEntityInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    roles?: StringFieldUpdateOperationsInput | string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    batches?: ACCUUpdateManyWithoutCreatedByNestedInput
    valuationLogs?: ValuationLogUpdateManyWithoutCreatedByNestedInput
    auditLogs?: AuditLogEntryUpdateManyWithoutUserNestedInput
    journalEntries?: JournalEntryUpdateManyWithoutCreatedByNestedInput
    reclassRequests?: ReclassificationRequestUpdateManyWithoutSubmittedByUserNestedInput
    settings?: UserSettingUpdateManyWithoutUserNestedInput
    xbrlTags?: XbrlTagUpdateManyWithoutCreatedByNestedInput
    importJobs?: ImportJobUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEntityInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    roles?: StringFieldUpdateOperationsInput | string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    batches?: ACCUUncheckedUpdateManyWithoutCreatedByNestedInput
    valuationLogs?: ValuationLogUncheckedUpdateManyWithoutCreatedByNestedInput
    auditLogs?: AuditLogEntryUncheckedUpdateManyWithoutUserNestedInput
    journalEntries?: JournalEntryUncheckedUpdateManyWithoutCreatedByNestedInput
    reclassRequests?: ReclassificationRequestUncheckedUpdateManyWithoutSubmittedByUserNestedInput
    settings?: UserSettingUncheckedUpdateManyWithoutUserNestedInput
    xbrlTags?: XbrlTagUncheckedUpdateManyWithoutCreatedByNestedInput
    importJobs?: ImportJobUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutEntityInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    roles?: StringFieldUpdateOperationsInput | string
    preferences?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LoanUpdateWithoutEntityInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    loanAmount?: FloatFieldUpdateOperationsInput | number
    buybackRate?: NullableFloatFieldUpdateOperationsInput | number | null
    buybackDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loanStatus?: EnumLoanStatusFieldUpdateOperationsInput | $Enums.LoanStatus
    collateralValue?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    batch?: ACCUUpdateOneRequiredWithoutLoansNestedInput
    creditor?: CreditorUpdateOneRequiredWithoutLoansNestedInput
  }

  export type LoanUncheckedUpdateWithoutEntityInput = {
    id?: StringFieldUpdateOperationsInput | string
    batchId?: StringFieldUpdateOperationsInput | string
    creditorId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    loanAmount?: FloatFieldUpdateOperationsInput | number
    buybackRate?: NullableFloatFieldUpdateOperationsInput | number | null
    buybackDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loanStatus?: EnumLoanStatusFieldUpdateOperationsInput | $Enums.LoanStatus
    collateralValue?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LoanUncheckedUpdateManyWithoutEntityInput = {
    id?: StringFieldUpdateOperationsInput | string
    batchId?: StringFieldUpdateOperationsInput | string
    creditorId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    loanAmount?: FloatFieldUpdateOperationsInput | number
    buybackRate?: NullableFloatFieldUpdateOperationsInput | number | null
    buybackDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loanStatus?: EnumLoanStatusFieldUpdateOperationsInput | $Enums.LoanStatus
    collateralValue?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LoanCreateManyCreditorInput = {
    id?: string
    batchId: string
    quantity: number
    loanAmount: number
    buybackRate?: number | null
    buybackDate?: Date | string | null
    loanStatus?: $Enums.LoanStatus
    collateralValue?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    entityId: string
  }

  export type LoanUpdateWithoutCreditorInput = {
    id?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    loanAmount?: FloatFieldUpdateOperationsInput | number
    buybackRate?: NullableFloatFieldUpdateOperationsInput | number | null
    buybackDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loanStatus?: EnumLoanStatusFieldUpdateOperationsInput | $Enums.LoanStatus
    collateralValue?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    batch?: ACCUUpdateOneRequiredWithoutLoansNestedInput
    entity?: EntityUpdateOneRequiredWithoutLoansNestedInput
  }

  export type LoanUncheckedUpdateWithoutCreditorInput = {
    id?: StringFieldUpdateOperationsInput | string
    batchId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    loanAmount?: FloatFieldUpdateOperationsInput | number
    buybackRate?: NullableFloatFieldUpdateOperationsInput | number | null
    buybackDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loanStatus?: EnumLoanStatusFieldUpdateOperationsInput | $Enums.LoanStatus
    collateralValue?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
  }

  export type LoanUncheckedUpdateManyWithoutCreditorInput = {
    id?: StringFieldUpdateOperationsInput | string
    batchId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    loanAmount?: FloatFieldUpdateOperationsInput | number
    buybackRate?: NullableFloatFieldUpdateOperationsInput | number | null
    buybackDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    loanStatus?: EnumLoanStatusFieldUpdateOperationsInput | $Enums.LoanStatus
    collateralValue?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    entityId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}