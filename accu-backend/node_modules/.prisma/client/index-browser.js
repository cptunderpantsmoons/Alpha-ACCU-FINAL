
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.ACCUScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  vintage: 'vintage',
  location: 'location',
  issuanceDate: 'issuanceDate',
  serialRangeStart: 'serialRangeStart',
  serialRangeEnd: 'serialRangeEnd',
  category: 'category',
  quantity: 'quantity',
  acquisitionCost: 'acquisitionCost',
  classification: 'classification',
  acquisitionDate: 'acquisitionDate',
  entityId: 'entityId',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  status: 'status',
  loanStatus: 'loanStatus',
  loanDetails: 'loanDetails'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  methodType: 'methodType',
  method: 'method'
};

exports.Prisma.ValuationLogScalarFieldEnum = {
  id: 'id',
  batchId: 'batchId',
  date: 'date',
  marketPrice: 'marketPrice',
  nrv: 'nrv',
  impairment: 'impairment',
  userId: 'userId',
  createdAt: 'createdAt',
  entityId: 'entityId'
};

exports.Prisma.AuditLogEntryScalarFieldEnum = {
  id: 'id',
  action: 'action',
  tableName: 'tableName',
  recordId: 'recordId',
  oldValues: 'oldValues',
  newValues: 'newValues',
  userId: 'userId',
  timestamp: 'timestamp',
  ipAddress: 'ipAddress',
  entityId: 'entityId'
};

exports.Prisma.JournalEntryScalarFieldEnum = {
  id: 'id',
  description: 'description',
  date: 'date',
  userId: 'userId',
  createdAt: 'createdAt',
  entityId: 'entityId'
};

exports.Prisma.JournalLineScalarFieldEnum = {
  id: 'id',
  entryId: 'entryId',
  accountCode: 'accountCode',
  debit: 'debit',
  credit: 'credit',
  description: 'description',
  createdAt: 'createdAt',
  entityId: 'entityId'
};

exports.Prisma.XbrlTagScalarFieldEnum = {
  id: 'id',
  tagName: 'tagName',
  value: 'value',
  context: 'context',
  periodStart: 'periodStart',
  periodEnd: 'periodEnd',
  userId: 'userId',
  createdAt: 'createdAt',
  entityId: 'entityId'
};

exports.Prisma.ReclassificationRequestScalarFieldEnum = {
  id: 'id',
  batchId: 'batchId',
  fromClass: 'fromClass',
  toClass: 'toClass',
  reason: 'reason',
  status: 'status',
  submittedBy: 'submittedBy',
  approvedBy: 'approvedBy',
  timestamp: 'timestamp',
  approvedAt: 'approvedAt',
  entityId: 'entityId'
};

exports.Prisma.MarketPriceScalarFieldEnum = {
  id: 'id',
  date: 'date',
  commodityType: 'commodityType',
  price: 'price',
  source: 'source',
  createdAt: 'createdAt',
  entityId: 'entityId'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  roles: 'roles',
  preferences: 'preferences',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  entityId: 'entityId'
};

exports.Prisma.UserSettingScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  roles: 'roles',
  preferences: 'preferences',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EntityScalarFieldEnum = {
  id: 'id',
  name: 'name',
  legalName: 'legalName',
  address: 'address',
  contactInfo: 'contactInfo',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  status: 'status',
  parentId: 'parentId'
};

exports.Prisma.LoanScalarFieldEnum = {
  id: 'id',
  batchId: 'batchId',
  creditorId: 'creditorId',
  quantity: 'quantity',
  loanAmount: 'loanAmount',
  buybackRate: 'buybackRate',
  buybackDate: 'buybackDate',
  loanStatus: 'loanStatus',
  collateralValue: 'collateralValue',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  entityId: 'entityId'
};

exports.Prisma.CreditorScalarFieldEnum = {
  id: 'id',
  name: 'name',
  contactInfo: 'contactInfo',
  terms: 'terms',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ImportJobScalarFieldEnum = {
  id: 'id',
  fileName: 'fileName',
  status: 'status',
  processedRows: 'processedRows',
  errorCount: 'errorCount',
  createdAt: 'createdAt',
  completedAt: 'completedAt',
  userId: 'userId',
  entityId: 'entityId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Classification = exports.$Enums.Classification = {
  inventory: 'inventory',
  intangible: 'intangible',
  fvtpl: 'fvtpl'
};

exports.ReclassificationStatus = exports.$Enums.ReclassificationStatus = {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected'
};

exports.LoanStatus = exports.$Enums.LoanStatus = {
  active: 'active',
  completed: 'completed',
  expired: 'expired',
  default: 'default'
};

exports.Prisma.ModelName = {
  ACCU: 'ACCU',
  Project: 'Project',
  ValuationLog: 'ValuationLog',
  AuditLogEntry: 'AuditLogEntry',
  JournalEntry: 'JournalEntry',
  JournalLine: 'JournalLine',
  XbrlTag: 'XbrlTag',
  ReclassificationRequest: 'ReclassificationRequest',
  MarketPrice: 'MarketPrice',
  User: 'User',
  UserSetting: 'UserSetting',
  Entity: 'Entity',
  Loan: 'Loan',
  Creditor: 'Creditor',
  ImportJob: 'ImportJob'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
